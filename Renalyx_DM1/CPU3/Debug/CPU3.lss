
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006e64  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086e64  00086e64  00016e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  00086e6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005f0  20070c6c  00087ad8  00020c6c  2**2
                  ALLOC
  4 .stack        00002004  2007125c  000880c8  00020c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c6c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   00015ab2  00000000  00000000  00020cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000030b6  00000000  00000000  000367a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000074d6  00000000  00000000  00039856  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000da8  00000000  00000000  00040d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c10  00000000  00000000  00041ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000a3e6  00000000  00000000  000426e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018011  00000000  00000000  0004caca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000627f5  00000000  00000000  00064adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000042c8  00000000  00000000  000c72d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073260 	.word	0x20073260
   80004:	000836f1 	.word	0x000836f1
   80008:	000836e9 	.word	0x000836e9
   8000c:	000836e9 	.word	0x000836e9
   80010:	000836e9 	.word	0x000836e9
   80014:	000836e9 	.word	0x000836e9
   80018:	000836e9 	.word	0x000836e9
	...
   8002c:	000836e9 	.word	0x000836e9
   80030:	000836e9 	.word	0x000836e9
   80034:	00000000 	.word	0x00000000
   80038:	000836e9 	.word	0x000836e9
   8003c:	000836e9 	.word	0x000836e9
   80040:	000836e9 	.word	0x000836e9
   80044:	000836e9 	.word	0x000836e9
   80048:	000836e9 	.word	0x000836e9
   8004c:	000836e9 	.word	0x000836e9
   80050:	000836e9 	.word	0x000836e9
   80054:	000836e9 	.word	0x000836e9
   80058:	000836e9 	.word	0x000836e9
   8005c:	000836e9 	.word	0x000836e9
   80060:	00082045 	.word	0x00082045
   80064:	000836e9 	.word	0x000836e9
   80068:	00000000 	.word	0x00000000
   8006c:	0008336d 	.word	0x0008336d
   80070:	00083385 	.word	0x00083385
   80074:	0008339d 	.word	0x0008339d
   80078:	000833b5 	.word	0x000833b5
	...
   80084:	000836e9 	.word	0x000836e9
   80088:	000836e9 	.word	0x000836e9
   8008c:	000836e9 	.word	0x000836e9
   80090:	000836e9 	.word	0x000836e9
   80094:	000836e9 	.word	0x000836e9
   80098:	000836e9 	.word	0x000836e9
   8009c:	000836e9 	.word	0x000836e9
   800a0:	000836e9 	.word	0x000836e9
   800a4:	00000000 	.word	0x00000000
   800a8:	000836e9 	.word	0x000836e9
   800ac:	00080be1 	.word	0x00080be1
   800b0:	00080d55 	.word	0x00080d55
   800b4:	00080e3d 	.word	0x00080e3d
   800b8:	00080e6d 	.word	0x00080e6d
   800bc:	000836e9 	.word	0x000836e9
   800c0:	000836e9 	.word	0x000836e9
   800c4:	00080ecd 	.word	0x00080ecd
   800c8:	00080e9d 	.word	0x00080e9d
   800cc:	000836e9 	.word	0x000836e9
   800d0:	000836e9 	.word	0x000836e9
   800d4:	000836e9 	.word	0x000836e9
   800d8:	000836e9 	.word	0x000836e9
   800dc:	000836e9 	.word	0x000836e9
   800e0:	000836e9 	.word	0x000836e9
   800e4:	000836e9 	.word	0x000836e9
   800e8:	000836e9 	.word	0x000836e9
   800ec:	000801b5 	.word	0x000801b5
   800f0:	000836e9 	.word	0x000836e9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	00086e6c 	.word	0x00086e6c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070c70 	.word	0x20070c70
   80144:	00086e6c 	.word	0x00086e6c
   80148:	00086e6c 	.word	0x00086e6c
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bf00      	nop
   80172:	bd80      	pop	{r7, pc}
   80174:	00082d9d 	.word	0x00082d9d
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	bf00      	nop
   801a8:	370c      	adds	r7, #12
   801aa:	46bd      	mov	sp, r7
   801ac:	bc80      	pop	{r7}
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	bf00      	nop
   801fa:	3708      	adds	r7, #8
   801fc:	46bd      	mov	sp, r7
   801fe:	bd80      	pop	{r7, pc}
   80200:	400b4000 	.word	0x400b4000
   80204:	20070dd4 	.word	0x20070dd4
   80208:	000804cd 	.word	0x000804cd
   8020c:	00080215 	.word	0x00080215
   80210:	20070ca0 	.word	0x20070ca0

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a99      	ldr	r2, [pc, #612]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b98      	ldr	r3, [pc, #608]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b97      	ldr	r3, [pc, #604]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b96      	ldr	r3, [pc, #600]	; (8048c <dd_can_extract_mailbox_data+0x278>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b96      	ldr	r3, [pc, #600]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				break;
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e11c      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b94      	ldr	r3, [pc, #592]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a93      	ldr	r2, [pc, #588]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b91      	ldr	r3, [pc, #580]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b8f      	ldr	r3, [pc, #572]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b8e      	ldr	r3, [pc, #568]	; (80498 <dd_can_extract_mailbox_data+0x284>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b8d      	ldr	r3, [pc, #564]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b8a      	ldr	r3, [pc, #552]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b88      	ldr	r3, [pc, #544]	; (80494 <dd_can_extract_mailbox_data+0x280>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b88      	ldr	r3, [pc, #544]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b88      	ldr	r3, [pc, #544]	; (804a0 <dd_can_extract_mailbox_data+0x28c>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b86      	ldr	r3, [pc, #536]	; (8049c <dd_can_extract_mailbox_data+0x288>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a86      	ldr	r2, [pc, #536]	; (804a4 <dd_can_extract_mailbox_data+0x290>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b13      	cmp	r3, #19
   80294:	f200 80f0 	bhi.w	80478 <dd_can_extract_mailbox_data+0x264>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080335 	.word	0x00080335
   802a4:	00080357 	.word	0x00080357
   802a8:	00080381 	.word	0x00080381
   802ac:	000803db 	.word	0x000803db
   802b0:	000803e9 	.word	0x000803e9
   802b4:	000803f7 	.word	0x000803f7
   802b8:	00080405 	.word	0x00080405
   802bc:	000803bf 	.word	0x000803bf
   802c0:	000803cd 	.word	0x000803cd
   802c4:	000803a3 	.word	0x000803a3
   802c8:	000803b1 	.word	0x000803b1
   802cc:	000802f1 	.word	0x000802f1
   802d0:	00080313 	.word	0x00080313
   802d4:	00080437 	.word	0x00080437
   802d8:	00080479 	.word	0x00080479
   802dc:	00080413 	.word	0x00080413
   802e0:	00080479 	.word	0x00080479
   802e4:	00080441 	.word	0x00080441
   802e8:	0008045d 	.word	0x0008045d
   802ec:	00080479 	.word	0x00080479
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802f0:	4b6d      	ldr	r3, [pc, #436]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   802f2:	2200      	movs	r2, #0
   802f4:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802f6:	4b6d      	ldr	r3, [pc, #436]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   802f8:	881b      	ldrh	r3, [r3, #0]
   802fa:	b29b      	uxth	r3, r3
   802fc:	3301      	adds	r3, #1
   802fe:	b29a      	uxth	r2, r3
   80300:	4b6a      	ldr	r3, [pc, #424]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80302:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   80304:	4b6a      	ldr	r3, [pc, #424]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80306:	2201      	movs	r2, #1
   80308:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   8030a:	4b61      	ldr	r3, [pc, #388]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8030c:	2200      	movs	r2, #0
   8030e:	701a      	strb	r2, [r3, #0]
				  
				  break;
   80310:	e0b3      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   80312:	4b65      	ldr	r3, [pc, #404]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80314:	2200      	movs	r2, #0
   80316:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   80318:	4b64      	ldr	r3, [pc, #400]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   8031a:	881b      	ldrh	r3, [r3, #0]
   8031c:	b29b      	uxth	r3, r3
   8031e:	3301      	adds	r3, #1
   80320:	b29a      	uxth	r2, r3
   80322:	4b62      	ldr	r3, [pc, #392]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80324:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   80326:	4b62      	ldr	r3, [pc, #392]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80328:	2201      	movs	r2, #1
   8032a:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   8032c:	4b58      	ldr	r3, [pc, #352]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8032e:	2200      	movs	r2, #0
   80330:	701a      	strb	r2, [r3, #0]
				  
				  break;
   80332:	e0a2      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
			     case PROP_START_ALIGMENT:
			          test =0;
   80334:	4b5c      	ldr	r3, [pc, #368]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80336:	2200      	movs	r2, #0
   80338:	701a      	strb	r2, [r3, #0]
					  count_start++;
   8033a:	4b5c      	ldr	r3, [pc, #368]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   8033c:	881b      	ldrh	r3, [r3, #0]
   8033e:	b29b      	uxth	r3, r3
   80340:	3301      	adds	r3, #1
   80342:	b29a      	uxth	r2, r3
   80344:	4b59      	ldr	r3, [pc, #356]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80346:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   80348:	4b59      	ldr	r3, [pc, #356]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   8034a:	2201      	movs	r2, #1
   8034c:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   8034e:	4b50      	ldr	r3, [pc, #320]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80350:	2200      	movs	r2, #0
   80352:	701a      	strb	r2, [r3, #0]
			    break;
   80354:	e091      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
			    case PROP_START_MIXING:
				 User_setConductivity = temp_struct.temp_reg_16[1];
   80356:	4b4c      	ldr	r3, [pc, #304]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   80358:	885a      	ldrh	r2, [r3, #2]
   8035a:	4b56      	ldr	r3, [pc, #344]	; (804b4 <dd_can_extract_mailbox_data+0x2a0>)
   8035c:	801a      	strh	r2, [r3, #0]
// // 							break;
// 							
// 						}
			       

				    test=0;
   8035e:	4b52      	ldr	r3, [pc, #328]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80360:	2200      	movs	r2, #0
   80362:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80364:	4b51      	ldr	r3, [pc, #324]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80366:	881b      	ldrh	r3, [r3, #0]
   80368:	b29b      	uxth	r3, r3
   8036a:	3301      	adds	r3, #1
   8036c:	b29a      	uxth	r2, r3
   8036e:	4b4f      	ldr	r3, [pc, #316]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80370:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80372:	4b4f      	ldr	r3, [pc, #316]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80374:	2201      	movs	r2, #1
   80376:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   80378:	4b45      	ldr	r3, [pc, #276]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8037a:	2200      	movs	r2, #0
   8037c:	701a      	strb	r2, [r3, #0]
			    break;
   8037e:	e07c      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
			    case PROP_STOP_MIXING:
			        test =0;
   80380:	4b49      	ldr	r3, [pc, #292]	; (804a8 <dd_can_extract_mailbox_data+0x294>)
   80382:	2200      	movs	r2, #0
   80384:	701a      	strb	r2, [r3, #0]
					count_stop++;
   80386:	4b4c      	ldr	r3, [pc, #304]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80388:	881b      	ldrh	r3, [r3, #0]
   8038a:	b29b      	uxth	r3, r3
   8038c:	3301      	adds	r3, #1
   8038e:	b29a      	uxth	r2, r3
   80390:	4b49      	ldr	r3, [pc, #292]	; (804b8 <dd_can_extract_mailbox_data+0x2a4>)
   80392:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80394:	4b46      	ldr	r3, [pc, #280]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80396:	2201      	movs	r2, #1
   80398:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8039a:	4b3d      	ldr	r3, [pc, #244]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
			    break;
   803a0:	e06b      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   803a2:	4b43      	ldr	r3, [pc, #268]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803a4:	2201      	movs	r2, #1
   803a6:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   803a8:	4b39      	ldr	r3, [pc, #228]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803aa:	2200      	movs	r2, #0
   803ac:	701a      	strb	r2, [r3, #0]
			    break;
   803ae:	e064      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   803b0:	4b3f      	ldr	r3, [pc, #252]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803b2:	2201      	movs	r2, #1
   803b4:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   803b6:	4b36      	ldr	r3, [pc, #216]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803b8:	2200      	movs	r2, #0
   803ba:	701a      	strb	r2, [r3, #0]
			    break;
   803bc:	e05d      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   803be:	4b3c      	ldr	r3, [pc, #240]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803c0:	2201      	movs	r2, #1
   803c2:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803c4:	4b32      	ldr	r3, [pc, #200]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803c6:	2200      	movs	r2, #0
   803c8:	701a      	strb	r2, [r3, #0]
			    break;
   803ca:	e056      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803cc:	4b38      	ldr	r3, [pc, #224]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803ce:	2201      	movs	r2, #1
   803d0:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803d2:	4b2f      	ldr	r3, [pc, #188]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803d4:	2200      	movs	r2, #0
   803d6:	701a      	strb	r2, [r3, #0]
				
				break;
   803d8:	e04f      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803da:	4b35      	ldr	r3, [pc, #212]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803dc:	2201      	movs	r2, #1
   803de:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803e0:	4b2b      	ldr	r3, [pc, #172]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803e2:	2200      	movs	r2, #0
   803e4:	701a      	strb	r2, [r3, #0]
				break;
   803e6:	e048      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803e8:	4b31      	ldr	r3, [pc, #196]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803ea:	2201      	movs	r2, #1
   803ec:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803ee:	4b28      	ldr	r3, [pc, #160]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803f0:	2200      	movs	r2, #0
   803f2:	701a      	strb	r2, [r3, #0]
				break;
   803f4:	e041      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803f6:	4b2e      	ldr	r3, [pc, #184]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   803f8:	2201      	movs	r2, #1
   803fa:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803fc:	4b24      	ldr	r3, [pc, #144]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   803fe:	2200      	movs	r2, #0
   80400:	701a      	strb	r2, [r3, #0]
				break;
   80402:	e03a      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   80404:	4b2a      	ldr	r3, [pc, #168]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80406:	2201      	movs	r2, #1
   80408:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   8040a:	4b21      	ldr	r3, [pc, #132]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   8040c:	2200      	movs	r2, #0
   8040e:	701a      	strb	r2, [r3, #0]
				break;
   80410:	e033      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				case PROP_CONDUCTIVITY:
				stabilise_Conductivity ++;
   80412:	4b2a      	ldr	r3, [pc, #168]	; (804bc <dd_can_extract_mailbox_data+0x2a8>)
   80414:	781b      	ldrb	r3, [r3, #0]
   80416:	3301      	adds	r3, #1
   80418:	b2da      	uxtb	r2, r3
   8041a:	4b28      	ldr	r3, [pc, #160]	; (804bc <dd_can_extract_mailbox_data+0x2a8>)
   8041c:	701a      	strb	r2, [r3, #0]
//				avg_conductivity = avg_conductivity + temp_struct.temp_reg_16[1];
				conductivity = avg_conductivity + temp_struct.temp_reg_16[1];
   8041e:	4b1a      	ldr	r3, [pc, #104]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   80420:	885a      	ldrh	r2, [r3, #2]
   80422:	4b27      	ldr	r3, [pc, #156]	; (804c0 <dd_can_extract_mailbox_data+0x2ac>)
   80424:	881b      	ldrh	r3, [r3, #0]
   80426:	4413      	add	r3, r2
   80428:	b29a      	uxth	r2, r3
   8042a:	4b26      	ldr	r3, [pc, #152]	; (804c4 <dd_can_extract_mailbox_data+0x2b0>)
   8042c:	801a      	strh	r2, [r3, #0]
// 					avg_conductivity = avg_conductivity /6;
// 					stabilise_Conductivity = 0;
// 					conductivity = avg_conductivity/10;
// 				}
				
				state = CAN_IDLE;
   8042e:	4b18      	ldr	r3, [pc, #96]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80430:	2200      	movs	r2, #0
   80432:	701a      	strb	r2, [r3, #0]

				break;
   80434:	e021      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				case PROP_UPDATE_ACID_RC:
				rc = temp_struct.temp_reg_16[1];
   80436:	4b14      	ldr	r3, [pc, #80]	; (80488 <dd_can_extract_mailbox_data+0x274>)
   80438:	885a      	ldrh	r2, [r3, #2]
   8043a:	4b23      	ldr	r3, [pc, #140]	; (804c8 <dd_can_extract_mailbox_data+0x2b4>)
   8043c:	801a      	strh	r2, [r3, #0]
				break;
   8043e:	e01c      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				
				case prop_BICAR_FEED_BACK:
				   //test =0;
				   count_start++;
   80440:	4b1a      	ldr	r3, [pc, #104]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80442:	881b      	ldrh	r3, [r3, #0]
   80444:	b29b      	uxth	r3, r3
   80446:	3301      	adds	r3, #1
   80448:	b29a      	uxth	r2, r3
   8044a:	4b18      	ldr	r3, [pc, #96]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   8044c:	801a      	strh	r2, [r3, #0]
				flag_buff=1;
   8044e:	4b18      	ldr	r3, [pc, #96]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   80450:	2201      	movs	r2, #1
   80452:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   80454:	4b0e      	ldr	r3, [pc, #56]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80456:	2200      	movs	r2, #0
   80458:	701a      	strb	r2, [r3, #0]
				break;
   8045a:	e00e      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
				case prop_BICAR_FEED_BACK_STATUS:
				   //test =0;
				   count_start++;
   8045c:	4b13      	ldr	r3, [pc, #76]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   8045e:	881b      	ldrh	r3, [r3, #0]
   80460:	b29b      	uxth	r3, r3
   80462:	3301      	adds	r3, #1
   80464:	b29a      	uxth	r2, r3
   80466:	4b11      	ldr	r3, [pc, #68]	; (804ac <dd_can_extract_mailbox_data+0x298>)
   80468:	801a      	strh	r2, [r3, #0]
				flag_buff=1;
   8046a:	4b11      	ldr	r3, [pc, #68]	; (804b0 <dd_can_extract_mailbox_data+0x29c>)
   8046c:	2201      	movs	r2, #1
   8046e:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   80470:	4b07      	ldr	r3, [pc, #28]	; (80490 <dd_can_extract_mailbox_data+0x27c>)
   80472:	2200      	movs	r2, #0
   80474:	701a      	strb	r2, [r3, #0]
				break;
   80476:	e000      	b.n	8047a <dd_can_extract_mailbox_data+0x266>
// 				 count_start++;
// 				flag_buff=1;
// 				state= CAN_IDLE;
				break;
				default:
				break;
   80478:	bf00      	nop
			  }		  
		   default:
		   break;
   8047a:	bf00      	nop
		   
	 }
}
   8047c:	bf00      	nop
   8047e:	3714      	adds	r7, #20
   80480:	46bd      	mov	sp, r7
   80482:	bc80      	pop	{r7}
   80484:	4770      	bx	lr
   80486:	bf00      	nop
   80488:	20070dc8 	.word	0x20070dc8
   8048c:	20070c93 	.word	0x20070c93
   80490:	20070c88 	.word	0x20070c88
   80494:	20070c8e 	.word	0x20070c8e
   80498:	20070c90 	.word	0x20070c90
   8049c:	20070c94 	.word	0x20070c94
   804a0:	20070e08 	.word	0x20070e08
   804a4:	20070dcc 	.word	0x20070dcc
   804a8:	20070c97 	.word	0x20070c97
   804ac:	20070c8a 	.word	0x20070c8a
   804b0:	20070df4 	.word	0x20070df4
   804b4:	20070dce 	.word	0x20070dce
   804b8:	20070c8c 	.word	0x20070c8c
   804bc:	20070c98 	.word	0x20070c98
   804c0:	20070c9c 	.word	0x20070c9c
   804c4:	20070c9a 	.word	0x20070c9a
   804c8:	20070cde 	.word	0x20070cde

000804cc <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   804cc:	b480      	push	{r7}
   804ce:	b087      	sub	sp, #28
   804d0:	af00      	add	r7, sp, #0
   804d2:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   804d4:	2300      	movs	r3, #0
   804d6:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804d8:	687b      	ldr	r3, [r7, #4]
   804da:	681b      	ldr	r3, [r3, #0]
   804dc:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   804de:	687b      	ldr	r3, [r7, #4]
   804e0:	689b      	ldr	r3, [r3, #8]
   804e2:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   804e4:	68fb      	ldr	r3, [r7, #12]
   804e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   804ea:	2b00      	cmp	r3, #0
   804ec:	d006      	beq.n	804fc <dd_can_mailbox_read+0x30>
   804ee:	68fb      	ldr	r3, [r7, #12]
   804f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804f4:	2b00      	cmp	r3, #0
   804f6:	d001      	beq.n	804fc <dd_can_mailbox_read+0x30>
   804f8:	2302      	movs	r3, #2
   804fa:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   804fc:	4a26      	ldr	r2, [pc, #152]	; (80598 <dd_can_mailbox_read+0xcc>)
   804fe:	7cfb      	ldrb	r3, [r7, #19]
   80500:	015b      	lsls	r3, r3, #5
   80502:	4413      	add	r3, r2
   80504:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   80508:	681b      	ldr	r3, [r3, #0]
   8050a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8050e:	687b      	ldr	r3, [r7, #4]
   80510:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80512:	68fb      	ldr	r3, [r7, #12]
   80514:	0c1b      	lsrs	r3, r3, #16
   80516:	b2db      	uxtb	r3, r3
   80518:	f003 030f 	and.w	r3, r3, #15
   8051c:	b2da      	uxtb	r2, r3
   8051e:	687b      	ldr	r3, [r7, #4]
   80520:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   80522:	4a1d      	ldr	r2, [pc, #116]	; (80598 <dd_can_mailbox_read+0xcc>)
   80524:	7cfb      	ldrb	r3, [r7, #19]
   80526:	015b      	lsls	r3, r3, #5
   80528:	4413      	add	r3, r2
   8052a:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8052e:	681a      	ldr	r2, [r3, #0]
   80530:	687b      	ldr	r3, [r7, #4]
   80532:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   80534:	4a18      	ldr	r2, [pc, #96]	; (80598 <dd_can_mailbox_read+0xcc>)
   80536:	7cfb      	ldrb	r3, [r7, #19]
   80538:	015b      	lsls	r3, r3, #5
   8053a:	4413      	add	r3, r2
   8053c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80540:	681a      	ldr	r2, [r3, #0]
   80542:	687b      	ldr	r3, [r7, #4]
   80544:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   80546:	4a14      	ldr	r2, [pc, #80]	; (80598 <dd_can_mailbox_read+0xcc>)
   80548:	7cfb      	ldrb	r3, [r7, #19]
   8054a:	015b      	lsls	r3, r3, #5
   8054c:	4413      	add	r3, r2
   8054e:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80552:	681a      	ldr	r2, [r3, #0]
   80554:	687b      	ldr	r3, [r7, #4]
   80556:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80558:	687b      	ldr	r3, [r7, #4]
   8055a:	689b      	ldr	r3, [r3, #8]
   8055c:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   8055e:	68fb      	ldr	r3, [r7, #12]
   80560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80564:	2b00      	cmp	r3, #0
   80566:	d003      	beq.n	80570 <dd_can_mailbox_read+0xa4>
   80568:	697b      	ldr	r3, [r7, #20]
   8056a:	f043 0304 	orr.w	r3, r3, #4
   8056e:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   80570:	4909      	ldr	r1, [pc, #36]	; (80598 <dd_can_mailbox_read+0xcc>)
   80572:	7cfb      	ldrb	r3, [r7, #19]
   80574:	687a      	ldr	r2, [r7, #4]
   80576:	7992      	ldrb	r2, [r2, #6]
   80578:	0412      	lsls	r2, r2, #16
   8057a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8057e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80582:	015b      	lsls	r3, r3, #5
   80584:	440b      	add	r3, r1
   80586:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   8058a:	601a      	str	r2, [r3, #0]
	return ul_retval;
   8058c:	697b      	ldr	r3, [r7, #20]
}
   8058e:	4618      	mov	r0, r3
   80590:	371c      	adds	r7, #28
   80592:	46bd      	mov	sp, r7
   80594:	bc80      	pop	{r7}
   80596:	4770      	bx	lr
   80598:	400b4000 	.word	0x400b4000

0008059c <dd_can_mailbox_write>:

		
 uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   8059c:	b480      	push	{r7}
   8059e:	b085      	sub	sp, #20
   805a0:	af00      	add	r7, sp, #0
   805a2:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	681b      	ldr	r3, [r3, #0]
   805a8:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   805aa:	4a2a      	ldr	r2, [pc, #168]	; (80654 <dd_can_mailbox_write+0xb8>)
   805ac:	7bfb      	ldrb	r3, [r7, #15]
   805ae:	015b      	lsls	r3, r3, #5
   805b0:	4413      	add	r3, r2
   805b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   805b6:	681a      	ldr	r2, [r3, #0]
   805b8:	687b      	ldr	r3, [r7, #4]
   805ba:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   805bc:	687b      	ldr	r3, [r7, #4]
   805be:	689b      	ldr	r3, [r3, #8]
   805c0:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   805c2:	68bb      	ldr	r3, [r7, #8]
   805c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   805c8:	2b00      	cmp	r3, #0
   805ca:	d101      	bne.n	805d0 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   805cc:	2301      	movs	r3, #1
   805ce:	e03b      	b.n	80648 <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   805d0:	687b      	ldr	r3, [r7, #4]
   805d2:	795b      	ldrb	r3, [r3, #5]
   805d4:	2b00      	cmp	r3, #0
   805d6:	d00b      	beq.n	805f0 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   805d8:	491e      	ldr	r1, [pc, #120]	; (80654 <dd_can_mailbox_write+0xb8>)
   805da:	7bfb      	ldrb	r3, [r7, #15]
   805dc:	687a      	ldr	r2, [r7, #4]
   805de:	6912      	ldr	r2, [r2, #16]
   805e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   805e4:	015b      	lsls	r3, r3, #5
   805e6:	440b      	add	r3, r1
   805e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805ec:	601a      	str	r2, [r3, #0]
   805ee:	e008      	b.n	80602 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   805f0:	4918      	ldr	r1, [pc, #96]	; (80654 <dd_can_mailbox_write+0xb8>)
   805f2:	7bfb      	ldrb	r3, [r7, #15]
   805f4:	687a      	ldr	r2, [r7, #4]
   805f6:	6912      	ldr	r2, [r2, #16]
   805f8:	015b      	lsls	r3, r3, #5
   805fa:	440b      	add	r3, r1
   805fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80600:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80602:	4914      	ldr	r1, [pc, #80]	; (80654 <dd_can_mailbox_write+0xb8>)
   80604:	7bfb      	ldrb	r3, [r7, #15]
   80606:	687a      	ldr	r2, [r7, #4]
   80608:	6992      	ldr	r2, [r2, #24]
   8060a:	015b      	lsls	r3, r3, #5
   8060c:	440b      	add	r3, r1
   8060e:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80612:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   80614:	687b      	ldr	r3, [r7, #4]
   80616:	799b      	ldrb	r3, [r3, #6]
   80618:	2b04      	cmp	r3, #4
   8061a:	d908      	bls.n	8062e <dd_can_mailbox_write+0x92>
   8061c:	490d      	ldr	r1, [pc, #52]	; (80654 <dd_can_mailbox_write+0xb8>)
   8061e:	7bfb      	ldrb	r3, [r7, #15]
   80620:	687a      	ldr	r2, [r7, #4]
   80622:	69d2      	ldr	r2, [r2, #28]
   80624:	015b      	lsls	r3, r3, #5
   80626:	440b      	add	r3, r1
   80628:	f503 7306 	add.w	r3, r3, #536	; 0x218
   8062c:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   8062e:	4909      	ldr	r1, [pc, #36]	; (80654 <dd_can_mailbox_write+0xb8>)
   80630:	7bfb      	ldrb	r3, [r7, #15]
   80632:	687a      	ldr	r2, [r7, #4]
   80634:	7992      	ldrb	r2, [r2, #6]
   80636:	0412      	lsls	r2, r2, #16
   80638:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8063c:	015b      	lsls	r3, r3, #5
   8063e:	440b      	add	r3, r1
   80640:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80644:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   80646:	2300      	movs	r3, #0
}
   80648:	4618      	mov	r0, r3
   8064a:	3714      	adds	r7, #20
   8064c:	46bd      	mov	sp, r7
   8064e:	bc80      	pop	{r7}
   80650:	4770      	bx	lr
   80652:	bf00      	nop
   80654:	400b4000 	.word	0x400b4000

00080658 <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   80658:	b480      	push	{r7}
   8065a:	b085      	sub	sp, #20
   8065c:	af00      	add	r7, sp, #0
   8065e:	4603      	mov	r3, r0
   80660:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   80662:	4b07      	ldr	r3, [pc, #28]	; (80680 <dd_can_global_send_transfer_cmd+0x28>)
   80664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   80666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   8066a:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   8066c:	4904      	ldr	r1, [pc, #16]	; (80680 <dd_can_global_send_transfer_cmd+0x28>)
   8066e:	79fa      	ldrb	r2, [r7, #7]
   80670:	68fb      	ldr	r3, [r7, #12]
   80672:	4313      	orrs	r3, r2
   80674:	624b      	str	r3, [r1, #36]	; 0x24
}
   80676:	bf00      	nop
   80678:	3714      	adds	r7, #20
   8067a:	46bd      	mov	sp, r7
   8067c:	bc80      	pop	{r7}
   8067e:	4770      	bx	lr
   80680:	400b4000 	.word	0x400b4000

00080684 <dd_can_mailbox_conf>:



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80684:	b480      	push	{r7}
   80686:	b085      	sub	sp, #20
   80688:	af00      	add	r7, sp, #0
   8068a:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8068c:	687b      	ldr	r3, [r7, #4]
   8068e:	681b      	ldr	r3, [r3, #0]
   80690:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80692:	687b      	ldr	r3, [r7, #4]
   80694:	791b      	ldrb	r3, [r3, #4]
   80696:	2b00      	cmp	r3, #0
   80698:	d12f      	bne.n	806fa <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   8069a:	4a35      	ldr	r2, [pc, #212]	; (80770 <dd_can_mailbox_conf+0xec>)
   8069c:	7bfb      	ldrb	r3, [r7, #15]
   8069e:	3310      	adds	r3, #16
   806a0:	015b      	lsls	r3, r3, #5
   806a2:	4413      	add	r3, r2
   806a4:	2200      	movs	r2, #0
   806a6:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   806a8:	4a31      	ldr	r2, [pc, #196]	; (80770 <dd_can_mailbox_conf+0xec>)
   806aa:	7bfb      	ldrb	r3, [r7, #15]
   806ac:	3310      	adds	r3, #16
   806ae:	015b      	lsls	r3, r3, #5
   806b0:	4413      	add	r3, r2
   806b2:	3304      	adds	r3, #4
   806b4:	2200      	movs	r2, #0
   806b6:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   806b8:	4a2d      	ldr	r2, [pc, #180]	; (80770 <dd_can_mailbox_conf+0xec>)
   806ba:	7bfb      	ldrb	r3, [r7, #15]
   806bc:	015b      	lsls	r3, r3, #5
   806be:	4413      	add	r3, r2
   806c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   806c4:	2200      	movs	r2, #0
   806c6:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   806c8:	4a29      	ldr	r2, [pc, #164]	; (80770 <dd_can_mailbox_conf+0xec>)
   806ca:	7bfb      	ldrb	r3, [r7, #15]
   806cc:	015b      	lsls	r3, r3, #5
   806ce:	4413      	add	r3, r2
   806d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
   806d4:	2200      	movs	r2, #0
   806d6:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   806d8:	4a25      	ldr	r2, [pc, #148]	; (80770 <dd_can_mailbox_conf+0xec>)
   806da:	7bfb      	ldrb	r3, [r7, #15]
   806dc:	015b      	lsls	r3, r3, #5
   806de:	4413      	add	r3, r2
   806e0:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806e4:	2200      	movs	r2, #0
   806e6:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   806e8:	4a21      	ldr	r2, [pc, #132]	; (80770 <dd_can_mailbox_conf+0xec>)
   806ea:	7bfb      	ldrb	r3, [r7, #15]
   806ec:	015b      	lsls	r3, r3, #5
   806ee:	4413      	add	r3, r2
   806f0:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   806f4:	2200      	movs	r2, #0
   806f6:	601a      	str	r2, [r3, #0]
		return;
   806f8:	e035      	b.n	80766 <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   806fa:	481d      	ldr	r0, [pc, #116]	; (80770 <dd_can_mailbox_conf+0xec>)
   806fc:	7bfb      	ldrb	r3, [r7, #15]
   806fe:	491c      	ldr	r1, [pc, #112]	; (80770 <dd_can_mailbox_conf+0xec>)
   80700:	7bfa      	ldrb	r2, [r7, #15]
   80702:	3210      	adds	r2, #16
   80704:	0152      	lsls	r2, r2, #5
   80706:	440a      	add	r2, r1
   80708:	6812      	ldr	r2, [r2, #0]
   8070a:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   8070e:	6879      	ldr	r1, [r7, #4]
   80710:	79c9      	ldrb	r1, [r1, #7]
   80712:	0409      	lsls	r1, r1, #16
   80714:	430a      	orrs	r2, r1
   80716:	3310      	adds	r3, #16
   80718:	015b      	lsls	r3, r3, #5
   8071a:	4403      	add	r3, r0
   8071c:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   8071e:	4914      	ldr	r1, [pc, #80]	; (80770 <dd_can_mailbox_conf+0xec>)
   80720:	7bfb      	ldrb	r3, [r7, #15]
   80722:	687a      	ldr	r2, [r7, #4]
   80724:	68d2      	ldr	r2, [r2, #12]
   80726:	3310      	adds	r3, #16
   80728:	015b      	lsls	r3, r3, #5
   8072a:	440b      	add	r3, r1
   8072c:	3304      	adds	r3, #4
   8072e:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80730:	490f      	ldr	r1, [pc, #60]	; (80770 <dd_can_mailbox_conf+0xec>)
   80732:	7bfb      	ldrb	r3, [r7, #15]
   80734:	687a      	ldr	r2, [r7, #4]
   80736:	6912      	ldr	r2, [r2, #16]
   80738:	015b      	lsls	r3, r3, #5
   8073a:	440b      	add	r3, r1
   8073c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80740:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   80742:	480b      	ldr	r0, [pc, #44]	; (80770 <dd_can_mailbox_conf+0xec>)
   80744:	7bfb      	ldrb	r3, [r7, #15]
   80746:	490a      	ldr	r1, [pc, #40]	; (80770 <dd_can_mailbox_conf+0xec>)
   80748:	7bfa      	ldrb	r2, [r7, #15]
   8074a:	3210      	adds	r2, #16
   8074c:	0152      	lsls	r2, r2, #5
   8074e:	440a      	add	r2, r1
   80750:	6812      	ldr	r2, [r2, #0]
   80752:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   80756:	6879      	ldr	r1, [r7, #4]
   80758:	7909      	ldrb	r1, [r1, #4]
   8075a:	0609      	lsls	r1, r1, #24
   8075c:	430a      	orrs	r2, r1
   8075e:	3310      	adds	r3, #16
   80760:	015b      	lsls	r3, r3, #5
   80762:	4403      	add	r3, r0
   80764:	601a      	str	r2, [r3, #0]
}
   80766:	3714      	adds	r7, #20
   80768:	46bd      	mov	sp, r7
   8076a:	bc80      	pop	{r7}
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop
   80770:	400b4000 	.word	0x400b4000

00080774 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   80774:	b580      	push	{r7, lr}
   80776:	b08e      	sub	sp, #56	; 0x38
   80778:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   8077a:	4b4c      	ldr	r3, [pc, #304]	; (808ac <DD_INIT_CAN+0x138>)
   8077c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   8077e:	2378      	movs	r3, #120	; 0x78
   80780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80784:	4b4a      	ldr	r3, [pc, #296]	; (808b0 <DD_INIT_CAN+0x13c>)
   80786:	4a4b      	ldr	r2, [pc, #300]	; (808b4 <DD_INIT_CAN+0x140>)
   80788:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   8078c:	4a48      	ldr	r2, [pc, #288]	; (808b0 <DD_INIT_CAN+0x13c>)
   8078e:	4b48      	ldr	r3, [pc, #288]	; (808b0 <DD_INIT_CAN+0x13c>)
   80790:	681b      	ldr	r3, [r3, #0]
   80792:	f023 0301 	bic.w	r3, r3, #1
   80796:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   80798:	4945      	ldr	r1, [pc, #276]	; (808b0 <DD_INIT_CAN+0x13c>)
   8079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8079c:	78db      	ldrb	r3, [r3, #3]
   8079e:	3b01      	subs	r3, #1
   807a0:	f003 0207 	and.w	r2, r3, #7
   807a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807a6:	789b      	ldrb	r3, [r3, #2]
   807a8:	3b01      	subs	r3, #1
   807aa:	011b      	lsls	r3, r3, #4
   807ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807b0:	431a      	orrs	r2, r3
   807b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807b4:	785b      	ldrb	r3, [r3, #1]
   807b6:	3b01      	subs	r3, #1
   807b8:	021b      	lsls	r3, r3, #8
   807ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   807be:	431a      	orrs	r2, r3
   807c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   807c2:	791b      	ldrb	r3, [r3, #4]
   807c4:	3b01      	subs	r3, #1
   807c6:	031b      	lsls	r3, r3, #12
   807c8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   807cc:	431a      	orrs	r2, r3
   807ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   807d2:	3b01      	subs	r3, #1
   807d4:	041b      	lsls	r3, r3, #16
   807d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   807da:	4313      	orrs	r3, r2
   807dc:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   807de:	2300      	movs	r3, #0
   807e0:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807e2:	2300      	movs	r3, #0
   807e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807e8:	e00b      	b.n	80802 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   807ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807ee:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   807f0:	1d3b      	adds	r3, r7, #4
   807f2:	4618      	mov	r0, r3
   807f4:	4b30      	ldr	r3, [pc, #192]	; (808b8 <DD_INIT_CAN+0x144>)
   807f6:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807fc:	3301      	adds	r3, #1
   807fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80806:	2b07      	cmp	r3, #7
   80808:	d9ef      	bls.n	807ea <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8080a:	4a29      	ldr	r2, [pc, #164]	; (808b0 <DD_INIT_CAN+0x13c>)
   8080c:	4b28      	ldr	r3, [pc, #160]	; (808b0 <DD_INIT_CAN+0x13c>)
   8080e:	681b      	ldr	r3, [r3, #0]
   80810:	f043 0301 	orr.w	r3, r3, #1
   80814:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   80816:	2300      	movs	r3, #0
   80818:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8081a:	2300      	movs	r3, #0
   8081c:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   8081e:	e005      	b.n	8082c <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   80820:	4b23      	ldr	r3, [pc, #140]	; (808b0 <DD_INIT_CAN+0x13c>)
   80822:	691b      	ldr	r3, [r3, #16]
   80824:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   80826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80828:	3301      	adds	r3, #1
   8082a:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   8082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8082e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80832:	2b00      	cmp	r3, #0
   80834:	d103      	bne.n	8083e <DD_INIT_CAN+0xca>
   80836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80838:	4a20      	ldr	r2, [pc, #128]	; (808bc <DD_INIT_CAN+0x148>)
   8083a:	4293      	cmp	r3, r2
   8083c:	d9f0      	bls.n	80820 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   8083e:	4b20      	ldr	r3, [pc, #128]	; (808c0 <DD_INIT_CAN+0x14c>)
   80840:	2201      	movs	r2, #1
   80842:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   80844:	4b1e      	ldr	r3, [pc, #120]	; (808c0 <DD_INIT_CAN+0x14c>)
   80846:	2201      	movs	r2, #1
   80848:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   8084a:	4b1d      	ldr	r3, [pc, #116]	; (808c0 <DD_INIT_CAN+0x14c>)
   8084c:	2200      	movs	r2, #0
   8084e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80850:	4b1b      	ldr	r3, [pc, #108]	; (808c0 <DD_INIT_CAN+0x14c>)
   80852:	2200      	movs	r2, #0
   80854:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   80856:	4b1a      	ldr	r3, [pc, #104]	; (808c0 <DD_INIT_CAN+0x14c>)
   80858:	4a1a      	ldr	r2, [pc, #104]	; (808c4 <DD_INIT_CAN+0x150>)
   8085a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   8085c:	4b18      	ldr	r3, [pc, #96]	; (808c0 <DD_INIT_CAN+0x14c>)
   8085e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   80862:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   80864:	4816      	ldr	r0, [pc, #88]	; (808c0 <DD_INIT_CAN+0x14c>)
   80866:	4b14      	ldr	r3, [pc, #80]	; (808b8 <DD_INIT_CAN+0x144>)
   80868:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   8086a:	202b      	movs	r0, #43	; 0x2b
   8086c:	4b16      	ldr	r3, [pc, #88]	; (808c8 <DD_INIT_CAN+0x154>)
   8086e:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80870:	4b0f      	ldr	r3, [pc, #60]	; (808b0 <DD_INIT_CAN+0x13c>)
   80872:	2202      	movs	r2, #2
   80874:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   80876:	4b12      	ldr	r3, [pc, #72]	; (808c0 <DD_INIT_CAN+0x14c>)
   80878:	2200      	movs	r2, #0
   8087a:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   8087c:	4b10      	ldr	r3, [pc, #64]	; (808c0 <DD_INIT_CAN+0x14c>)
   8087e:	2203      	movs	r2, #3
   80880:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80882:	4b0f      	ldr	r3, [pc, #60]	; (808c0 <DD_INIT_CAN+0x14c>)
   80884:	2201      	movs	r2, #1
   80886:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80888:	4b0d      	ldr	r3, [pc, #52]	; (808c0 <DD_INIT_CAN+0x14c>)
   8088a:	2200      	movs	r2, #0
   8088c:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   8088e:	4b0c      	ldr	r3, [pc, #48]	; (808c0 <DD_INIT_CAN+0x14c>)
   80890:	4a0c      	ldr	r2, [pc, #48]	; (808c4 <DD_INIT_CAN+0x150>)
   80892:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80894:	4b0a      	ldr	r3, [pc, #40]	; (808c0 <DD_INIT_CAN+0x14c>)
   80896:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8089a:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   8089c:	4808      	ldr	r0, [pc, #32]	; (808c0 <DD_INIT_CAN+0x14c>)
   8089e:	4b06      	ldr	r3, [pc, #24]	; (808b8 <DD_INIT_CAN+0x144>)
   808a0:	4798      	blx	r3
}
   808a2:	bf00      	nop
   808a4:	3738      	adds	r7, #56	; 0x38
   808a6:	46bd      	mov	sp, r7
   808a8:	bd80      	pop	{r7, pc}
   808aa:	bf00      	nop
   808ac:	00086d7c 	.word	0x00086d7c
   808b0:	400b4000 	.word	0x400b4000
   808b4:	43414e00 	.word	0x43414e00
   808b8:	00080685 	.word	0x00080685
   808bc:	0001869f 	.word	0x0001869f
   808c0:	20070dd4 	.word	0x20070dd4
   808c4:	1ffc0000 	.word	0x1ffc0000
   808c8:	00080185 	.word	0x00080185

000808cc <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   808cc:	b580      	push	{r7, lr}
   808ce:	b082      	sub	sp, #8
   808d0:	af00      	add	r7, sp, #0
   808d2:	4603      	mov	r3, r0
   808d4:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   808d6:	4b18      	ldr	r3, [pc, #96]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808d8:	f640 2241 	movw	r2, #2625	; 0xa41
   808dc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   808e0:	4b15      	ldr	r3, [pc, #84]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808e2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   808e6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   808ea:	4b13      	ldr	r3, [pc, #76]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808ec:	f640 2241 	movw	r2, #2625	; 0xa41
   808f0:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   808f4:	4b10      	ldr	r3, [pc, #64]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   808f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   808fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   808fe:	79fb      	ldrb	r3, [r7, #7]
   80900:	2b01      	cmp	r3, #1
   80902:	d002      	beq.n	8090a <CPU3_D_SET_PUMP+0x3e>
   80904:	2b02      	cmp	r3, #2
   80906:	d009      	beq.n	8091c <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   80908:	e011      	b.n	8092e <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   8090a:	4b0b      	ldr	r3, [pc, #44]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   8090c:	2210      	movs	r2, #16
   8090e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   80910:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80914:	2055      	movs	r0, #85	; 0x55
   80916:	4b09      	ldr	r3, [pc, #36]	; (8093c <CPU3_D_SET_PUMP+0x70>)
   80918:	4798      	blx	r3
		break;
   8091a:	e008      	b.n	8092e <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   8091c:	4b06      	ldr	r3, [pc, #24]	; (80938 <CPU3_D_SET_PUMP+0x6c>)
   8091e:	2220      	movs	r2, #32
   80920:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   80922:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80926:	2056      	movs	r0, #86	; 0x56
   80928:	4b04      	ldr	r3, [pc, #16]	; (8093c <CPU3_D_SET_PUMP+0x70>)
   8092a:	4798      	blx	r3
		break;
   8092c:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   8092e:	2300      	movs	r3, #0
}
   80930:	4618      	mov	r0, r3
   80932:	3708      	adds	r7, #8
   80934:	46bd      	mov	sp, r7
   80936:	bd80      	pop	{r7, pc}
   80938:	40094000 	.word	0x40094000
   8093c:	000830a1 	.word	0x000830a1

00080940 <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   80940:	b590      	push	{r4, r7, lr}
   80942:	b089      	sub	sp, #36	; 0x24
   80944:	af00      	add	r7, sp, #0
   80946:	4603      	mov	r3, r0
   80948:	460a      	mov	r2, r1
   8094a:	71fb      	strb	r3, [r7, #7]
   8094c:	4613      	mov	r3, r2
   8094e:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   80950:	2300      	movs	r3, #0
   80952:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   80954:	79bb      	ldrb	r3, [r7, #6]
   80956:	01db      	lsls	r3, r3, #7
   80958:	4a20      	ldr	r2, [pc, #128]	; (809dc <CPU3_D_CONFIG_TIMER+0x9c>)
   8095a:	fb92 f3f3 	sdiv	r3, r2, r3
   8095e:	1e5a      	subs	r2, r3, #1
   80960:	4b1f      	ldr	r3, [pc, #124]	; (809e0 <CPU3_D_CONFIG_TIMER+0xa0>)
   80962:	4610      	mov	r0, r2
   80964:	4798      	blx	r3
   80966:	4603      	mov	r3, r0
   80968:	460c      	mov	r4, r1
   8096a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   8096e:	4b1d      	ldr	r3, [pc, #116]	; (809e4 <CPU3_D_CONFIG_TIMER+0xa4>)
   80970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   80974:	4798      	blx	r3
   80976:	4603      	mov	r3, r0
   80978:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   8097a:	79fb      	ldrb	r3, [r7, #7]
   8097c:	2b04      	cmp	r3, #4
   8097e:	d826      	bhi.n	809ce <CPU3_D_CONFIG_TIMER+0x8e>
   80980:	a201      	add	r2, pc, #4	; (adr r2, 80988 <CPU3_D_CONFIG_TIMER+0x48>)
   80982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80986:	bf00      	nop
   80988:	0008099d 	.word	0x0008099d
   8098c:	000809ab 	.word	0x000809ab
   80990:	000809bd 	.word	0x000809bd
   80994:	000809c3 	.word	0x000809c3
   80998:	000809c9 	.word	0x000809c9
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   8099c:	68fb      	ldr	r3, [r7, #12]
   8099e:	2221      	movs	r2, #33	; 0x21
   809a0:	69f9      	ldr	r1, [r7, #28]
   809a2:	4811      	ldr	r0, [pc, #68]	; (809e8 <CPU3_D_CONFIG_TIMER+0xa8>)
   809a4:	4c11      	ldr	r4, [pc, #68]	; (809ec <CPU3_D_CONFIG_TIMER+0xac>)
   809a6:	47a0      	blx	r4
		break;
   809a8:	e012      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   809aa:	79bb      	ldrb	r3, [r7, #6]
   809ac:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   809ae:	68fb      	ldr	r3, [r7, #12]
   809b0:	221b      	movs	r2, #27
   809b2:	2100      	movs	r1, #0
   809b4:	480e      	ldr	r0, [pc, #56]	; (809f0 <CPU3_D_CONFIG_TIMER+0xb0>)
   809b6:	4c0f      	ldr	r4, [pc, #60]	; (809f4 <CPU3_D_CONFIG_TIMER+0xb4>)
   809b8:	47a0      	blx	r4
		break;
   809ba:	e009      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   809bc:	79bb      	ldrb	r3, [r7, #6]
   809be:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   809c0:	e006      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   809c2:	79bb      	ldrb	r3, [r7, #6]
   809c4:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   809c6:	e003      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   809c8:	79bb      	ldrb	r3, [r7, #6]
   809ca:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   809cc:	e000      	b.n	809d0 <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   809ce:	bf00      	nop
		
	}
}
   809d0:	bf00      	nop
   809d2:	4618      	mov	r0, r3
   809d4:	3724      	adds	r7, #36	; 0x24
   809d6:	46bd      	mov	sp, r7
   809d8:	bd90      	pop	{r4, r7, pc}
   809da:	bf00      	nop
   809dc:	0501bd00 	.word	0x0501bd00
   809e0:	00083d1d 	.word	0x00083d1d
   809e4:	00083de9 	.word	0x00083de9
   809e8:	40088000 	.word	0x40088000
   809ec:	00081271 	.word	0x00081271
   809f0:	40080000 	.word	0x40080000
   809f4:	000812cd 	.word	0x000812cd

000809f8 <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   809f8:	b580      	push	{r7, lr}
   809fa:	b082      	sub	sp, #8
   809fc:	af00      	add	r7, sp, #0
   809fe:	4603      	mov	r3, r0
   80a00:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   80a02:	79fb      	ldrb	r3, [r7, #7]
   80a04:	2b04      	cmp	r3, #4
   80a06:	d826      	bhi.n	80a56 <CPU3_D_STOP_TIMER+0x5e>
   80a08:	a201      	add	r2, pc, #4	; (adr r2, 80a10 <CPU3_D_STOP_TIMER+0x18>)
   80a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80a0e:	bf00      	nop
   80a10:	00080a25 	.word	0x00080a25
   80a14:	00080a2f 	.word	0x00080a2f
   80a18:	00080a39 	.word	0x00080a39
   80a1c:	00080a43 	.word	0x00080a43
   80a20:	00080a4d 	.word	0x00080a4d
	{
		case 0:
		tc_stop(TC0,0);
   80a24:	2100      	movs	r1, #0
   80a26:	480f      	ldr	r0, [pc, #60]	; (80a64 <CPU3_D_STOP_TIMER+0x6c>)
   80a28:	4b0f      	ldr	r3, [pc, #60]	; (80a68 <CPU3_D_STOP_TIMER+0x70>)
   80a2a:	4798      	blx	r3
		break;
   80a2c:	e014      	b.n	80a58 <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   80a2e:	2101      	movs	r1, #1
   80a30:	480c      	ldr	r0, [pc, #48]	; (80a64 <CPU3_D_STOP_TIMER+0x6c>)
   80a32:	4b0d      	ldr	r3, [pc, #52]	; (80a68 <CPU3_D_STOP_TIMER+0x70>)
   80a34:	4798      	blx	r3
		break;
   80a36:	e00f      	b.n	80a58 <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   80a38:	2100      	movs	r1, #0
   80a3a:	480c      	ldr	r0, [pc, #48]	; (80a6c <CPU3_D_STOP_TIMER+0x74>)
   80a3c:	4b0a      	ldr	r3, [pc, #40]	; (80a68 <CPU3_D_STOP_TIMER+0x70>)
   80a3e:	4798      	blx	r3
		break;
   80a40:	e00a      	b.n	80a58 <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   80a42:	2100      	movs	r1, #0
   80a44:	480a      	ldr	r0, [pc, #40]	; (80a70 <CPU3_D_STOP_TIMER+0x78>)
   80a46:	4b08      	ldr	r3, [pc, #32]	; (80a68 <CPU3_D_STOP_TIMER+0x70>)
   80a48:	4798      	blx	r3
		break;
   80a4a:	e005      	b.n	80a58 <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   80a4c:	2101      	movs	r1, #1
   80a4e:	4808      	ldr	r0, [pc, #32]	; (80a70 <CPU3_D_STOP_TIMER+0x78>)
   80a50:	4b05      	ldr	r3, [pc, #20]	; (80a68 <CPU3_D_STOP_TIMER+0x70>)
   80a52:	4798      	blx	r3
		break;
   80a54:	e000      	b.n	80a58 <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   80a56:	bf00      	nop
	}
   80a58:	bf00      	nop
   80a5a:	4618      	mov	r0, r3
   80a5c:	3708      	adds	r7, #8
   80a5e:	46bd      	mov	sp, r7
   80a60:	bd80      	pop	{r7, pc}
   80a62:	bf00      	nop
   80a64:	40080000 	.word	0x40080000
   80a68:	00081725 	.word	0x00081725
   80a6c:	40088000 	.word	0x40088000
   80a70:	40084000 	.word	0x40084000

00080a74 <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   80a74:	b580      	push	{r7, lr}
   80a76:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   80a78:	200b      	movs	r0, #11
   80a7a:	4b3b      	ldr	r3, [pc, #236]	; (80b68 <CPU3_D_INIT_PIO+0xf4>)
   80a7c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   80a7e:	200c      	movs	r0, #12
   80a80:	4b39      	ldr	r3, [pc, #228]	; (80b68 <CPU3_D_INIT_PIO+0xf4>)
   80a82:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   80a84:	200d      	movs	r0, #13
   80a86:	4b38      	ldr	r3, [pc, #224]	; (80b68 <CPU3_D_INIT_PIO+0xf4>)
   80a88:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   80a8a:	200e      	movs	r0, #14
   80a8c:	4b36      	ldr	r3, [pc, #216]	; (80b68 <CPU3_D_INIT_PIO+0xf4>)
   80a8e:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80a90:	4b36      	ldr	r3, [pc, #216]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80a92:	4a37      	ldr	r2, [pc, #220]	; (80b70 <CPU3_D_INIT_PIO+0xfc>)
   80a94:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   80a98:	4b36      	ldr	r3, [pc, #216]	; (80b74 <CPU3_D_INIT_PIO+0x100>)
   80a9a:	4a35      	ldr	r2, [pc, #212]	; (80b70 <CPU3_D_INIT_PIO+0xfc>)
   80a9c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80aa0:	4b35      	ldr	r3, [pc, #212]	; (80b78 <CPU3_D_INIT_PIO+0x104>)
   80aa2:	4a33      	ldr	r2, [pc, #204]	; (80b70 <CPU3_D_INIT_PIO+0xfc>)
   80aa4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   80aa8:	4b34      	ldr	r3, [pc, #208]	; (80b7c <CPU3_D_INIT_PIO+0x108>)
   80aaa:	4a31      	ldr	r2, [pc, #196]	; (80b70 <CPU3_D_INIT_PIO+0xfc>)
   80aac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80ab0:	4b2e      	ldr	r3, [pc, #184]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ab2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   80ab6:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   80ab8:	4b2c      	ldr	r3, [pc, #176]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80aba:	4a31      	ldr	r2, [pc, #196]	; (80b80 <CPU3_D_INIT_PIO+0x10c>)
   80abc:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80abe:	4b2b      	ldr	r3, [pc, #172]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ac0:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   80ac4:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   80ac6:	4b29      	ldr	r3, [pc, #164]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ac8:	f44f 7240 	mov.w	r2, #768	; 0x300
   80acc:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80ace:	4b27      	ldr	r3, [pc, #156]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ad0:	f44f 7240 	mov.w	r2, #768	; 0x300
   80ad4:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   80ad6:	4b25      	ldr	r3, [pc, #148]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ad8:	4a2a      	ldr	r2, [pc, #168]	; (80b84 <CPU3_D_INIT_PIO+0x110>)
   80ada:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80adc:	4b23      	ldr	r3, [pc, #140]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ade:	4a2a      	ldr	r2, [pc, #168]	; (80b88 <CPU3_D_INIT_PIO+0x114>)
   80ae0:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   80ae2:	4b22      	ldr	r3, [pc, #136]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80ae4:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   80ae8:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   80aea:	4b20      	ldr	r3, [pc, #128]	; (80b6c <CPU3_D_INIT_PIO+0xf8>)
   80aec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80af0:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   80af2:	4b20      	ldr	r3, [pc, #128]	; (80b74 <CPU3_D_INIT_PIO+0x100>)
   80af4:	4a25      	ldr	r2, [pc, #148]	; (80b8c <CPU3_D_INIT_PIO+0x118>)
   80af6:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   80af8:	4b1e      	ldr	r3, [pc, #120]	; (80b74 <CPU3_D_INIT_PIO+0x100>)
   80afa:	4a24      	ldr	r2, [pc, #144]	; (80b8c <CPU3_D_INIT_PIO+0x118>)
   80afc:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80afe:	4b1d      	ldr	r3, [pc, #116]	; (80b74 <CPU3_D_INIT_PIO+0x100>)
   80b00:	4a23      	ldr	r2, [pc, #140]	; (80b90 <CPU3_D_INIT_PIO+0x11c>)
   80b02:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   80b04:	4b1b      	ldr	r3, [pc, #108]	; (80b74 <CPU3_D_INIT_PIO+0x100>)
   80b06:	4a23      	ldr	r2, [pc, #140]	; (80b94 <CPU3_D_INIT_PIO+0x120>)
   80b08:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   80b0a:	4b1a      	ldr	r3, [pc, #104]	; (80b74 <CPU3_D_INIT_PIO+0x100>)
   80b0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80b10:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   80b12:	4b19      	ldr	r3, [pc, #100]	; (80b78 <CPU3_D_INIT_PIO+0x104>)
   80b14:	4a20      	ldr	r2, [pc, #128]	; (80b98 <CPU3_D_INIT_PIO+0x124>)
   80b16:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   80b18:	4b17      	ldr	r3, [pc, #92]	; (80b78 <CPU3_D_INIT_PIO+0x104>)
   80b1a:	4a20      	ldr	r2, [pc, #128]	; (80b9c <CPU3_D_INIT_PIO+0x128>)
   80b1c:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   80b1e:	4b16      	ldr	r3, [pc, #88]	; (80b78 <CPU3_D_INIT_PIO+0x104>)
   80b20:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   80b24:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   80b26:	4b14      	ldr	r3, [pc, #80]	; (80b78 <CPU3_D_INIT_PIO+0x104>)
   80b28:	4a1d      	ldr	r2, [pc, #116]	; (80ba0 <CPU3_D_INIT_PIO+0x12c>)
   80b2a:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   80b2c:	4b12      	ldr	r3, [pc, #72]	; (80b78 <CPU3_D_INIT_PIO+0x104>)
   80b2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80b32:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   80b34:	4b11      	ldr	r3, [pc, #68]	; (80b7c <CPU3_D_INIT_PIO+0x108>)
   80b36:	f641 6210 	movw	r2, #7696	; 0x1e10
   80b3a:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   80b3c:	4b0f      	ldr	r3, [pc, #60]	; (80b7c <CPU3_D_INIT_PIO+0x108>)
   80b3e:	226f      	movs	r2, #111	; 0x6f
   80b40:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   80b42:	4b0e      	ldr	r3, [pc, #56]	; (80b7c <CPU3_D_INIT_PIO+0x108>)
   80b44:	220f      	movs	r2, #15
   80b46:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   80b48:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b4c:	2001      	movs	r0, #1
   80b4e:	4b15      	ldr	r3, [pc, #84]	; (80ba4 <CPU3_D_INIT_PIO+0x130>)
   80b50:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   80b52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b56:	2000      	movs	r0, #0
   80b58:	4b12      	ldr	r3, [pc, #72]	; (80ba4 <CPU3_D_INIT_PIO+0x130>)
   80b5a:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   80b5c:	4912      	ldr	r1, [pc, #72]	; (80ba8 <CPU3_D_INIT_PIO+0x134>)
   80b5e:	2003      	movs	r0, #3
   80b60:	4b10      	ldr	r3, [pc, #64]	; (80ba4 <CPU3_D_INIT_PIO+0x130>)
   80b62:	4798      	blx	r3





}
   80b64:	bf00      	nop
   80b66:	bd80      	pop	{r7, pc}
   80b68:	00083631 	.word	0x00083631
   80b6c:	400e0e00 	.word	0x400e0e00
   80b70:	50494f00 	.word	0x50494f00
   80b74:	400e1000 	.word	0x400e1000
   80b78:	400e1200 	.word	0x400e1200
   80b7c:	400e1400 	.word	0x400e1400
   80b80:	1f870343 	.word	0x1f870343
   80b84:	0018c004 	.word	0x0018c004
   80b88:	00180004 	.word	0x00180004
   80b8c:	08204000 	.word	0x08204000
   80b90:	f01800ff 	.word	0xf01800ff
   80b94:	06204000 	.word	0x06204000
   80b98:	0d8ff1fe 	.word	0x0d8ff1fe
   80b9c:	008ff1fe 	.word	0x008ff1fe
   80ba0:	060ff1fe 	.word	0x060ff1fe
   80ba4:	000830a1 	.word	0x000830a1
   80ba8:	30000001 	.word	0x30000001

00080bac <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80bac:	b480      	push	{r7}
   80bae:	b083      	sub	sp, #12
   80bb0:	af00      	add	r7, sp, #0
   80bb2:	4603      	mov	r3, r0
   80bb4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80bb6:	4909      	ldr	r1, [pc, #36]	; (80bdc <NVIC_ClearPendingIRQ+0x30>)
   80bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80bbc:	095b      	lsrs	r3, r3, #5
   80bbe:	79fa      	ldrb	r2, [r7, #7]
   80bc0:	f002 021f 	and.w	r2, r2, #31
   80bc4:	2001      	movs	r0, #1
   80bc6:	fa00 f202 	lsl.w	r2, r0, r2
   80bca:	3360      	adds	r3, #96	; 0x60
   80bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80bd0:	bf00      	nop
   80bd2:	370c      	adds	r7, #12
   80bd4:	46bd      	mov	sp, r7
   80bd6:	bc80      	pop	{r7}
   80bd8:	4770      	bx	lr
   80bda:	bf00      	nop
   80bdc:	e000e100 	.word	0xe000e100

00080be0 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80be0:	b580      	push	{r7, lr}
   80be2:	af00      	add	r7, sp, #0
	TC1->TC_CHANNEL[0].TC_IDR = TC_IER_CPCS;
   80be4:	4b50      	ldr	r3, [pc, #320]	; (80d28 <TC0_Handler+0x148>)
   80be6:	2210      	movs	r2, #16
   80be8:	629a      	str	r2, [r3, #40]	; 0x28
	
	PIOD->PIO_WPMR	= 0x50494F00;
   80bea:	4b50      	ldr	r3, [pc, #320]	; (80d2c <TC0_Handler+0x14c>)
   80bec:	4a50      	ldr	r2, [pc, #320]	; (80d30 <TC0_Handler+0x150>)
   80bee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80bf2:	4b50      	ldr	r3, [pc, #320]	; (80d34 <TC0_Handler+0x154>)
   80bf4:	4a4e      	ldr	r2, [pc, #312]	; (80d30 <TC0_Handler+0x150>)
   80bf6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80bfa:	4b4c      	ldr	r3, [pc, #304]	; (80d2c <TC0_Handler+0x14c>)
   80bfc:	2203      	movs	r2, #3
   80bfe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80c02:	4b4a      	ldr	r3, [pc, #296]	; (80d2c <TC0_Handler+0x14c>)
   80c04:	220c      	movs	r2, #12
   80c06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80c0a:	4b4a      	ldr	r3, [pc, #296]	; (80d34 <TC0_Handler+0x154>)
   80c0c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80c10:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80c14:	4b47      	ldr	r3, [pc, #284]	; (80d34 <TC0_Handler+0x154>)
   80c16:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80c1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80c1e:	4b46      	ldr	r3, [pc, #280]	; (80d38 <TC0_Handler+0x158>)
   80c20:	681b      	ldr	r3, [r3, #0]
   80c22:	3301      	adds	r3, #1
   80c24:	4a44      	ldr	r2, [pc, #272]	; (80d38 <TC0_Handler+0x158>)
   80c26:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80c28:	4b44      	ldr	r3, [pc, #272]	; (80d3c <TC0_Handler+0x15c>)
   80c2a:	681b      	ldr	r3, [r3, #0]
   80c2c:	3301      	adds	r3, #1
   80c2e:	4a43      	ldr	r2, [pc, #268]	; (80d3c <TC0_Handler+0x15c>)
   80c30:	6013      	str	r3, [r2, #0]
	Cnt_TC0_total++;
   80c32:	4b43      	ldr	r3, [pc, #268]	; (80d40 <TC0_Handler+0x160>)
   80c34:	681b      	ldr	r3, [r3, #0]
   80c36:	3301      	adds	r3, #1
   80c38:	4a41      	ldr	r2, [pc, #260]	; (80d40 <TC0_Handler+0x160>)
   80c3a:	6013      	str	r3, [r2, #0]
	
	
	if(count<64)
   80c3c:	4b3e      	ldr	r3, [pc, #248]	; (80d38 <TC0_Handler+0x158>)
   80c3e:	681b      	ldr	r3, [r3, #0]
   80c40:	2b3f      	cmp	r3, #63	; 0x3f
   80c42:	d80e      	bhi.n	80c62 <TC0_Handler+0x82>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80c44:	4a39      	ldr	r2, [pc, #228]	; (80d2c <TC0_Handler+0x14c>)
   80c46:	4b3c      	ldr	r3, [pc, #240]	; (80d38 <TC0_Handler+0x158>)
   80c48:	681b      	ldr	r3, [r3, #0]
   80c4a:	493e      	ldr	r1, [pc, #248]	; (80d44 <TC0_Handler+0x164>)
   80c4c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80c50:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80c52:	4a38      	ldr	r2, [pc, #224]	; (80d34 <TC0_Handler+0x154>)
   80c54:	4b38      	ldr	r3, [pc, #224]	; (80d38 <TC0_Handler+0x158>)
   80c56:	681b      	ldr	r3, [r3, #0]
   80c58:	493a      	ldr	r1, [pc, #232]	; (80d44 <TC0_Handler+0x164>)
   80c5a:	00db      	lsls	r3, r3, #3
   80c5c:	440b      	add	r3, r1
   80c5e:	685b      	ldr	r3, [r3, #4]
   80c60:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80c62:	4b35      	ldr	r3, [pc, #212]	; (80d38 <TC0_Handler+0x158>)
   80c64:	681b      	ldr	r3, [r3, #0]
   80c66:	2b3f      	cmp	r3, #63	; 0x3f
   80c68:	d911      	bls.n	80c8e <TC0_Handler+0xae>
	{
		count = 0;
   80c6a:	4b33      	ldr	r3, [pc, #204]	; (80d38 <TC0_Handler+0x158>)
   80c6c:	2200      	movs	r2, #0
   80c6e:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80c70:	4a2e      	ldr	r2, [pc, #184]	; (80d2c <TC0_Handler+0x14c>)
   80c72:	4b31      	ldr	r3, [pc, #196]	; (80d38 <TC0_Handler+0x158>)
   80c74:	681b      	ldr	r3, [r3, #0]
   80c76:	4933      	ldr	r1, [pc, #204]	; (80d44 <TC0_Handler+0x164>)
   80c78:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80c7c:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80c7e:	4a2d      	ldr	r2, [pc, #180]	; (80d34 <TC0_Handler+0x154>)
   80c80:	4b2d      	ldr	r3, [pc, #180]	; (80d38 <TC0_Handler+0x158>)
   80c82:	681b      	ldr	r3, [r3, #0]
   80c84:	492f      	ldr	r1, [pc, #188]	; (80d44 <TC0_Handler+0x164>)
   80c86:	00db      	lsls	r3, r3, #3
   80c88:	440b      	add	r3, r1
   80c8a:	685b      	ldr	r3, [r3, #4]
   80c8c:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	
		PIOD->PIO_WPMR	= 0x50494F00;
   80c8e:	4b27      	ldr	r3, [pc, #156]	; (80d2c <TC0_Handler+0x14c>)
   80c90:	4a27      	ldr	r2, [pc, #156]	; (80d30 <TC0_Handler+0x150>)
   80c92:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   80c96:	4b27      	ldr	r3, [pc, #156]	; (80d34 <TC0_Handler+0x154>)
   80c98:	4a25      	ldr	r2, [pc, #148]	; (80d30 <TC0_Handler+0x150>)
   80c9a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   80c9e:	4b23      	ldr	r3, [pc, #140]	; (80d2c <TC0_Handler+0x14c>)
   80ca0:	220c      	movs	r2, #12
   80ca2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR  = 0x00000003;
   80ca6:	4b21      	ldr	r3, [pc, #132]	; (80d2c <TC0_Handler+0x14c>)
   80ca8:	2203      	movs	r2, #3
   80caa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   80cae:	4b21      	ldr	r3, [pc, #132]	; (80d34 <TC0_Handler+0x154>)
   80cb0:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80cb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   80cb8:	4b1e      	ldr	r3, [pc, #120]	; (80d34 <TC0_Handler+0x154>)
   80cba:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80cbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

		if(count<64)
   80cc2:	4b1d      	ldr	r3, [pc, #116]	; (80d38 <TC0_Handler+0x158>)
   80cc4:	681b      	ldr	r3, [r3, #0]
   80cc6:	2b3f      	cmp	r3, #63	; 0x3f
   80cc8:	d80e      	bhi.n	80ce8 <TC0_Handler+0x108>
		{
			PIOD->PIO_ODSR = array_bicar[count].dir;
   80cca:	4a18      	ldr	r2, [pc, #96]	; (80d2c <TC0_Handler+0x14c>)
   80ccc:	4b1a      	ldr	r3, [pc, #104]	; (80d38 <TC0_Handler+0x158>)
   80cce:	681b      	ldr	r3, [r3, #0]
   80cd0:	491d      	ldr	r1, [pc, #116]	; (80d48 <TC0_Handler+0x168>)
   80cd2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80cd6:	6393      	str	r3, [r2, #56]	; 0x38
			PIOC->PIO_ODSR = array_bicar[count].AB;
   80cd8:	4a16      	ldr	r2, [pc, #88]	; (80d34 <TC0_Handler+0x154>)
   80cda:	4b17      	ldr	r3, [pc, #92]	; (80d38 <TC0_Handler+0x158>)
   80cdc:	681b      	ldr	r3, [r3, #0]
   80cde:	491a      	ldr	r1, [pc, #104]	; (80d48 <TC0_Handler+0x168>)
   80ce0:	00db      	lsls	r3, r3, #3
   80ce2:	440b      	add	r3, r1
   80ce4:	685b      	ldr	r3, [r3, #4]
   80ce6:	6393      	str	r3, [r2, #56]	; 0x38
		}
		if (count >=64)
   80ce8:	4b13      	ldr	r3, [pc, #76]	; (80d38 <TC0_Handler+0x158>)
   80cea:	681b      	ldr	r3, [r3, #0]
   80cec:	2b3f      	cmp	r3, #63	; 0x3f
   80cee:	d911      	bls.n	80d14 <TC0_Handler+0x134>
		{
			count = 0;
   80cf0:	4b11      	ldr	r3, [pc, #68]	; (80d38 <TC0_Handler+0x158>)
   80cf2:	2200      	movs	r2, #0
   80cf4:	601a      	str	r2, [r3, #0]
			PIOD->PIO_ODSR = array_bicar[count].dir;
   80cf6:	4a0d      	ldr	r2, [pc, #52]	; (80d2c <TC0_Handler+0x14c>)
   80cf8:	4b0f      	ldr	r3, [pc, #60]	; (80d38 <TC0_Handler+0x158>)
   80cfa:	681b      	ldr	r3, [r3, #0]
   80cfc:	4912      	ldr	r1, [pc, #72]	; (80d48 <TC0_Handler+0x168>)
   80cfe:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80d02:	6393      	str	r3, [r2, #56]	; 0x38
			PIOC->PIO_ODSR = array_bicar[count].AB;
   80d04:	4a0b      	ldr	r2, [pc, #44]	; (80d34 <TC0_Handler+0x154>)
   80d06:	4b0c      	ldr	r3, [pc, #48]	; (80d38 <TC0_Handler+0x158>)
   80d08:	681b      	ldr	r3, [r3, #0]
   80d0a:	490f      	ldr	r1, [pc, #60]	; (80d48 <TC0_Handler+0x168>)
   80d0c:	00db      	lsls	r3, r3, #3
   80d0e:	440b      	add	r3, r1
   80d10:	685b      	ldr	r3, [r3, #4]
   80d12:	6393      	str	r3, [r2, #56]	; 0x38
		}
	
	
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80d14:	2100      	movs	r1, #0
   80d16:	480d      	ldr	r0, [pc, #52]	; (80d4c <TC0_Handler+0x16c>)
   80d18:	4b0d      	ldr	r3, [pc, #52]	; (80d50 <TC0_Handler+0x170>)
   80d1a:	4798      	blx	r3
	{
		;
	}
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80d1c:	4b02      	ldr	r3, [pc, #8]	; (80d28 <TC0_Handler+0x148>)
   80d1e:	2210      	movs	r2, #16
   80d20:	625a      	str	r2, [r3, #36]	; 0x24
}
   80d22:	bf00      	nop
   80d24:	bd80      	pop	{r7, pc}
   80d26:	bf00      	nop
   80d28:	40084000 	.word	0x40084000
   80d2c:	400e1400 	.word	0x400e1400
   80d30:	50494f00 	.word	0x50494f00
   80d34:	400e1200 	.word	0x400e1200
   80d38:	20070cd4 	.word	0x20070cd4
   80d3c:	20070ca8 	.word	0x20070ca8
   80d40:	20070cb0 	.word	0x20070cb0
   80d44:	20070000 	.word	0x20070000
   80d48:	20070200 	.word	0x20070200
   80d4c:	40080000 	.word	0x40080000
   80d50:	00081791 	.word	0x00081791

00080d54 <TC1_Handler>:
// 	}
// 	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
// }

void TC1_Handler()
{	
   80d54:	b580      	push	{r7, lr}
   80d56:	af00      	add	r7, sp, #0
	TC1->TC_CHANNEL[0].TC_IDR = TC_IER_CPCS;
   80d58:	4b2e      	ldr	r3, [pc, #184]	; (80e14 <TC1_Handler+0xc0>)
   80d5a:	2210      	movs	r2, #16
   80d5c:	629a      	str	r2, [r3, #40]	; 0x28
	PIOD->PIO_WPMR	= 0x50494F00;
   80d5e:	4b2e      	ldr	r3, [pc, #184]	; (80e18 <TC1_Handler+0xc4>)
   80d60:	4a2e      	ldr	r2, [pc, #184]	; (80e1c <TC1_Handler+0xc8>)
   80d62:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80d66:	4b2e      	ldr	r3, [pc, #184]	; (80e20 <TC1_Handler+0xcc>)
   80d68:	4a2c      	ldr	r2, [pc, #176]	; (80e1c <TC1_Handler+0xc8>)
   80d6a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80d6e:	4b2a      	ldr	r3, [pc, #168]	; (80e18 <TC1_Handler+0xc4>)
   80d70:	220c      	movs	r2, #12
   80d72:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80d76:	4b28      	ldr	r3, [pc, #160]	; (80e18 <TC1_Handler+0xc4>)
   80d78:	2203      	movs	r2, #3
   80d7a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80d7e:	4b28      	ldr	r3, [pc, #160]	; (80e20 <TC1_Handler+0xcc>)
   80d80:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80d84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80d88:	4b25      	ldr	r3, [pc, #148]	; (80e20 <TC1_Handler+0xcc>)
   80d8a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80d8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80d92:	4b24      	ldr	r3, [pc, #144]	; (80e24 <TC1_Handler+0xd0>)
   80d94:	681b      	ldr	r3, [r3, #0]
   80d96:	3301      	adds	r3, #1
   80d98:	4a22      	ldr	r2, [pc, #136]	; (80e24 <TC1_Handler+0xd0>)
   80d9a:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80d9c:	4b22      	ldr	r3, [pc, #136]	; (80e28 <TC1_Handler+0xd4>)
   80d9e:	681b      	ldr	r3, [r3, #0]
   80da0:	3301      	adds	r3, #1
   80da2:	4a21      	ldr	r2, [pc, #132]	; (80e28 <TC1_Handler+0xd4>)
   80da4:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80da6:	4b21      	ldr	r3, [pc, #132]	; (80e2c <TC1_Handler+0xd8>)
   80da8:	681b      	ldr	r3, [r3, #0]
   80daa:	3301      	adds	r3, #1
   80dac:	4a1f      	ldr	r2, [pc, #124]	; (80e2c <TC1_Handler+0xd8>)
   80dae:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80db0:	4b1c      	ldr	r3, [pc, #112]	; (80e24 <TC1_Handler+0xd0>)
   80db2:	681b      	ldr	r3, [r3, #0]
   80db4:	2b3f      	cmp	r3, #63	; 0x3f
   80db6:	d80e      	bhi.n	80dd6 <TC1_Handler+0x82>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80db8:	4a17      	ldr	r2, [pc, #92]	; (80e18 <TC1_Handler+0xc4>)
   80dba:	4b1a      	ldr	r3, [pc, #104]	; (80e24 <TC1_Handler+0xd0>)
   80dbc:	681b      	ldr	r3, [r3, #0]
   80dbe:	491c      	ldr	r1, [pc, #112]	; (80e30 <TC1_Handler+0xdc>)
   80dc0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80dc4:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80dc6:	4a16      	ldr	r2, [pc, #88]	; (80e20 <TC1_Handler+0xcc>)
   80dc8:	4b16      	ldr	r3, [pc, #88]	; (80e24 <TC1_Handler+0xd0>)
   80dca:	681b      	ldr	r3, [r3, #0]
   80dcc:	4918      	ldr	r1, [pc, #96]	; (80e30 <TC1_Handler+0xdc>)
   80dce:	00db      	lsls	r3, r3, #3
   80dd0:	440b      	add	r3, r1
   80dd2:	685b      	ldr	r3, [r3, #4]
   80dd4:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80dd6:	4b13      	ldr	r3, [pc, #76]	; (80e24 <TC1_Handler+0xd0>)
   80dd8:	681b      	ldr	r3, [r3, #0]
   80dda:	2b3f      	cmp	r3, #63	; 0x3f
   80ddc:	d911      	bls.n	80e02 <TC1_Handler+0xae>
	{
		count1 = 0;
   80dde:	4b11      	ldr	r3, [pc, #68]	; (80e24 <TC1_Handler+0xd0>)
   80de0:	2200      	movs	r2, #0
   80de2:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80de4:	4a0c      	ldr	r2, [pc, #48]	; (80e18 <TC1_Handler+0xc4>)
   80de6:	4b0f      	ldr	r3, [pc, #60]	; (80e24 <TC1_Handler+0xd0>)
   80de8:	681b      	ldr	r3, [r3, #0]
   80dea:	4911      	ldr	r1, [pc, #68]	; (80e30 <TC1_Handler+0xdc>)
   80dec:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80df0:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80df2:	4a0b      	ldr	r2, [pc, #44]	; (80e20 <TC1_Handler+0xcc>)
   80df4:	4b0b      	ldr	r3, [pc, #44]	; (80e24 <TC1_Handler+0xd0>)
   80df6:	681b      	ldr	r3, [r3, #0]
   80df8:	490d      	ldr	r1, [pc, #52]	; (80e30 <TC1_Handler+0xdc>)
   80dfa:	00db      	lsls	r3, r3, #3
   80dfc:	440b      	add	r3, r1
   80dfe:	685b      	ldr	r3, [r3, #4]
   80e00:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80e02:	2101      	movs	r1, #1
   80e04:	480b      	ldr	r0, [pc, #44]	; (80e34 <TC1_Handler+0xe0>)
   80e06:	4b0c      	ldr	r3, [pc, #48]	; (80e38 <TC1_Handler+0xe4>)
   80e08:	4798      	blx	r3
	{
		
		
	}
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80e0a:	4b02      	ldr	r3, [pc, #8]	; (80e14 <TC1_Handler+0xc0>)
   80e0c:	2210      	movs	r2, #16
   80e0e:	625a      	str	r2, [r3, #36]	; 0x24
}
   80e10:	bf00      	nop
   80e12:	bd80      	pop	{r7, pc}
   80e14:	40084000 	.word	0x40084000
   80e18:	400e1400 	.word	0x400e1400
   80e1c:	50494f00 	.word	0x50494f00
   80e20:	400e1200 	.word	0x400e1200
   80e24:	20070cd8 	.word	0x20070cd8
   80e28:	20070cac 	.word	0x20070cac
   80e2c:	20070cb4 	.word	0x20070cb4
   80e30:	20070200 	.word	0x20070200
   80e34:	40080000 	.word	0x40080000
   80e38:	00081791 	.word	0x00081791

00080e3c <TC2_Handler>:
void TC2_Handler()
{
   80e3c:	b580      	push	{r7, lr}
   80e3e:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80e40:	2100      	movs	r1, #0
   80e42:	4806      	ldr	r0, [pc, #24]	; (80e5c <TC2_Handler+0x20>)
   80e44:	4b06      	ldr	r3, [pc, #24]	; (80e60 <TC2_Handler+0x24>)
   80e46:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80e48:	4b06      	ldr	r3, [pc, #24]	; (80e64 <TC2_Handler+0x28>)
   80e4a:	2200      	movs	r2, #0
   80e4c:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80e4e:	2102      	movs	r1, #2
   80e50:	4802      	ldr	r0, [pc, #8]	; (80e5c <TC2_Handler+0x20>)
   80e52:	4b05      	ldr	r3, [pc, #20]	; (80e68 <TC2_Handler+0x2c>)
   80e54:	4798      	blx	r3
	{
		
	}
}
   80e56:	bf00      	nop
   80e58:	bd80      	pop	{r7, pc}
   80e5a:	bf00      	nop
   80e5c:	40080000 	.word	0x40080000
   80e60:	00081725 	.word	0x00081725
   80e64:	20070ca4 	.word	0x20070ca4
   80e68:	00081791 	.word	0x00081791

00080e6c <TC3_Handler>:
void TC3_Handler()
{
   80e6c:	b580      	push	{r7, lr}
   80e6e:	af00      	add	r7, sp, #0
	OneSecFlag = 1;
   80e70:	4b06      	ldr	r3, [pc, #24]	; (80e8c <TC3_Handler+0x20>)
   80e72:	2201      	movs	r2, #1
   80e74:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80e76:	2100      	movs	r1, #0
   80e78:	4805      	ldr	r0, [pc, #20]	; (80e90 <TC3_Handler+0x24>)
   80e7a:	4b06      	ldr	r3, [pc, #24]	; (80e94 <TC3_Handler+0x28>)
   80e7c:	4798      	blx	r3
	{
		
	}
	tc_stop(TC1,0);
   80e7e:	2100      	movs	r1, #0
   80e80:	4803      	ldr	r0, [pc, #12]	; (80e90 <TC3_Handler+0x24>)
   80e82:	4b05      	ldr	r3, [pc, #20]	; (80e98 <TC3_Handler+0x2c>)
   80e84:	4798      	blx	r3
}
   80e86:	bf00      	nop
   80e88:	bd80      	pop	{r7, pc}
   80e8a:	bf00      	nop
   80e8c:	20070cb8 	.word	0x20070cb8
   80e90:	40084000 	.word	0x40084000
   80e94:	00081791 	.word	0x00081791
   80e98:	00081725 	.word	0x00081725

00080e9c <TC7_Handler>:

void TC7_Handler(){
   80e9c:	b580      	push	{r7, lr}
   80e9e:	af00      	add	r7, sp, #0
	
	OneSecFlag = 1;
   80ea0:	4b06      	ldr	r3, [pc, #24]	; (80ebc <TC7_Handler+0x20>)
   80ea2:	2201      	movs	r2, #1
   80ea4:	701a      	strb	r2, [r3, #0]
	
	if ((tc_get_status(TC2, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80ea6:	2101      	movs	r1, #1
   80ea8:	4805      	ldr	r0, [pc, #20]	; (80ec0 <TC7_Handler+0x24>)
   80eaa:	4b06      	ldr	r3, [pc, #24]	; (80ec4 <TC7_Handler+0x28>)
   80eac:	4798      	blx	r3
	{
		
	}
	tc_stop(TC2,1);
   80eae:	2101      	movs	r1, #1
   80eb0:	4803      	ldr	r0, [pc, #12]	; (80ec0 <TC7_Handler+0x24>)
   80eb2:	4b05      	ldr	r3, [pc, #20]	; (80ec8 <TC7_Handler+0x2c>)
   80eb4:	4798      	blx	r3
	
}
   80eb6:	bf00      	nop
   80eb8:	bd80      	pop	{r7, pc}
   80eba:	bf00      	nop
   80ebc:	20070cb8 	.word	0x20070cb8
   80ec0:	40088000 	.word	0x40088000
   80ec4:	00081791 	.word	0x00081791
   80ec8:	00081725 	.word	0x00081725

00080ecc <TC6_Handler>:

void TC6_Handler()
{
   80ecc:	b580      	push	{r7, lr}
   80ece:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80ed0:	2021      	movs	r0, #33	; 0x21
   80ed2:	4b29      	ldr	r3, [pc, #164]	; (80f78 <TC6_Handler+0xac>)
   80ed4:	4798      	blx	r3
	tick++;
   80ed6:	4b29      	ldr	r3, [pc, #164]	; (80f7c <TC6_Handler+0xb0>)
   80ed8:	681b      	ldr	r3, [r3, #0]
   80eda:	3301      	adds	r3, #1
   80edc:	4a27      	ldr	r2, [pc, #156]	; (80f7c <TC6_Handler+0xb0>)
   80ede:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80ee0:	4b26      	ldr	r3, [pc, #152]	; (80f7c <TC6_Handler+0xb0>)
   80ee2:	681b      	ldr	r3, [r3, #0]
   80ee4:	2b0a      	cmp	r3, #10
   80ee6:	d10a      	bne.n	80efe <TC6_Handler+0x32>
	{
		tick_10++;
   80ee8:	4b25      	ldr	r3, [pc, #148]	; (80f80 <TC6_Handler+0xb4>)
   80eea:	681b      	ldr	r3, [r3, #0]
   80eec:	3301      	adds	r3, #1
   80eee:	4a24      	ldr	r2, [pc, #144]	; (80f80 <TC6_Handler+0xb4>)
   80ef0:	6013      	str	r3, [r2, #0]
		tick = 0;
   80ef2:	4b22      	ldr	r3, [pc, #136]	; (80f7c <TC6_Handler+0xb0>)
   80ef4:	2200      	movs	r2, #0
   80ef6:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80ef8:	4b22      	ldr	r3, [pc, #136]	; (80f84 <TC6_Handler+0xb8>)
   80efa:	2200      	movs	r2, #0
   80efc:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80efe:	4b20      	ldr	r3, [pc, #128]	; (80f80 <TC6_Handler+0xb4>)
   80f00:	681b      	ldr	r3, [r3, #0]
   80f02:	2b05      	cmp	r3, #5
   80f04:	d10a      	bne.n	80f1c <TC6_Handler+0x50>
	{
		tick_50++;
   80f06:	4b20      	ldr	r3, [pc, #128]	; (80f88 <TC6_Handler+0xbc>)
   80f08:	681b      	ldr	r3, [r3, #0]
   80f0a:	3301      	adds	r3, #1
   80f0c:	4a1e      	ldr	r2, [pc, #120]	; (80f88 <TC6_Handler+0xbc>)
   80f0e:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80f10:	4b1b      	ldr	r3, [pc, #108]	; (80f80 <TC6_Handler+0xb4>)
   80f12:	2200      	movs	r2, #0
   80f14:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80f16:	4b1b      	ldr	r3, [pc, #108]	; (80f84 <TC6_Handler+0xb8>)
   80f18:	2201      	movs	r2, #1
   80f1a:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80f1c:	4b1a      	ldr	r3, [pc, #104]	; (80f88 <TC6_Handler+0xbc>)
   80f1e:	681b      	ldr	r3, [r3, #0]
   80f20:	2b02      	cmp	r3, #2
   80f22:	d10a      	bne.n	80f3a <TC6_Handler+0x6e>
	{
		tick_100++;
   80f24:	4b19      	ldr	r3, [pc, #100]	; (80f8c <TC6_Handler+0xc0>)
   80f26:	681b      	ldr	r3, [r3, #0]
   80f28:	3301      	adds	r3, #1
   80f2a:	4a18      	ldr	r2, [pc, #96]	; (80f8c <TC6_Handler+0xc0>)
   80f2c:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80f2e:	4b16      	ldr	r3, [pc, #88]	; (80f88 <TC6_Handler+0xbc>)
   80f30:	2200      	movs	r2, #0
   80f32:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80f34:	4b13      	ldr	r3, [pc, #76]	; (80f84 <TC6_Handler+0xb8>)
   80f36:	2202      	movs	r2, #2
   80f38:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80f3a:	4b14      	ldr	r3, [pc, #80]	; (80f8c <TC6_Handler+0xc0>)
   80f3c:	681b      	ldr	r3, [r3, #0]
   80f3e:	2b05      	cmp	r3, #5
   80f40:	d10a      	bne.n	80f58 <TC6_Handler+0x8c>
	{
		tick_500++;
   80f42:	4b13      	ldr	r3, [pc, #76]	; (80f90 <TC6_Handler+0xc4>)
   80f44:	681b      	ldr	r3, [r3, #0]
   80f46:	3301      	adds	r3, #1
   80f48:	4a11      	ldr	r2, [pc, #68]	; (80f90 <TC6_Handler+0xc4>)
   80f4a:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80f4c:	4b0f      	ldr	r3, [pc, #60]	; (80f8c <TC6_Handler+0xc0>)
   80f4e:	2200      	movs	r2, #0
   80f50:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80f52:	4b0c      	ldr	r3, [pc, #48]	; (80f84 <TC6_Handler+0xb8>)
   80f54:	2203      	movs	r2, #3
   80f56:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80f58:	4b0d      	ldr	r3, [pc, #52]	; (80f90 <TC6_Handler+0xc4>)
   80f5a:	681b      	ldr	r3, [r3, #0]
   80f5c:	2b02      	cmp	r3, #2
   80f5e:	d105      	bne.n	80f6c <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80f60:	4b0b      	ldr	r3, [pc, #44]	; (80f90 <TC6_Handler+0xc4>)
   80f62:	2200      	movs	r2, #0
   80f64:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80f66:	4b07      	ldr	r3, [pc, #28]	; (80f84 <TC6_Handler+0xb8>)
   80f68:	2204      	movs	r2, #4
   80f6a:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80f6c:	2100      	movs	r1, #0
   80f6e:	4809      	ldr	r0, [pc, #36]	; (80f94 <TC6_Handler+0xc8>)
   80f70:	4b09      	ldr	r3, [pc, #36]	; (80f98 <TC6_Handler+0xcc>)
   80f72:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80f74:	bf00      	nop
   80f76:	bd80      	pop	{r7, pc}
   80f78:	00080bad 	.word	0x00080bad
   80f7c:	20070cbc 	.word	0x20070cbc
   80f80:	20070cc0 	.word	0x20070cc0
   80f84:	200711f0 	.word	0x200711f0
   80f88:	20070cc4 	.word	0x20070cc4
   80f8c:	20070cc8 	.word	0x20070cc8
   80f90:	20070ccc 	.word	0x20070ccc
   80f94:	40088000 	.word	0x40088000
   80f98:	00081791 	.word	0x00081791

00080f9c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80f9c:	b480      	push	{r7}
   80f9e:	b083      	sub	sp, #12
   80fa0:	af00      	add	r7, sp, #0
   80fa2:	4603      	mov	r3, r0
   80fa4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80fa6:	4908      	ldr	r1, [pc, #32]	; (80fc8 <NVIC_EnableIRQ+0x2c>)
   80fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80fac:	095b      	lsrs	r3, r3, #5
   80fae:	79fa      	ldrb	r2, [r7, #7]
   80fb0:	f002 021f 	and.w	r2, r2, #31
   80fb4:	2001      	movs	r0, #1
   80fb6:	fa00 f202 	lsl.w	r2, r0, r2
   80fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80fbe:	bf00      	nop
   80fc0:	370c      	adds	r7, #12
   80fc2:	46bd      	mov	sp, r7
   80fc4:	bc80      	pop	{r7}
   80fc6:	4770      	bx	lr
   80fc8:	e000e100 	.word	0xe000e100

00080fcc <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80fcc:	b480      	push	{r7}
   80fce:	b083      	sub	sp, #12
   80fd0:	af00      	add	r7, sp, #0
   80fd2:	4603      	mov	r3, r0
   80fd4:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80fd6:	4909      	ldr	r1, [pc, #36]	; (80ffc <NVIC_DisableIRQ+0x30>)
   80fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80fdc:	095b      	lsrs	r3, r3, #5
   80fde:	79fa      	ldrb	r2, [r7, #7]
   80fe0:	f002 021f 	and.w	r2, r2, #31
   80fe4:	2001      	movs	r0, #1
   80fe6:	fa00 f202 	lsl.w	r2, r0, r2
   80fea:	3320      	adds	r3, #32
   80fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80ff0:	bf00      	nop
   80ff2:	370c      	adds	r7, #12
   80ff4:	46bd      	mov	sp, r7
   80ff6:	bc80      	pop	{r7}
   80ff8:	4770      	bx	lr
   80ffa:	bf00      	nop
   80ffc:	e000e100 	.word	0xe000e100

00081000 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81000:	b480      	push	{r7}
   81002:	b083      	sub	sp, #12
   81004:	af00      	add	r7, sp, #0
   81006:	4603      	mov	r3, r0
   81008:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8100a:	4909      	ldr	r1, [pc, #36]	; (81030 <NVIC_ClearPendingIRQ+0x30>)
   8100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81010:	095b      	lsrs	r3, r3, #5
   81012:	79fa      	ldrb	r2, [r7, #7]
   81014:	f002 021f 	and.w	r2, r2, #31
   81018:	2001      	movs	r0, #1
   8101a:	fa00 f202 	lsl.w	r2, r0, r2
   8101e:	3360      	adds	r3, #96	; 0x60
   81020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81024:	bf00      	nop
   81026:	370c      	adds	r7, #12
   81028:	46bd      	mov	sp, r7
   8102a:	bc80      	pop	{r7}
   8102c:	4770      	bx	lr
   8102e:	bf00      	nop
   81030:	e000e100 	.word	0xe000e100

00081034 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81034:	b480      	push	{r7}
   81036:	b083      	sub	sp, #12
   81038:	af00      	add	r7, sp, #0
   8103a:	4603      	mov	r3, r0
   8103c:	6039      	str	r1, [r7, #0]
   8103e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81040:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81044:	2b00      	cmp	r3, #0
   81046:	da0b      	bge.n	81060 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81048:	490d      	ldr	r1, [pc, #52]	; (81080 <NVIC_SetPriority+0x4c>)
   8104a:	79fb      	ldrb	r3, [r7, #7]
   8104c:	f003 030f 	and.w	r3, r3, #15
   81050:	3b04      	subs	r3, #4
   81052:	683a      	ldr	r2, [r7, #0]
   81054:	b2d2      	uxtb	r2, r2
   81056:	0112      	lsls	r2, r2, #4
   81058:	b2d2      	uxtb	r2, r2
   8105a:	440b      	add	r3, r1
   8105c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8105e:	e009      	b.n	81074 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81060:	4908      	ldr	r1, [pc, #32]	; (81084 <NVIC_SetPriority+0x50>)
   81062:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81066:	683a      	ldr	r2, [r7, #0]
   81068:	b2d2      	uxtb	r2, r2
   8106a:	0112      	lsls	r2, r2, #4
   8106c:	b2d2      	uxtb	r2, r2
   8106e:	440b      	add	r3, r1
   81070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81074:	bf00      	nop
   81076:	370c      	adds	r7, #12
   81078:	46bd      	mov	sp, r7
   8107a:	bc80      	pop	{r7}
   8107c:	4770      	bx	lr
   8107e:	bf00      	nop
   81080:	e000ed00 	.word	0xe000ed00
   81084:	e000e100 	.word	0xe000e100

00081088 <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   81088:	b580      	push	{r7, lr}
   8108a:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   8108c:	2016      	movs	r0, #22
   8108e:	4b31      	ldr	r3, [pc, #196]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   81090:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   81092:	2016      	movs	r0, #22
   81094:	4b30      	ldr	r3, [pc, #192]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   81096:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   81098:	2100      	movs	r1, #0
   8109a:	2016      	movs	r0, #22
   8109c:	4b2f      	ldr	r3, [pc, #188]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   8109e:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   810a0:	2016      	movs	r0, #22
   810a2:	4b2f      	ldr	r3, [pc, #188]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   810a4:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   810a6:	2008      	movs	r0, #8
   810a8:	4b2a      	ldr	r3, [pc, #168]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   810aa:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   810ac:	2008      	movs	r0, #8
   810ae:	4b2a      	ldr	r3, [pc, #168]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   810b0:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   810b2:	2100      	movs	r1, #0
   810b4:	2008      	movs	r0, #8
   810b6:	4b29      	ldr	r3, [pc, #164]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   810b8:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   810ba:	2008      	movs	r0, #8
   810bc:	4b28      	ldr	r3, [pc, #160]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   810be:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   810c0:	2101      	movs	r1, #1
   810c2:	4828      	ldr	r0, [pc, #160]	; (81164 <CPU3_D_INIT_INT+0xdc>)
   810c4:	4b28      	ldr	r3, [pc, #160]	; (81168 <CPU3_D_INIT_INT+0xe0>)
   810c6:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   810c8:	201b      	movs	r0, #27
   810ca:	4b22      	ldr	r3, [pc, #136]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   810cc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   810ce:	201b      	movs	r0, #27
   810d0:	4b21      	ldr	r3, [pc, #132]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   810d2:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   810d4:	2100      	movs	r1, #0
   810d6:	201b      	movs	r0, #27
   810d8:	4b20      	ldr	r3, [pc, #128]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   810da:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   810dc:	201b      	movs	r0, #27
   810de:	4b20      	ldr	r3, [pc, #128]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   810e0:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   810e2:	201c      	movs	r0, #28
   810e4:	4b1b      	ldr	r3, [pc, #108]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   810e6:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   810e8:	201c      	movs	r0, #28
   810ea:	4b1b      	ldr	r3, [pc, #108]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   810ec:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   810ee:	2100      	movs	r1, #0
   810f0:	201c      	movs	r0, #28
   810f2:	4b1a      	ldr	r3, [pc, #104]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   810f4:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   810f6:	201c      	movs	r0, #28
   810f8:	4b19      	ldr	r3, [pc, #100]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   810fa:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   810fc:	201d      	movs	r0, #29
   810fe:	4b15      	ldr	r3, [pc, #84]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   81100:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   81102:	201d      	movs	r0, #29
   81104:	4b14      	ldr	r3, [pc, #80]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   81106:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   81108:	2100      	movs	r1, #0
   8110a:	201d      	movs	r0, #29
   8110c:	4b13      	ldr	r3, [pc, #76]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   8110e:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   81110:	201d      	movs	r0, #29
   81112:	4b13      	ldr	r3, [pc, #76]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   81114:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   81116:	201e      	movs	r0, #30
   81118:	4b0e      	ldr	r3, [pc, #56]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   8111a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   8111c:	201e      	movs	r0, #30
   8111e:	4b0e      	ldr	r3, [pc, #56]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   81120:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   81122:	2100      	movs	r1, #0
   81124:	201e      	movs	r0, #30
   81126:	4b0d      	ldr	r3, [pc, #52]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   81128:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   8112a:	201e      	movs	r0, #30
   8112c:	4b0c      	ldr	r3, [pc, #48]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   8112e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   81130:	2021      	movs	r0, #33	; 0x21
   81132:	4b08      	ldr	r3, [pc, #32]	; (81154 <CPU3_D_INIT_INT+0xcc>)
   81134:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   81136:	2021      	movs	r0, #33	; 0x21
   81138:	4b07      	ldr	r3, [pc, #28]	; (81158 <CPU3_D_INIT_INT+0xd0>)
   8113a:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   8113c:	2100      	movs	r1, #0
   8113e:	2021      	movs	r0, #33	; 0x21
   81140:	4b06      	ldr	r3, [pc, #24]	; (8115c <CPU3_D_INIT_INT+0xd4>)
   81142:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   81144:	2021      	movs	r0, #33	; 0x21
   81146:	4b06      	ldr	r3, [pc, #24]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   81148:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   8114a:	202b      	movs	r0, #43	; 0x2b
   8114c:	4b04      	ldr	r3, [pc, #16]	; (81160 <CPU3_D_INIT_INT+0xd8>)
   8114e:	4798      	blx	r3
	
	
   81150:	bf00      	nop
   81152:	bd80      	pop	{r7, pc}
   81154:	00080fcd 	.word	0x00080fcd
   81158:	00081001 	.word	0x00081001
   8115c:	00081035 	.word	0x00081035
   81160:	00080f9d 	.word	0x00080f9d
   81164:	400e0800 	.word	0x400e0800
   81168:	0008185d 	.word	0x0008185d

0008116c <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   8116c:	b480      	push	{r7}
   8116e:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   81170:	4b14      	ldr	r3, [pc, #80]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   81172:	4a15      	ldr	r2, [pc, #84]	; (811c8 <CPU3_D_INIT_PWM+0x5c>)
   81174:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81178:	4b12      	ldr	r3, [pc, #72]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   8117a:	4a14      	ldr	r2, [pc, #80]	; (811cc <CPU3_D_INIT_PWM+0x60>)
   8117c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81180:	4b10      	ldr	r3, [pc, #64]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   81182:	4a12      	ldr	r2, [pc, #72]	; (811cc <CPU3_D_INIT_PWM+0x60>)
   81184:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   81188:	4b0e      	ldr	r3, [pc, #56]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   8118a:	22ff      	movs	r2, #255	; 0xff
   8118c:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   8118e:	4b0d      	ldr	r3, [pc, #52]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   81190:	f640 2241 	movw	r2, #2625	; 0xa41
   81194:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   81198:	4b0a      	ldr	r3, [pc, #40]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   8119a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8119e:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   811a2:	4b08      	ldr	r3, [pc, #32]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   811a4:	f640 2241 	movw	r2, #2625	; 0xa41
   811a8:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   811ac:	4b05      	ldr	r3, [pc, #20]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   811ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   811b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   811b6:	4b03      	ldr	r3, [pc, #12]	; (811c4 <CPU3_D_INIT_PWM+0x58>)
   811b8:	22ff      	movs	r2, #255	; 0xff
   811ba:	605a      	str	r2, [r3, #4]
}
   811bc:	bf00      	nop
   811be:	46bd      	mov	sp, r7
   811c0:	bc80      	pop	{r7}
   811c2:	4770      	bx	lr
   811c4:	40094000 	.word	0x40094000
   811c8:	50574d00 	.word	0x50574d00
   811cc:	00070605 	.word	0x00070605

000811d0 <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   811d0:	b580      	push	{r7, lr}
   811d2:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   811d4:	4b21      	ldr	r3, [pc, #132]	; (8125c <CPU3_D_INIT_TIMER+0x8c>)
   811d6:	4a22      	ldr	r2, [pc, #136]	; (81260 <CPU3_D_INIT_TIMER+0x90>)
   811d8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   811dc:	4b21      	ldr	r3, [pc, #132]	; (81264 <CPU3_D_INIT_TIMER+0x94>)
   811de:	4a20      	ldr	r2, [pc, #128]	; (81260 <CPU3_D_INIT_TIMER+0x90>)
   811e0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   811e4:	4b20      	ldr	r3, [pc, #128]	; (81268 <CPU3_D_INIT_TIMER+0x98>)
   811e6:	4a1e      	ldr	r2, [pc, #120]	; (81260 <CPU3_D_INIT_TIMER+0x90>)
   811e8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   811ec:	201b      	movs	r0, #27
   811ee:	4b1f      	ldr	r3, [pc, #124]	; (8126c <CPU3_D_INIT_TIMER+0x9c>)
   811f0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   811f2:	201c      	movs	r0, #28
   811f4:	4b1d      	ldr	r3, [pc, #116]	; (8126c <CPU3_D_INIT_TIMER+0x9c>)
   811f6:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   811f8:	201e      	movs	r0, #30
   811fa:	4b1c      	ldr	r3, [pc, #112]	; (8126c <CPU3_D_INIT_TIMER+0x9c>)
   811fc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC7);
   811fe:	2022      	movs	r0, #34	; 0x22
   81200:	4b1a      	ldr	r3, [pc, #104]	; (8126c <CPU3_D_INIT_TIMER+0x9c>)
   81202:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   81204:	2021      	movs	r0, #33	; 0x21
   81206:	4b19      	ldr	r3, [pc, #100]	; (8126c <CPU3_D_INIT_TIMER+0x9c>)
   81208:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8120a:	4b14      	ldr	r3, [pc, #80]	; (8125c <CPU3_D_INIT_TIMER+0x8c>)
   8120c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81210:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81212:	4b12      	ldr	r3, [pc, #72]	; (8125c <CPU3_D_INIT_TIMER+0x8c>)
   81214:	f24c 0203 	movw	r2, #49155	; 0xc003
   81218:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8121a:	4b12      	ldr	r3, [pc, #72]	; (81264 <CPU3_D_INIT_TIMER+0x94>)
   8121c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81220:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81222:	4b10      	ldr	r3, [pc, #64]	; (81264 <CPU3_D_INIT_TIMER+0x94>)
   81224:	f24c 0203 	movw	r2, #49155	; 0xc003
   81228:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8122a:	4b0f      	ldr	r3, [pc, #60]	; (81268 <CPU3_D_INIT_TIMER+0x98>)
   8122c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81230:	605a      	str	r2, [r3, #4]
	TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81232:	4b0d      	ldr	r3, [pc, #52]	; (81268 <CPU3_D_INIT_TIMER+0x98>)
   81234:	f24c 0203 	movw	r2, #49155	; 0xc003
   81238:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   8123a:	4b08      	ldr	r3, [pc, #32]	; (8125c <CPU3_D_INIT_TIMER+0x8c>)
   8123c:	2210      	movs	r2, #16
   8123e:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81240:	4b06      	ldr	r3, [pc, #24]	; (8125c <CPU3_D_INIT_TIMER+0x8c>)
   81242:	2210      	movs	r2, #16
   81244:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81246:	4b07      	ldr	r3, [pc, #28]	; (81264 <CPU3_D_INIT_TIMER+0x94>)
   81248:	2210      	movs	r2, #16
   8124a:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   8124c:	4b05      	ldr	r3, [pc, #20]	; (81264 <CPU3_D_INIT_TIMER+0x94>)
   8124e:	2210      	movs	r2, #16
   81250:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81252:	4b05      	ldr	r3, [pc, #20]	; (81268 <CPU3_D_INIT_TIMER+0x98>)
   81254:	2210      	movs	r2, #16
   81256:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
}
   81258:	bf00      	nop
   8125a:	bd80      	pop	{r7, pc}
   8125c:	40080000 	.word	0x40080000
   81260:	54494d00 	.word	0x54494d00
   81264:	40084000 	.word	0x40084000
   81268:	40088000 	.word	0x40088000
   8126c:	00083631 	.word	0x00083631

00081270 <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81270:	b580      	push	{r7, lr}
   81272:	b084      	sub	sp, #16
   81274:	af00      	add	r7, sp, #0
   81276:	60f8      	str	r0, [r7, #12]
   81278:	60b9      	str	r1, [r7, #8]
   8127a:	603b      	str	r3, [r7, #0]
   8127c:	4613      	mov	r3, r2
   8127e:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81280:	2000      	movs	r0, #0
   81282:	4b0d      	ldr	r3, [pc, #52]	; (812b8 <CPU3_D_MAIN_TIMER+0x48>)
   81284:	4798      	blx	r3
	channel=0;
   81286:	2300      	movs	r3, #0
   81288:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8128a:	4b0c      	ldr	r3, [pc, #48]	; (812bc <CPU3_D_MAIN_TIMER+0x4c>)
   8128c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81290:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   81292:	683a      	ldr	r2, [r7, #0]
   81294:	68b9      	ldr	r1, [r7, #8]
   81296:	68f8      	ldr	r0, [r7, #12]
   81298:	4b09      	ldr	r3, [pc, #36]	; (812c0 <CPU3_D_MAIN_TIMER+0x50>)
   8129a:	4798      	blx	r3
	tc_start(tc, channel);
   8129c:	68b9      	ldr	r1, [r7, #8]
   8129e:	68f8      	ldr	r0, [r7, #12]
   812a0:	4b08      	ldr	r3, [pc, #32]	; (812c4 <CPU3_D_MAIN_TIMER+0x54>)
   812a2:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   812a4:	2210      	movs	r2, #16
   812a6:	68b9      	ldr	r1, [r7, #8]
   812a8:	68f8      	ldr	r0, [r7, #12]
   812aa:	4b07      	ldr	r3, [pc, #28]	; (812c8 <CPU3_D_MAIN_TIMER+0x58>)
   812ac:	4798      	blx	r3
}
   812ae:	bf00      	nop
   812b0:	4618      	mov	r0, r3
   812b2:	3710      	adds	r7, #16
   812b4:	46bd      	mov	sp, r7
   812b6:	bd80      	pop	{r7, pc}
   812b8:	000836b1 	.word	0x000836b1
   812bc:	40088000 	.word	0x40088000
   812c0:	00081745 	.word	0x00081745
   812c4:	00081705 	.word	0x00081705
   812c8:	00081769 	.word	0x00081769

000812cc <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   812cc:	b580      	push	{r7, lr}
   812ce:	b084      	sub	sp, #16
   812d0:	af00      	add	r7, sp, #0
   812d2:	60f8      	str	r0, [r7, #12]
   812d4:	60b9      	str	r1, [r7, #8]
   812d6:	603b      	str	r3, [r7, #0]
   812d8:	4613      	mov	r3, r2
   812da:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   812dc:	2000      	movs	r0, #0
   812de:	4b10      	ldr	r3, [pc, #64]	; (81320 <acid_startTimer1+0x54>)
   812e0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   812e2:	201b      	movs	r0, #27
   812e4:	4b0f      	ldr	r3, [pc, #60]	; (81324 <acid_startTimer1+0x58>)
   812e6:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   812e8:	f24c 0202 	movw	r2, #49154	; 0xc002
   812ec:	68b9      	ldr	r1, [r7, #8]
   812ee:	68f8      	ldr	r0, [r7, #12]
   812f0:	4b0d      	ldr	r3, [pc, #52]	; (81328 <acid_startTimer1+0x5c>)
   812f2:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   812f4:	4b0d      	ldr	r3, [pc, #52]	; (8132c <acid_startTimer1+0x60>)
   812f6:	f24c 0202 	movw	r2, #49154	; 0xc002
   812fa:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   812fc:	683a      	ldr	r2, [r7, #0]
   812fe:	68b9      	ldr	r1, [r7, #8]
   81300:	68f8      	ldr	r0, [r7, #12]
   81302:	4b0b      	ldr	r3, [pc, #44]	; (81330 <acid_startTimer1+0x64>)
   81304:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   81306:	2210      	movs	r2, #16
   81308:	2100      	movs	r1, #0
   8130a:	4808      	ldr	r0, [pc, #32]	; (8132c <acid_startTimer1+0x60>)
   8130c:	4b09      	ldr	r3, [pc, #36]	; (81334 <acid_startTimer1+0x68>)
   8130e:	4798      	blx	r3
	tc_start(tc, channel);
   81310:	68b9      	ldr	r1, [r7, #8]
   81312:	68f8      	ldr	r0, [r7, #12]
   81314:	4b08      	ldr	r3, [pc, #32]	; (81338 <acid_startTimer1+0x6c>)
   81316:	4798      	blx	r3
}
   81318:	bf00      	nop
   8131a:	3710      	adds	r7, #16
   8131c:	46bd      	mov	sp, r7
   8131e:	bd80      	pop	{r7, pc}
   81320:	000836b1 	.word	0x000836b1
   81324:	00083631 	.word	0x00083631
   81328:	000816cd 	.word	0x000816cd
   8132c:	40080000 	.word	0x40080000
   81330:	00081745 	.word	0x00081745
   81334:	00081769 	.word	0x00081769
   81338:	00081705 	.word	0x00081705

0008133c <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   8133c:	b580      	push	{r7, lr}
   8133e:	b084      	sub	sp, #16
   81340:	af00      	add	r7, sp, #0
   81342:	60f8      	str	r0, [r7, #12]
   81344:	60b9      	str	r1, [r7, #8]
   81346:	603b      	str	r3, [r7, #0]
   81348:	4613      	mov	r3, r2
   8134a:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   8134c:	2000      	movs	r0, #0
   8134e:	4b10      	ldr	r3, [pc, #64]	; (81390 <bicar_startTimer1+0x54>)
   81350:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   81352:	201c      	movs	r0, #28
   81354:	4b0f      	ldr	r3, [pc, #60]	; (81394 <bicar_startTimer1+0x58>)
   81356:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   81358:	f24c 0202 	movw	r2, #49154	; 0xc002
   8135c:	68b9      	ldr	r1, [r7, #8]
   8135e:	68f8      	ldr	r0, [r7, #12]
   81360:	4b0d      	ldr	r3, [pc, #52]	; (81398 <bicar_startTimer1+0x5c>)
   81362:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   81364:	4b0d      	ldr	r3, [pc, #52]	; (8139c <bicar_startTimer1+0x60>)
   81366:	f24c 0202 	movw	r2, #49154	; 0xc002
   8136a:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   8136c:	683a      	ldr	r2, [r7, #0]
   8136e:	68b9      	ldr	r1, [r7, #8]
   81370:	68f8      	ldr	r0, [r7, #12]
   81372:	4b0b      	ldr	r3, [pc, #44]	; (813a0 <bicar_startTimer1+0x64>)
   81374:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   81376:	2210      	movs	r2, #16
   81378:	2101      	movs	r1, #1
   8137a:	4808      	ldr	r0, [pc, #32]	; (8139c <bicar_startTimer1+0x60>)
   8137c:	4b09      	ldr	r3, [pc, #36]	; (813a4 <bicar_startTimer1+0x68>)
   8137e:	4798      	blx	r3
	tc_start(tc, channel);
   81380:	68b9      	ldr	r1, [r7, #8]
   81382:	68f8      	ldr	r0, [r7, #12]
   81384:	4b08      	ldr	r3, [pc, #32]	; (813a8 <bicar_startTimer1+0x6c>)
   81386:	4798      	blx	r3
}
   81388:	bf00      	nop
   8138a:	3710      	adds	r7, #16
   8138c:	46bd      	mov	sp, r7
   8138e:	bd80      	pop	{r7, pc}
   81390:	000836b1 	.word	0x000836b1
   81394:	00083631 	.word	0x00083631
   81398:	000816cd 	.word	0x000816cd
   8139c:	40080000 	.word	0x40080000
   813a0:	00081745 	.word	0x00081745
   813a4:	00081769 	.word	0x00081769
   813a8:	00081705 	.word	0x00081705

000813ac <startTimer1>:
// 	tc_enable_interrupt(TC2,1,TC_IER_CPCS);
// 	tc_start(tc, channel);
// }

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   813ac:	b580      	push	{r7, lr}
   813ae:	b084      	sub	sp, #16
   813b0:	af00      	add	r7, sp, #0
   813b2:	60f8      	str	r0, [r7, #12]
   813b4:	60b9      	str	r1, [r7, #8]
   813b6:	603b      	str	r3, [r7, #0]
   813b8:	4613      	mov	r3, r2
   813ba:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   813bc:	2000      	movs	r0, #0
   813be:	4b11      	ldr	r3, [pc, #68]	; (81404 <startTimer1+0x58>)
   813c0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   813c2:	201d      	movs	r0, #29
   813c4:	4b10      	ldr	r3, [pc, #64]	; (81408 <startTimer1+0x5c>)
   813c6:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   813c8:	f24c 0203 	movw	r2, #49155	; 0xc003
   813cc:	68b9      	ldr	r1, [r7, #8]
   813ce:	68f8      	ldr	r0, [r7, #12]
   813d0:	4b0e      	ldr	r3, [pc, #56]	; (8140c <startTimer1+0x60>)
   813d2:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   813d4:	4b0e      	ldr	r3, [pc, #56]	; (81410 <startTimer1+0x64>)
   813d6:	f24c 0203 	movw	r2, #49155	; 0xc003
   813da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   813de:	683a      	ldr	r2, [r7, #0]
   813e0:	68b9      	ldr	r1, [r7, #8]
   813e2:	68f8      	ldr	r0, [r7, #12]
   813e4:	4b0b      	ldr	r3, [pc, #44]	; (81414 <startTimer1+0x68>)
   813e6:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   813e8:	2210      	movs	r2, #16
   813ea:	2102      	movs	r1, #2
   813ec:	4808      	ldr	r0, [pc, #32]	; (81410 <startTimer1+0x64>)
   813ee:	4b0a      	ldr	r3, [pc, #40]	; (81418 <startTimer1+0x6c>)
   813f0:	4798      	blx	r3
	tc_start(tc, channel);
   813f2:	68b9      	ldr	r1, [r7, #8]
   813f4:	68f8      	ldr	r0, [r7, #12]
   813f6:	4b09      	ldr	r3, [pc, #36]	; (8141c <startTimer1+0x70>)
   813f8:	4798      	blx	r3
}
   813fa:	bf00      	nop
   813fc:	3710      	adds	r7, #16
   813fe:	46bd      	mov	sp, r7
   81400:	bd80      	pop	{r7, pc}
   81402:	bf00      	nop
   81404:	000836b1 	.word	0x000836b1
   81408:	00083631 	.word	0x00083631
   8140c:	000816cd 	.word	0x000816cd
   81410:	40080000 	.word	0x40080000
   81414:	00081745 	.word	0x00081745
   81418:	00081769 	.word	0x00081769
   8141c:	00081705 	.word	0x00081705

00081420 <startTimer2>:
void startTimer2(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81420:	b580      	push	{r7, lr}
   81422:	b084      	sub	sp, #16
   81424:	af00      	add	r7, sp, #0
   81426:	60f8      	str	r0, [r7, #12]
   81428:	60b9      	str	r1, [r7, #8]
   8142a:	603b      	str	r3, [r7, #0]
   8142c:	4613      	mov	r3, r2
   8142e:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   81430:	2000      	movs	r0, #0
   81432:	4b10      	ldr	r3, [pc, #64]	; (81474 <startTimer2+0x54>)
   81434:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   81436:	201e      	movs	r0, #30
   81438:	4b0f      	ldr	r3, [pc, #60]	; (81478 <startTimer2+0x58>)
   8143a:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   8143c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81440:	68b9      	ldr	r1, [r7, #8]
   81442:	68f8      	ldr	r0, [r7, #12]
   81444:	4b0d      	ldr	r3, [pc, #52]	; (8147c <startTimer2+0x5c>)
   81446:	4798      	blx	r3
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81448:	4b0d      	ldr	r3, [pc, #52]	; (81480 <startTimer2+0x60>)
   8144a:	f24c 0203 	movw	r2, #49155	; 0xc003
   8144e:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81450:	683a      	ldr	r2, [r7, #0]
   81452:	68b9      	ldr	r1, [r7, #8]
   81454:	68f8      	ldr	r0, [r7, #12]
   81456:	4b0b      	ldr	r3, [pc, #44]	; (81484 <startTimer2+0x64>)
   81458:	4798      	blx	r3
	tc_enable_interrupt(TC1,0,TC_IER_CPCS);
   8145a:	2210      	movs	r2, #16
   8145c:	2100      	movs	r1, #0
   8145e:	4808      	ldr	r0, [pc, #32]	; (81480 <startTimer2+0x60>)
   81460:	4b09      	ldr	r3, [pc, #36]	; (81488 <startTimer2+0x68>)
   81462:	4798      	blx	r3
	tc_start(tc, channel);
   81464:	68b9      	ldr	r1, [r7, #8]
   81466:	68f8      	ldr	r0, [r7, #12]
   81468:	4b08      	ldr	r3, [pc, #32]	; (8148c <startTimer2+0x6c>)
   8146a:	4798      	blx	r3
}
   8146c:	bf00      	nop
   8146e:	3710      	adds	r7, #16
   81470:	46bd      	mov	sp, r7
   81472:	bd80      	pop	{r7, pc}
   81474:	000836b1 	.word	0x000836b1
   81478:	00083631 	.word	0x00083631
   8147c:	000816cd 	.word	0x000816cd
   81480:	40084000 	.word	0x40084000
   81484:	00081745 	.word	0x00081745
   81488:	00081769 	.word	0x00081769
   8148c:	00081705 	.word	0x00081705

00081490 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81490:	b580      	push	{r7, lr}
   81492:	b082      	sub	sp, #8
   81494:	af00      	add	r7, sp, #0
   81496:	4603      	mov	r3, r0
   81498:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   8149a:	79fb      	ldrb	r3, [r7, #7]
   8149c:	4618      	mov	r0, r3
   8149e:	4b03      	ldr	r3, [pc, #12]	; (814ac <cpu3_sv_cntrl_activatepump+0x1c>)
   814a0:	4798      	blx	r3
	
	return 0;
   814a2:	2300      	movs	r3, #0
}
   814a4:	4618      	mov	r0, r3
   814a6:	3708      	adds	r7, #8
   814a8:	46bd      	mov	sp, r7
   814aa:	bd80      	pop	{r7, pc}
   814ac:	000808cd 	.word	0x000808cd

000814b0 <SV_put_sensor_data>:
// 	
// 	return 0;
// 
// }

bool SV_put_sensor_data(Sys_statusType* sensor_struct)   {
   814b0:	b580      	push	{r7, lr}
   814b2:	b084      	sub	sp, #16
   814b4:	af00      	add	r7, sp, #0
   814b6:	6078      	str	r0, [r7, #4]
	
	DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = PROPORTIONING_CPU_id;
   814b8:	2302      	movs	r3, #2
   814ba:	723b      	strb	r3, [r7, #8]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = GROUP_ID_8 ;
   814bc:	2308      	movs	r3, #8
   814be:	727b      	strb	r3, [r7, #9]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = acid_f_b;
   814c0:	4b09      	ldr	r3, [pc, #36]	; (814e8 <SV_put_sensor_data+0x38>)
   814c2:	881b      	ldrh	r3, [r3, #0]
   814c4:	817b      	strh	r3, [r7, #10]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = bicarb_f_b;
   814c6:	4b09      	ldr	r3, [pc, #36]	; (814ec <SV_put_sensor_data+0x3c>)
   814c8:	881b      	ldrh	r3, [r3, #0]
   814ca:	81bb      	strh	r3, [r7, #12]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = 0;
   814cc:	2300      	movs	r3, #0
   814ce:	81fb      	strh	r3, [r7, #14]
	SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   814d0:	f107 0308 	add.w	r3, r7, #8
   814d4:	4618      	mov	r0, r3
   814d6:	4b06      	ldr	r3, [pc, #24]	; (814f0 <SV_put_sensor_data+0x40>)
   814d8:	4798      	blx	r3
	
	return ;
   814da:	bf00      	nop
   814dc:	bf00      	nop
}
   814de:	4618      	mov	r0, r3
   814e0:	3710      	adds	r7, #16
   814e2:	46bd      	mov	sp, r7
   814e4:	bd80      	pop	{r7, pc}
   814e6:	bf00      	nop
   814e8:	200711f8 	.word	0x200711f8
   814ec:	200711fa 	.word	0x200711fa
   814f0:	000814f5 	.word	0x000814f5

000814f4 <SV_SEND_CAN_MAILBOX>:


void SV_SEND_CAN_MAILBOX(DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   814f4:	b580      	push	{r7, lr}
   814f6:	b084      	sub	sp, #16
   814f8:	af00      	add	r7, sp, #0
   814fa:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   814fc:	687b      	ldr	r3, [r7, #4]
   814fe:	781b      	ldrb	r3, [r3, #0]
   81500:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   81502:	687b      	ldr	r3, [r7, #4]
   81504:	785b      	ldrb	r3, [r3, #1]
   81506:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;
   81508:	687b      	ldr	r3, [r7, #4]
   8150a:	885b      	ldrh	r3, [r3, #2]
   8150c:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   8150e:	687b      	ldr	r3, [r7, #4]
   81510:	889b      	ldrh	r3, [r3, #4]
   81512:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   81514:	687b      	ldr	r3, [r7, #4]
   81516:	88db      	ldrh	r3, [r3, #6]
   81518:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal                                    =sv_data_size.fourbyte[0];
   8151a:	68bb      	ldr	r3, [r7, #8]
   8151c:	4a14      	ldr	r2, [pc, #80]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   8151e:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah                                    =sv_data_size.fourbyte[1];
   81520:	68fb      	ldr	r3, [r7, #12]
   81522:	4a13      	ldr	r2, [pc, #76]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   81524:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length                                  = 8;
   81526:	4b12      	ldr	r3, [pc, #72]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   81528:	2208      	movs	r2, #8
   8152a:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8152c:	4b10      	ldr	r3, [pc, #64]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   8152e:	2200      	movs	r2, #0
   81530:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   81532:	4b0f      	ldr	r3, [pc, #60]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   81534:	2203      	movs	r2, #3
   81536:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   81538:	4b0d      	ldr	r3, [pc, #52]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   8153a:	2201      	movs	r2, #1
   8153c:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8153e:	4b0c      	ldr	r3, [pc, #48]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   81540:	2200      	movs	r2, #0
   81542:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0x7FC ;
   81544:	4b0a      	ldr	r3, [pc, #40]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   81546:	f240 72fc 	movw	r2, #2044	; 0x7fc
   8154a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id); ;
   8154c:	4b08      	ldr	r3, [pc, #32]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   8154e:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   81552:	611a      	str	r2, [r3, #16]
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));
   81554:	bf00      	nop
   81556:	4806      	ldr	r0, [pc, #24]	; (81570 <SV_SEND_CAN_MAILBOX+0x7c>)
   81558:	4b06      	ldr	r3, [pc, #24]	; (81574 <SV_SEND_CAN_MAILBOX+0x80>)
   8155a:	4798      	blx	r3
   8155c:	4603      	mov	r3, r0
   8155e:	2b01      	cmp	r3, #1
   81560:	d0f9      	beq.n	81556 <SV_SEND_CAN_MAILBOX+0x62>
	//dd_can_mailbox_write(&can0_mailbox);
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   81562:	2001      	movs	r0, #1
   81564:	4b04      	ldr	r3, [pc, #16]	; (81578 <SV_SEND_CAN_MAILBOX+0x84>)
   81566:	4798      	blx	r3
   81568:	bf00      	nop
   8156a:	3710      	adds	r7, #16
   8156c:	46bd      	mov	sp, r7
   8156e:	bd80      	pop	{r7, pc}
   81570:	20070dd4 	.word	0x20070dd4
   81574:	0008059d 	.word	0x0008059d
   81578:	00080659 	.word	0x00080659

0008157c <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   8157c:	b580      	push	{r7, lr}
   8157e:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   81580:	4b09      	ldr	r3, [pc, #36]	; (815a8 <CPU3_S_SYSTEM_INIT+0x2c>)
   81582:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   81584:	4b09      	ldr	r3, [pc, #36]	; (815ac <CPU3_S_SYSTEM_INIT+0x30>)
   81586:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   81588:	4b09      	ldr	r3, [pc, #36]	; (815b0 <CPU3_S_SYSTEM_INIT+0x34>)
   8158a:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   8158c:	4b09      	ldr	r3, [pc, #36]	; (815b4 <CPU3_S_SYSTEM_INIT+0x38>)
   8158e:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   81590:	4b09      	ldr	r3, [pc, #36]	; (815b8 <CPU3_S_SYSTEM_INIT+0x3c>)
   81592:	4798      	blx	r3
	DD_INIT_CAN();
   81594:	4b09      	ldr	r3, [pc, #36]	; (815bc <CPU3_S_SYSTEM_INIT+0x40>)
   81596:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81598:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8159c:	2000      	movs	r0, #0
   8159e:	4b08      	ldr	r3, [pc, #32]	; (815c0 <CPU3_S_SYSTEM_INIT+0x44>)
   815a0:	4798      	blx	r3
}
   815a2:	bf00      	nop
   815a4:	bd80      	pop	{r7, pc}
   815a6:	bf00      	nop
   815a8:	00080151 	.word	0x00080151
   815ac:	00081089 	.word	0x00081089
   815b0:	00080a75 	.word	0x00080a75
   815b4:	0008116d 	.word	0x0008116d
   815b8:	000811d1 	.word	0x000811d1
   815bc:	00080775 	.word	0x00080775
   815c0:	000815c5 	.word	0x000815c5

000815c4 <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   815c4:	b580      	push	{r7, lr}
   815c6:	b082      	sub	sp, #8
   815c8:	af00      	add	r7, sp, #0
   815ca:	4603      	mov	r3, r0
   815cc:	6039      	str	r1, [r7, #0]
   815ce:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   815d0:	683b      	ldr	r3, [r7, #0]
   815d2:	b2da      	uxtb	r2, r3
   815d4:	79fb      	ldrb	r3, [r7, #7]
   815d6:	4611      	mov	r1, r2
   815d8:	4618      	mov	r0, r3
   815da:	4b03      	ldr	r3, [pc, #12]	; (815e8 <CPU3_S_START_TIMER+0x24>)
   815dc:	4798      	blx	r3
	
	return 0;
   815de:	2300      	movs	r3, #0
}
   815e0:	4618      	mov	r0, r3
   815e2:	3708      	adds	r7, #8
   815e4:	46bd      	mov	sp, r7
   815e6:	bd80      	pop	{r7, pc}
   815e8:	00080941 	.word	0x00080941

000815ec <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   815ec:	b580      	push	{r7, lr}
   815ee:	b082      	sub	sp, #8
   815f0:	af00      	add	r7, sp, #0
   815f2:	4603      	mov	r3, r0
   815f4:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   815f6:	79fb      	ldrb	r3, [r7, #7]
   815f8:	4618      	mov	r0, r3
   815fa:	4b03      	ldr	r3, [pc, #12]	; (81608 <CPU3_S_STOP_TIMER+0x1c>)
   815fc:	4798      	blx	r3
	
	return 0;
   815fe:	2300      	movs	r3, #0
   81600:	4618      	mov	r0, r3
   81602:	3708      	adds	r7, #8
   81604:	46bd      	mov	sp, r7
   81606:	bd80      	pop	{r7, pc}
   81608:	000809f9 	.word	0x000809f9

0008160c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8160c:	b580      	push	{r7, lr}
   8160e:	b086      	sub	sp, #24
   81610:	af00      	add	r7, sp, #0
   81612:	60f8      	str	r0, [r7, #12]
   81614:	60b9      	str	r1, [r7, #8]
   81616:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81618:	2300      	movs	r3, #0
   8161a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   8161c:	68fb      	ldr	r3, [r7, #12]
   8161e:	2b00      	cmp	r3, #0
   81620:	d012      	beq.n	81648 <_read+0x3c>
		return -1;
   81622:	f04f 33ff 	mov.w	r3, #4294967295
   81626:	e013      	b.n	81650 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   81628:	4b0b      	ldr	r3, [pc, #44]	; (81658 <_read+0x4c>)
   8162a:	681b      	ldr	r3, [r3, #0]
   8162c:	4a0b      	ldr	r2, [pc, #44]	; (8165c <_read+0x50>)
   8162e:	6812      	ldr	r2, [r2, #0]
   81630:	68b9      	ldr	r1, [r7, #8]
   81632:	4610      	mov	r0, r2
   81634:	4798      	blx	r3
		ptr++;
   81636:	68bb      	ldr	r3, [r7, #8]
   81638:	3301      	adds	r3, #1
   8163a:	60bb      	str	r3, [r7, #8]
		nChars++;
   8163c:	697b      	ldr	r3, [r7, #20]
   8163e:	3301      	adds	r3, #1
   81640:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81642:	687b      	ldr	r3, [r7, #4]
   81644:	3b01      	subs	r3, #1
   81646:	607b      	str	r3, [r7, #4]
   81648:	687b      	ldr	r3, [r7, #4]
   8164a:	2b00      	cmp	r3, #0
   8164c:	dcec      	bgt.n	81628 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   8164e:	697b      	ldr	r3, [r7, #20]
}
   81650:	4618      	mov	r0, r3
   81652:	3718      	adds	r7, #24
   81654:	46bd      	mov	sp, r7
   81656:	bd80      	pop	{r7, pc}
   81658:	200711fc 	.word	0x200711fc
   8165c:	20071204 	.word	0x20071204

00081660 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81660:	b580      	push	{r7, lr}
   81662:	b086      	sub	sp, #24
   81664:	af00      	add	r7, sp, #0
   81666:	60f8      	str	r0, [r7, #12]
   81668:	60b9      	str	r1, [r7, #8]
   8166a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   8166c:	2300      	movs	r3, #0
   8166e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   81670:	68fb      	ldr	r3, [r7, #12]
   81672:	2b01      	cmp	r3, #1
   81674:	d01e      	beq.n	816b4 <_write+0x54>
   81676:	68fb      	ldr	r3, [r7, #12]
   81678:	2b02      	cmp	r3, #2
   8167a:	d01b      	beq.n	816b4 <_write+0x54>
   8167c:	68fb      	ldr	r3, [r7, #12]
   8167e:	2b03      	cmp	r3, #3
   81680:	d018      	beq.n	816b4 <_write+0x54>
		return -1;
   81682:	f04f 33ff 	mov.w	r3, #4294967295
   81686:	e019      	b.n	816bc <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81688:	4b0e      	ldr	r3, [pc, #56]	; (816c4 <_write+0x64>)
   8168a:	681a      	ldr	r2, [r3, #0]
   8168c:	4b0e      	ldr	r3, [pc, #56]	; (816c8 <_write+0x68>)
   8168e:	6818      	ldr	r0, [r3, #0]
   81690:	68bb      	ldr	r3, [r7, #8]
   81692:	1c59      	adds	r1, r3, #1
   81694:	60b9      	str	r1, [r7, #8]
   81696:	781b      	ldrb	r3, [r3, #0]
   81698:	4619      	mov	r1, r3
   8169a:	4790      	blx	r2
   8169c:	4603      	mov	r3, r0
   8169e:	2b00      	cmp	r3, #0
   816a0:	da02      	bge.n	816a8 <_write+0x48>
			return -1;
   816a2:	f04f 33ff 	mov.w	r3, #4294967295
   816a6:	e009      	b.n	816bc <_write+0x5c>
		}
		++nChars;
   816a8:	697b      	ldr	r3, [r7, #20]
   816aa:	3301      	adds	r3, #1
   816ac:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   816ae:	687b      	ldr	r3, [r7, #4]
   816b0:	3b01      	subs	r3, #1
   816b2:	607b      	str	r3, [r7, #4]
   816b4:	687b      	ldr	r3, [r7, #4]
   816b6:	2b00      	cmp	r3, #0
   816b8:	d1e6      	bne.n	81688 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   816ba:	697b      	ldr	r3, [r7, #20]
}
   816bc:	4618      	mov	r0, r3
   816be:	3718      	adds	r7, #24
   816c0:	46bd      	mov	sp, r7
   816c2:	bd80      	pop	{r7, pc}
   816c4:	20071200 	.word	0x20071200
   816c8:	20071204 	.word	0x20071204

000816cc <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   816cc:	b480      	push	{r7}
   816ce:	b087      	sub	sp, #28
   816d0:	af00      	add	r7, sp, #0
   816d2:	60f8      	str	r0, [r7, #12]
   816d4:	60b9      	str	r1, [r7, #8]
   816d6:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   816d8:	68fa      	ldr	r2, [r7, #12]
   816da:	68bb      	ldr	r3, [r7, #8]
   816dc:	019b      	lsls	r3, r3, #6
   816de:	4413      	add	r3, r2
   816e0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   816e2:	697b      	ldr	r3, [r7, #20]
   816e4:	2202      	movs	r2, #2
   816e6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   816e8:	697b      	ldr	r3, [r7, #20]
   816ea:	f04f 32ff 	mov.w	r2, #4294967295
   816ee:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   816f0:	697b      	ldr	r3, [r7, #20]
   816f2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   816f4:	697b      	ldr	r3, [r7, #20]
   816f6:	687a      	ldr	r2, [r7, #4]
   816f8:	605a      	str	r2, [r3, #4]
}
   816fa:	bf00      	nop
   816fc:	371c      	adds	r7, #28
   816fe:	46bd      	mov	sp, r7
   81700:	bc80      	pop	{r7}
   81702:	4770      	bx	lr

00081704 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   81704:	b480      	push	{r7}
   81706:	b083      	sub	sp, #12
   81708:	af00      	add	r7, sp, #0
   8170a:	6078      	str	r0, [r7, #4]
   8170c:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8170e:	687a      	ldr	r2, [r7, #4]
   81710:	683b      	ldr	r3, [r7, #0]
   81712:	019b      	lsls	r3, r3, #6
   81714:	4413      	add	r3, r2
   81716:	2205      	movs	r2, #5
   81718:	601a      	str	r2, [r3, #0]
}
   8171a:	bf00      	nop
   8171c:	370c      	adds	r7, #12
   8171e:	46bd      	mov	sp, r7
   81720:	bc80      	pop	{r7}
   81722:	4770      	bx	lr

00081724 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   81724:	b480      	push	{r7}
   81726:	b083      	sub	sp, #12
   81728:	af00      	add	r7, sp, #0
   8172a:	6078      	str	r0, [r7, #4]
   8172c:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8172e:	687a      	ldr	r2, [r7, #4]
   81730:	683b      	ldr	r3, [r7, #0]
   81732:	019b      	lsls	r3, r3, #6
   81734:	4413      	add	r3, r2
   81736:	2202      	movs	r2, #2
   81738:	601a      	str	r2, [r3, #0]
}
   8173a:	bf00      	nop
   8173c:	370c      	adds	r7, #12
   8173e:	46bd      	mov	sp, r7
   81740:	bc80      	pop	{r7}
   81742:	4770      	bx	lr

00081744 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   81744:	b480      	push	{r7}
   81746:	b085      	sub	sp, #20
   81748:	af00      	add	r7, sp, #0
   8174a:	60f8      	str	r0, [r7, #12]
   8174c:	60b9      	str	r1, [r7, #8]
   8174e:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   81750:	68fa      	ldr	r2, [r7, #12]
   81752:	68bb      	ldr	r3, [r7, #8]
   81754:	019b      	lsls	r3, r3, #6
   81756:	4413      	add	r3, r2
   81758:	331c      	adds	r3, #28
   8175a:	687a      	ldr	r2, [r7, #4]
   8175c:	601a      	str	r2, [r3, #0]
}
   8175e:	bf00      	nop
   81760:	3714      	adds	r7, #20
   81762:	46bd      	mov	sp, r7
   81764:	bc80      	pop	{r7}
   81766:	4770      	bx	lr

00081768 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   81768:	b480      	push	{r7}
   8176a:	b087      	sub	sp, #28
   8176c:	af00      	add	r7, sp, #0
   8176e:	60f8      	str	r0, [r7, #12]
   81770:	60b9      	str	r1, [r7, #8]
   81772:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81774:	68fa      	ldr	r2, [r7, #12]
   81776:	68bb      	ldr	r3, [r7, #8]
   81778:	019b      	lsls	r3, r3, #6
   8177a:	4413      	add	r3, r2
   8177c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   8177e:	697b      	ldr	r3, [r7, #20]
   81780:	687a      	ldr	r2, [r7, #4]
   81782:	625a      	str	r2, [r3, #36]	; 0x24
}
   81784:	bf00      	nop
   81786:	371c      	adds	r7, #28
   81788:	46bd      	mov	sp, r7
   8178a:	bc80      	pop	{r7}
   8178c:	4770      	bx	lr
   8178e:	bf00      	nop

00081790 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   81790:	b480      	push	{r7}
   81792:	b085      	sub	sp, #20
   81794:	af00      	add	r7, sp, #0
   81796:	6078      	str	r0, [r7, #4]
   81798:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8179a:	687a      	ldr	r2, [r7, #4]
   8179c:	683b      	ldr	r3, [r7, #0]
   8179e:	019b      	lsls	r3, r3, #6
   817a0:	4413      	add	r3, r2
   817a2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   817a4:	68fb      	ldr	r3, [r7, #12]
   817a6:	6a1b      	ldr	r3, [r3, #32]
}
   817a8:	4618      	mov	r0, r3
   817aa:	3714      	adds	r7, #20
   817ac:	46bd      	mov	sp, r7
   817ae:	bc80      	pop	{r7}
   817b0:	4770      	bx	lr
   817b2:	bf00      	nop

000817b4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   817b4:	b480      	push	{r7}
   817b6:	b085      	sub	sp, #20
   817b8:	af00      	add	r7, sp, #0
   817ba:	6078      	str	r0, [r7, #4]
   817bc:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   817be:	2300      	movs	r3, #0
   817c0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   817c2:	687b      	ldr	r3, [r7, #4]
   817c4:	22ac      	movs	r2, #172	; 0xac
   817c6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   817c8:	683b      	ldr	r3, [r7, #0]
   817ca:	681a      	ldr	r2, [r3, #0]
   817cc:	683b      	ldr	r3, [r7, #0]
   817ce:	685b      	ldr	r3, [r3, #4]
   817d0:	fbb2 f3f3 	udiv	r3, r2, r3
   817d4:	091b      	lsrs	r3, r3, #4
   817d6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   817d8:	68fb      	ldr	r3, [r7, #12]
   817da:	2b00      	cmp	r3, #0
   817dc:	d003      	beq.n	817e6 <uart_init+0x32>
   817de:	68fb      	ldr	r3, [r7, #12]
   817e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   817e4:	d301      	bcc.n	817ea <uart_init+0x36>
		return 1;
   817e6:	2301      	movs	r3, #1
   817e8:	e00f      	b.n	8180a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   817ea:	687b      	ldr	r3, [r7, #4]
   817ec:	68fa      	ldr	r2, [r7, #12]
   817ee:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   817f0:	683b      	ldr	r3, [r7, #0]
   817f2:	689a      	ldr	r2, [r3, #8]
   817f4:	687b      	ldr	r3, [r7, #4]
   817f6:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   817f8:	687b      	ldr	r3, [r7, #4]
   817fa:	f240 2202 	movw	r2, #514	; 0x202
   817fe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81802:	687b      	ldr	r3, [r7, #4]
   81804:	2250      	movs	r2, #80	; 0x50
   81806:	601a      	str	r2, [r3, #0]

	return 0;
   81808:	2300      	movs	r3, #0
}
   8180a:	4618      	mov	r0, r3
   8180c:	3714      	adds	r7, #20
   8180e:	46bd      	mov	sp, r7
   81810:	bc80      	pop	{r7}
   81812:	4770      	bx	lr

00081814 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   81814:	b480      	push	{r7}
   81816:	b083      	sub	sp, #12
   81818:	af00      	add	r7, sp, #0
   8181a:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   8181c:	687b      	ldr	r3, [r7, #4]
   8181e:	2240      	movs	r2, #64	; 0x40
   81820:	601a      	str	r2, [r3, #0]
}
   81822:	bf00      	nop
   81824:	370c      	adds	r7, #12
   81826:	46bd      	mov	sp, r7
   81828:	bc80      	pop	{r7}
   8182a:	4770      	bx	lr

0008182c <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   8182c:	b480      	push	{r7}
   8182e:	b083      	sub	sp, #12
   81830:	af00      	add	r7, sp, #0
   81832:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   81834:	687b      	ldr	r3, [r7, #4]
   81836:	2210      	movs	r2, #16
   81838:	601a      	str	r2, [r3, #0]
}
   8183a:	bf00      	nop
   8183c:	370c      	adds	r7, #12
   8183e:	46bd      	mov	sp, r7
   81840:	bc80      	pop	{r7}
   81842:	4770      	bx	lr

00081844 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   81844:	b480      	push	{r7}
   81846:	b083      	sub	sp, #12
   81848:	af00      	add	r7, sp, #0
   8184a:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   8184c:	687b      	ldr	r3, [r7, #4]
   8184e:	2250      	movs	r2, #80	; 0x50
   81850:	601a      	str	r2, [r3, #0]
}
   81852:	bf00      	nop
   81854:	370c      	adds	r7, #12
   81856:	46bd      	mov	sp, r7
   81858:	bc80      	pop	{r7}
   8185a:	4770      	bx	lr

0008185c <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   8185c:	b480      	push	{r7}
   8185e:	b083      	sub	sp, #12
   81860:	af00      	add	r7, sp, #0
   81862:	6078      	str	r0, [r7, #4]
   81864:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   81866:	687b      	ldr	r3, [r7, #4]
   81868:	683a      	ldr	r2, [r7, #0]
   8186a:	609a      	str	r2, [r3, #8]
}
   8186c:	bf00      	nop
   8186e:	370c      	adds	r7, #12
   81870:	46bd      	mov	sp, r7
   81872:	bc80      	pop	{r7}
   81874:	4770      	bx	lr
   81876:	bf00      	nop

00081878 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   81878:	b480      	push	{r7}
   8187a:	b083      	sub	sp, #12
   8187c:	af00      	add	r7, sp, #0
   8187e:	6078      	str	r0, [r7, #4]
   81880:	460b      	mov	r3, r1
   81882:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81884:	687b      	ldr	r3, [r7, #4]
   81886:	695b      	ldr	r3, [r3, #20]
   81888:	f003 0302 	and.w	r3, r3, #2
   8188c:	2b00      	cmp	r3, #0
   8188e:	d101      	bne.n	81894 <uart_write+0x1c>
		return 1;
   81890:	2301      	movs	r3, #1
   81892:	e003      	b.n	8189c <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   81894:	78fa      	ldrb	r2, [r7, #3]
   81896:	687b      	ldr	r3, [r7, #4]
   81898:	61da      	str	r2, [r3, #28]
	return 0;
   8189a:	2300      	movs	r3, #0
}
   8189c:	4618      	mov	r0, r3
   8189e:	370c      	adds	r7, #12
   818a0:	46bd      	mov	sp, r7
   818a2:	bc80      	pop	{r7}
   818a4:	4770      	bx	lr
   818a6:	bf00      	nop

000818a8 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   818a8:	b480      	push	{r7}
   818aa:	b083      	sub	sp, #12
   818ac:	af00      	add	r7, sp, #0
   818ae:	6078      	str	r0, [r7, #4]
   818b0:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   818b2:	687b      	ldr	r3, [r7, #4]
   818b4:	695b      	ldr	r3, [r3, #20]
   818b6:	f003 0301 	and.w	r3, r3, #1
   818ba:	2b00      	cmp	r3, #0
   818bc:	d101      	bne.n	818c2 <uart_read+0x1a>
		return 1;
   818be:	2301      	movs	r3, #1
   818c0:	e005      	b.n	818ce <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   818c2:	687b      	ldr	r3, [r7, #4]
   818c4:	699b      	ldr	r3, [r3, #24]
   818c6:	b2da      	uxtb	r2, r3
   818c8:	683b      	ldr	r3, [r7, #0]
   818ca:	701a      	strb	r2, [r3, #0]
	return 0;
   818cc:	2300      	movs	r3, #0
}
   818ce:	4618      	mov	r0, r3
   818d0:	370c      	adds	r7, #12
   818d2:	46bd      	mov	sp, r7
   818d4:	bc80      	pop	{r7}
   818d6:	4770      	bx	lr

000818d8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   818d8:	b480      	push	{r7}
   818da:	b089      	sub	sp, #36	; 0x24
   818dc:	af00      	add	r7, sp, #0
   818de:	60f8      	str	r0, [r7, #12]
   818e0:	60b9      	str	r1, [r7, #8]
   818e2:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   818e4:	68bb      	ldr	r3, [r7, #8]
   818e6:	011a      	lsls	r2, r3, #4
   818e8:	687b      	ldr	r3, [r7, #4]
   818ea:	429a      	cmp	r2, r3
   818ec:	d802      	bhi.n	818f4 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   818ee:	2310      	movs	r3, #16
   818f0:	61fb      	str	r3, [r7, #28]
   818f2:	e001      	b.n	818f8 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   818f4:	2308      	movs	r3, #8
   818f6:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   818f8:	687b      	ldr	r3, [r7, #4]
   818fa:	00da      	lsls	r2, r3, #3
   818fc:	69fb      	ldr	r3, [r7, #28]
   818fe:	68b9      	ldr	r1, [r7, #8]
   81900:	fb01 f303 	mul.w	r3, r1, r3
   81904:	085b      	lsrs	r3, r3, #1
   81906:	441a      	add	r2, r3
   81908:	69fb      	ldr	r3, [r7, #28]
   8190a:	68b9      	ldr	r1, [r7, #8]
   8190c:	fb01 f303 	mul.w	r3, r1, r3
   81910:	fbb2 f3f3 	udiv	r3, r2, r3
   81914:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   81916:	69bb      	ldr	r3, [r7, #24]
   81918:	08db      	lsrs	r3, r3, #3
   8191a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8191c:	69bb      	ldr	r3, [r7, #24]
   8191e:	f003 0307 	and.w	r3, r3, #7
   81922:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81924:	697b      	ldr	r3, [r7, #20]
   81926:	2b00      	cmp	r3, #0
   81928:	d003      	beq.n	81932 <usart_set_async_baudrate+0x5a>
   8192a:	697b      	ldr	r3, [r7, #20]
   8192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81930:	d301      	bcc.n	81936 <usart_set_async_baudrate+0x5e>
		return 1;
   81932:	2301      	movs	r3, #1
   81934:	e00f      	b.n	81956 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   81936:	69fb      	ldr	r3, [r7, #28]
   81938:	2b08      	cmp	r3, #8
   8193a:	d105      	bne.n	81948 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   8193c:	68fb      	ldr	r3, [r7, #12]
   8193e:	685b      	ldr	r3, [r3, #4]
   81940:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81944:	68fb      	ldr	r3, [r7, #12]
   81946:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   81948:	693b      	ldr	r3, [r7, #16]
   8194a:	041a      	lsls	r2, r3, #16
   8194c:	697b      	ldr	r3, [r7, #20]
   8194e:	431a      	orrs	r2, r3
   81950:	68fb      	ldr	r3, [r7, #12]
   81952:	621a      	str	r2, [r3, #32]

	return 0;
   81954:	2300      	movs	r3, #0
}
   81956:	4618      	mov	r0, r3
   81958:	3724      	adds	r7, #36	; 0x24
   8195a:	46bd      	mov	sp, r7
   8195c:	bc80      	pop	{r7}
   8195e:	4770      	bx	lr

00081960 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   81960:	b580      	push	{r7, lr}
   81962:	b082      	sub	sp, #8
   81964:	af00      	add	r7, sp, #0
   81966:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   81968:	6878      	ldr	r0, [r7, #4]
   8196a:	4b0d      	ldr	r3, [pc, #52]	; (819a0 <usart_reset+0x40>)
   8196c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8196e:	687b      	ldr	r3, [r7, #4]
   81970:	2200      	movs	r2, #0
   81972:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   81974:	687b      	ldr	r3, [r7, #4]
   81976:	2200      	movs	r2, #0
   81978:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8197a:	687b      	ldr	r3, [r7, #4]
   8197c:	2200      	movs	r2, #0
   8197e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   81980:	6878      	ldr	r0, [r7, #4]
   81982:	4b08      	ldr	r3, [pc, #32]	; (819a4 <usart_reset+0x44>)
   81984:	4798      	blx	r3
	usart_reset_rx(p_usart);
   81986:	6878      	ldr	r0, [r7, #4]
   81988:	4b07      	ldr	r3, [pc, #28]	; (819a8 <usart_reset+0x48>)
   8198a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8198c:	6878      	ldr	r0, [r7, #4]
   8198e:	4b07      	ldr	r3, [pc, #28]	; (819ac <usart_reset+0x4c>)
   81990:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   81992:	6878      	ldr	r0, [r7, #4]
   81994:	4b06      	ldr	r3, [pc, #24]	; (819b0 <usart_reset+0x50>)
   81996:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   81998:	bf00      	nop
   8199a:	3708      	adds	r7, #8
   8199c:	46bd      	mov	sp, r7
   8199e:	bd80      	pop	{r7, pc}
   819a0:	00081b35 	.word	0x00081b35
   819a4:	00081a51 	.word	0x00081a51
   819a8:	00081a81 	.word	0x00081a81
   819ac:	00081a99 	.word	0x00081a99
   819b0:	00081ab5 	.word	0x00081ab5

000819b4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   819b4:	b580      	push	{r7, lr}
   819b6:	b084      	sub	sp, #16
   819b8:	af00      	add	r7, sp, #0
   819ba:	60f8      	str	r0, [r7, #12]
   819bc:	60b9      	str	r1, [r7, #8]
   819be:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   819c0:	68f8      	ldr	r0, [r7, #12]
   819c2:	4b1a      	ldr	r3, [pc, #104]	; (81a2c <usart_init_rs232+0x78>)
   819c4:	4798      	blx	r3

	ul_reg_val = 0;
   819c6:	4b1a      	ldr	r3, [pc, #104]	; (81a30 <usart_init_rs232+0x7c>)
   819c8:	2200      	movs	r2, #0
   819ca:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   819cc:	68bb      	ldr	r3, [r7, #8]
   819ce:	2b00      	cmp	r3, #0
   819d0:	d009      	beq.n	819e6 <usart_init_rs232+0x32>
   819d2:	68bb      	ldr	r3, [r7, #8]
   819d4:	681b      	ldr	r3, [r3, #0]
   819d6:	687a      	ldr	r2, [r7, #4]
   819d8:	4619      	mov	r1, r3
   819da:	68f8      	ldr	r0, [r7, #12]
   819dc:	4b15      	ldr	r3, [pc, #84]	; (81a34 <usart_init_rs232+0x80>)
   819de:	4798      	blx	r3
   819e0:	4603      	mov	r3, r0
   819e2:	2b00      	cmp	r3, #0
   819e4:	d001      	beq.n	819ea <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   819e6:	2301      	movs	r3, #1
   819e8:	e01b      	b.n	81a22 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819ea:	68bb      	ldr	r3, [r7, #8]
   819ec:	685a      	ldr	r2, [r3, #4]
   819ee:	68bb      	ldr	r3, [r7, #8]
   819f0:	689b      	ldr	r3, [r3, #8]
   819f2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   819f4:	68bb      	ldr	r3, [r7, #8]
   819f6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   819f8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   819fa:	68bb      	ldr	r3, [r7, #8]
   819fc:	68db      	ldr	r3, [r3, #12]
   819fe:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81a00:	4b0b      	ldr	r3, [pc, #44]	; (81a30 <usart_init_rs232+0x7c>)
   81a02:	681b      	ldr	r3, [r3, #0]
   81a04:	4313      	orrs	r3, r2
   81a06:	4a0a      	ldr	r2, [pc, #40]	; (81a30 <usart_init_rs232+0x7c>)
   81a08:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   81a0a:	4b09      	ldr	r3, [pc, #36]	; (81a30 <usart_init_rs232+0x7c>)
   81a0c:	681b      	ldr	r3, [r3, #0]
   81a0e:	4a08      	ldr	r2, [pc, #32]	; (81a30 <usart_init_rs232+0x7c>)
   81a10:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   81a12:	68fb      	ldr	r3, [r7, #12]
   81a14:	685a      	ldr	r2, [r3, #4]
   81a16:	4b06      	ldr	r3, [pc, #24]	; (81a30 <usart_init_rs232+0x7c>)
   81a18:	681b      	ldr	r3, [r3, #0]
   81a1a:	431a      	orrs	r2, r3
   81a1c:	68fb      	ldr	r3, [r7, #12]
   81a1e:	605a      	str	r2, [r3, #4]

	return 0;
   81a20:	2300      	movs	r3, #0
}
   81a22:	4618      	mov	r0, r3
   81a24:	3710      	adds	r7, #16
   81a26:	46bd      	mov	sp, r7
   81a28:	bd80      	pop	{r7, pc}
   81a2a:	bf00      	nop
   81a2c:	00081961 	.word	0x00081961
   81a30:	20070cd0 	.word	0x20070cd0
   81a34:	000818d9 	.word	0x000818d9

00081a38 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   81a38:	b480      	push	{r7}
   81a3a:	b083      	sub	sp, #12
   81a3c:	af00      	add	r7, sp, #0
   81a3e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81a40:	687b      	ldr	r3, [r7, #4]
   81a42:	2240      	movs	r2, #64	; 0x40
   81a44:	601a      	str	r2, [r3, #0]
}
   81a46:	bf00      	nop
   81a48:	370c      	adds	r7, #12
   81a4a:	46bd      	mov	sp, r7
   81a4c:	bc80      	pop	{r7}
   81a4e:	4770      	bx	lr

00081a50 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   81a50:	b480      	push	{r7}
   81a52:	b083      	sub	sp, #12
   81a54:	af00      	add	r7, sp, #0
   81a56:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   81a58:	687b      	ldr	r3, [r7, #4]
   81a5a:	2288      	movs	r2, #136	; 0x88
   81a5c:	601a      	str	r2, [r3, #0]
}
   81a5e:	bf00      	nop
   81a60:	370c      	adds	r7, #12
   81a62:	46bd      	mov	sp, r7
   81a64:	bc80      	pop	{r7}
   81a66:	4770      	bx	lr

00081a68 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   81a68:	b480      	push	{r7}
   81a6a:	b083      	sub	sp, #12
   81a6c:	af00      	add	r7, sp, #0
   81a6e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   81a70:	687b      	ldr	r3, [r7, #4]
   81a72:	2210      	movs	r2, #16
   81a74:	601a      	str	r2, [r3, #0]
}
   81a76:	bf00      	nop
   81a78:	370c      	adds	r7, #12
   81a7a:	46bd      	mov	sp, r7
   81a7c:	bc80      	pop	{r7}
   81a7e:	4770      	bx	lr

00081a80 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   81a80:	b480      	push	{r7}
   81a82:	b083      	sub	sp, #12
   81a84:	af00      	add	r7, sp, #0
   81a86:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81a88:	687b      	ldr	r3, [r7, #4]
   81a8a:	2224      	movs	r2, #36	; 0x24
   81a8c:	601a      	str	r2, [r3, #0]
}
   81a8e:	bf00      	nop
   81a90:	370c      	adds	r7, #12
   81a92:	46bd      	mov	sp, r7
   81a94:	bc80      	pop	{r7}
   81a96:	4770      	bx	lr

00081a98 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   81a98:	b480      	push	{r7}
   81a9a:	b083      	sub	sp, #12
   81a9c:	af00      	add	r7, sp, #0
   81a9e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   81aa0:	687b      	ldr	r3, [r7, #4]
   81aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
   81aa6:	601a      	str	r2, [r3, #0]
}
   81aa8:	bf00      	nop
   81aaa:	370c      	adds	r7, #12
   81aac:	46bd      	mov	sp, r7
   81aae:	bc80      	pop	{r7}
   81ab0:	4770      	bx	lr
   81ab2:	bf00      	nop

00081ab4 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81ab4:	b480      	push	{r7}
   81ab6:	b083      	sub	sp, #12
   81ab8:	af00      	add	r7, sp, #0
   81aba:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81abc:	687b      	ldr	r3, [r7, #4]
   81abe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ac2:	601a      	str	r2, [r3, #0]
}
   81ac4:	bf00      	nop
   81ac6:	370c      	adds	r7, #12
   81ac8:	46bd      	mov	sp, r7
   81aca:	bc80      	pop	{r7}
   81acc:	4770      	bx	lr
   81ace:	bf00      	nop

00081ad0 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81ad0:	b480      	push	{r7}
   81ad2:	b083      	sub	sp, #12
   81ad4:	af00      	add	r7, sp, #0
   81ad6:	6078      	str	r0, [r7, #4]
   81ad8:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81ada:	687b      	ldr	r3, [r7, #4]
   81adc:	695b      	ldr	r3, [r3, #20]
   81ade:	f003 0302 	and.w	r3, r3, #2
   81ae2:	2b00      	cmp	r3, #0
   81ae4:	d101      	bne.n	81aea <usart_write+0x1a>
		return 1;
   81ae6:	2301      	movs	r3, #1
   81ae8:	e005      	b.n	81af6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81aea:	683b      	ldr	r3, [r7, #0]
   81aec:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81af0:	687b      	ldr	r3, [r7, #4]
   81af2:	61da      	str	r2, [r3, #28]
	return 0;
   81af4:	2300      	movs	r3, #0
}
   81af6:	4618      	mov	r0, r3
   81af8:	370c      	adds	r7, #12
   81afa:	46bd      	mov	sp, r7
   81afc:	bc80      	pop	{r7}
   81afe:	4770      	bx	lr

00081b00 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   81b00:	b480      	push	{r7}
   81b02:	b083      	sub	sp, #12
   81b04:	af00      	add	r7, sp, #0
   81b06:	6078      	str	r0, [r7, #4]
   81b08:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81b0a:	687b      	ldr	r3, [r7, #4]
   81b0c:	695b      	ldr	r3, [r3, #20]
   81b0e:	f003 0301 	and.w	r3, r3, #1
   81b12:	2b00      	cmp	r3, #0
   81b14:	d101      	bne.n	81b1a <usart_read+0x1a>
		return 1;
   81b16:	2301      	movs	r3, #1
   81b18:	e006      	b.n	81b28 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81b1a:	687b      	ldr	r3, [r7, #4]
   81b1c:	699b      	ldr	r3, [r3, #24]
   81b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81b22:	683b      	ldr	r3, [r7, #0]
   81b24:	601a      	str	r2, [r3, #0]

	return 0;
   81b26:	2300      	movs	r3, #0
}
   81b28:	4618      	mov	r0, r3
   81b2a:	370c      	adds	r7, #12
   81b2c:	46bd      	mov	sp, r7
   81b2e:	bc80      	pop	{r7}
   81b30:	4770      	bx	lr
   81b32:	bf00      	nop

00081b34 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81b34:	b480      	push	{r7}
   81b36:	b083      	sub	sp, #12
   81b38:	af00      	add	r7, sp, #0
   81b3a:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81b3c:	687b      	ldr	r3, [r7, #4]
   81b3e:	4a04      	ldr	r2, [pc, #16]	; (81b50 <usart_disable_writeprotect+0x1c>)
   81b40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81b44:	bf00      	nop
   81b46:	370c      	adds	r7, #12
   81b48:	46bd      	mov	sp, r7
   81b4a:	bc80      	pop	{r7}
   81b4c:	4770      	bx	lr
   81b4e:	bf00      	nop
   81b50:	55534100 	.word	0x55534100

00081b54 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   81b54:	b480      	push	{r7}
   81b56:	b083      	sub	sp, #12
   81b58:	af00      	add	r7, sp, #0
   81b5a:	4603      	mov	r3, r0
   81b5c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81b5e:	4908      	ldr	r1, [pc, #32]	; (81b80 <NVIC_EnableIRQ+0x2c>)
   81b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b64:	095b      	lsrs	r3, r3, #5
   81b66:	79fa      	ldrb	r2, [r7, #7]
   81b68:	f002 021f 	and.w	r2, r2, #31
   81b6c:	2001      	movs	r0, #1
   81b6e:	fa00 f202 	lsl.w	r2, r0, r2
   81b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81b76:	bf00      	nop
   81b78:	370c      	adds	r7, #12
   81b7a:	46bd      	mov	sp, r7
   81b7c:	bc80      	pop	{r7}
   81b7e:	4770      	bx	lr
   81b80:	e000e100 	.word	0xe000e100

00081b84 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   81b84:	b480      	push	{r7}
   81b86:	b083      	sub	sp, #12
   81b88:	af00      	add	r7, sp, #0
   81b8a:	4603      	mov	r3, r0
   81b8c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81b8e:	4909      	ldr	r1, [pc, #36]	; (81bb4 <NVIC_DisableIRQ+0x30>)
   81b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81b94:	095b      	lsrs	r3, r3, #5
   81b96:	79fa      	ldrb	r2, [r7, #7]
   81b98:	f002 021f 	and.w	r2, r2, #31
   81b9c:	2001      	movs	r0, #1
   81b9e:	fa00 f202 	lsl.w	r2, r0, r2
   81ba2:	3320      	adds	r3, #32
   81ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81ba8:	bf00      	nop
   81baa:	370c      	adds	r7, #12
   81bac:	46bd      	mov	sp, r7
   81bae:	bc80      	pop	{r7}
   81bb0:	4770      	bx	lr
   81bb2:	bf00      	nop
   81bb4:	e000e100 	.word	0xe000e100

00081bb8 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81bb8:	b480      	push	{r7}
   81bba:	b083      	sub	sp, #12
   81bbc:	af00      	add	r7, sp, #0
   81bbe:	4603      	mov	r3, r0
   81bc0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81bc2:	4909      	ldr	r1, [pc, #36]	; (81be8 <NVIC_ClearPendingIRQ+0x30>)
   81bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81bc8:	095b      	lsrs	r3, r3, #5
   81bca:	79fa      	ldrb	r2, [r7, #7]
   81bcc:	f002 021f 	and.w	r2, r2, #31
   81bd0:	2001      	movs	r0, #1
   81bd2:	fa00 f202 	lsl.w	r2, r0, r2
   81bd6:	3360      	adds	r3, #96	; 0x60
   81bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81bdc:	bf00      	nop
   81bde:	370c      	adds	r7, #12
   81be0:	46bd      	mov	sp, r7
   81be2:	bc80      	pop	{r7}
   81be4:	4770      	bx	lr
   81be6:	bf00      	nop
   81be8:	e000e100 	.word	0xe000e100

00081bec <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81bec:	b480      	push	{r7}
   81bee:	b083      	sub	sp, #12
   81bf0:	af00      	add	r7, sp, #0
   81bf2:	4603      	mov	r3, r0
   81bf4:	6039      	str	r1, [r7, #0]
   81bf6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81bfc:	2b00      	cmp	r3, #0
   81bfe:	da0b      	bge.n	81c18 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81c00:	490d      	ldr	r1, [pc, #52]	; (81c38 <NVIC_SetPriority+0x4c>)
   81c02:	79fb      	ldrb	r3, [r7, #7]
   81c04:	f003 030f 	and.w	r3, r3, #15
   81c08:	3b04      	subs	r3, #4
   81c0a:	683a      	ldr	r2, [r7, #0]
   81c0c:	b2d2      	uxtb	r2, r2
   81c0e:	0112      	lsls	r2, r2, #4
   81c10:	b2d2      	uxtb	r2, r2
   81c12:	440b      	add	r3, r1
   81c14:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   81c16:	e009      	b.n	81c2c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   81c18:	4908      	ldr	r1, [pc, #32]	; (81c3c <NVIC_SetPriority+0x50>)
   81c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81c1e:	683a      	ldr	r2, [r7, #0]
   81c20:	b2d2      	uxtb	r2, r2
   81c22:	0112      	lsls	r2, r2, #4
   81c24:	b2d2      	uxtb	r2, r2
   81c26:	440b      	add	r3, r1
   81c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81c2c:	bf00      	nop
   81c2e:	370c      	adds	r7, #12
   81c30:	46bd      	mov	sp, r7
   81c32:	bc80      	pop	{r7}
   81c34:	4770      	bx	lr
   81c36:	bf00      	nop
   81c38:	e000ed00 	.word	0xe000ed00
   81c3c:	e000e100 	.word	0xe000e100

00081c40 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81c40:	b480      	push	{r7}
   81c42:	b083      	sub	sp, #12
   81c44:	af00      	add	r7, sp, #0
   81c46:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81c48:	687b      	ldr	r3, [r7, #4]
   81c4a:	2b07      	cmp	r3, #7
   81c4c:	d825      	bhi.n	81c9a <osc_get_rate+0x5a>
   81c4e:	a201      	add	r2, pc, #4	; (adr r2, 81c54 <osc_get_rate+0x14>)
   81c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81c54:	00081c75 	.word	0x00081c75
   81c58:	00081c7b 	.word	0x00081c7b
   81c5c:	00081c81 	.word	0x00081c81
   81c60:	00081c87 	.word	0x00081c87
   81c64:	00081c8b 	.word	0x00081c8b
   81c68:	00081c8f 	.word	0x00081c8f
   81c6c:	00081c93 	.word	0x00081c93
   81c70:	00081c97 	.word	0x00081c97
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81c74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   81c78:	e010      	b.n	81c9c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   81c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81c7e:	e00d      	b.n	81c9c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81c80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81c84:	e00a      	b.n	81c9c <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   81c86:	4b08      	ldr	r3, [pc, #32]	; (81ca8 <osc_get_rate+0x68>)
   81c88:	e008      	b.n	81c9c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   81c8a:	4b08      	ldr	r3, [pc, #32]	; (81cac <osc_get_rate+0x6c>)
   81c8c:	e006      	b.n	81c9c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81c8e:	4b08      	ldr	r3, [pc, #32]	; (81cb0 <osc_get_rate+0x70>)
   81c90:	e004      	b.n	81c9c <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81c92:	4b07      	ldr	r3, [pc, #28]	; (81cb0 <osc_get_rate+0x70>)
   81c94:	e002      	b.n	81c9c <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   81c96:	4b06      	ldr	r3, [pc, #24]	; (81cb0 <osc_get_rate+0x70>)
   81c98:	e000      	b.n	81c9c <osc_get_rate+0x5c>
#endif
	}

	return 0;
   81c9a:	2300      	movs	r3, #0
}
   81c9c:	4618      	mov	r0, r3
   81c9e:	370c      	adds	r7, #12
   81ca0:	46bd      	mov	sp, r7
   81ca2:	bc80      	pop	{r7}
   81ca4:	4770      	bx	lr
   81ca6:	bf00      	nop
   81ca8:	003d0900 	.word	0x003d0900
   81cac:	007a1200 	.word	0x007a1200
   81cb0:	00b71b00 	.word	0x00b71b00

00081cb4 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81cb4:	b580      	push	{r7, lr}
   81cb6:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   81cb8:	2006      	movs	r0, #6
   81cba:	4b04      	ldr	r3, [pc, #16]	; (81ccc <sysclk_get_main_hz+0x18>)
   81cbc:	4798      	blx	r3
   81cbe:	4602      	mov	r2, r0
   81cc0:	4613      	mov	r3, r2
   81cc2:	00db      	lsls	r3, r3, #3
   81cc4:	1a9b      	subs	r3, r3, r2
   81cc6:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   81cc8:	4618      	mov	r0, r3
   81cca:	bd80      	pop	{r7, pc}
   81ccc:	00081c41 	.word	0x00081c41

00081cd0 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   81cd0:	b580      	push	{r7, lr}
   81cd2:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81cd4:	4b02      	ldr	r3, [pc, #8]	; (81ce0 <sysclk_get_peripheral_hz+0x10>)
   81cd6:	4798      	blx	r3
   81cd8:	4603      	mov	r3, r0
   81cda:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81cdc:	4618      	mov	r0, r3
   81cde:	bd80      	pop	{r7, pc}
   81ce0:	00081cb5 	.word	0x00081cb5

00081ce4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81ce4:	b580      	push	{r7, lr}
   81ce6:	b082      	sub	sp, #8
   81ce8:	af00      	add	r7, sp, #0
   81cea:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81cec:	6878      	ldr	r0, [r7, #4]
   81cee:	4b03      	ldr	r3, [pc, #12]	; (81cfc <sysclk_enable_peripheral_clock+0x18>)
   81cf0:	4798      	blx	r3
}
   81cf2:	bf00      	nop
   81cf4:	3708      	adds	r7, #8
   81cf6:	46bd      	mov	sp, r7
   81cf8:	bd80      	pop	{r7, pc}
   81cfa:	bf00      	nop
   81cfc:	00083631 	.word	0x00083631

00081d00 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   81d00:	b580      	push	{r7, lr}
   81d02:	b08c      	sub	sp, #48	; 0x30
   81d04:	af00      	add	r7, sp, #0
   81d06:	6078      	str	r0, [r7, #4]
   81d08:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81d0a:	4b40      	ldr	r3, [pc, #256]	; (81e0c <usart_serial_init+0x10c>)
   81d0c:	4798      	blx	r3
   81d0e:	4603      	mov	r3, r0
   81d10:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   81d12:	683b      	ldr	r3, [r7, #0]
   81d14:	681b      	ldr	r3, [r3, #0]
   81d16:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   81d18:	683b      	ldr	r3, [r7, #0]
   81d1a:	689b      	ldr	r3, [r3, #8]
   81d1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   81d1e:	683b      	ldr	r3, [r7, #0]
   81d20:	681b      	ldr	r3, [r3, #0]
   81d22:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   81d24:	683b      	ldr	r3, [r7, #0]
   81d26:	685b      	ldr	r3, [r3, #4]
   81d28:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   81d2a:	683b      	ldr	r3, [r7, #0]
   81d2c:	689b      	ldr	r3, [r3, #8]
   81d2e:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81d30:	683b      	ldr	r3, [r7, #0]
   81d32:	7b1b      	ldrb	r3, [r3, #12]
   81d34:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   81d36:	2300      	movs	r3, #0
   81d38:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81d3a:	687b      	ldr	r3, [r7, #4]
   81d3c:	4a34      	ldr	r2, [pc, #208]	; (81e10 <usart_serial_init+0x110>)
   81d3e:	4293      	cmp	r3, r2
   81d40:	d108      	bne.n	81d54 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   81d42:	2008      	movs	r0, #8
   81d44:	4b33      	ldr	r3, [pc, #204]	; (81e14 <usart_serial_init+0x114>)
   81d46:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   81d48:	f107 0320 	add.w	r3, r7, #32
   81d4c:	4619      	mov	r1, r3
   81d4e:	6878      	ldr	r0, [r7, #4]
   81d50:	4b31      	ldr	r3, [pc, #196]	; (81e18 <usart_serial_init+0x118>)
   81d52:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81d54:	687b      	ldr	r3, [r7, #4]
   81d56:	4a31      	ldr	r2, [pc, #196]	; (81e1c <usart_serial_init+0x11c>)
   81d58:	4293      	cmp	r3, r2
   81d5a:	d111      	bne.n	81d80 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   81d5c:	2011      	movs	r0, #17
   81d5e:	4b2d      	ldr	r3, [pc, #180]	; (81e14 <usart_serial_init+0x114>)
   81d60:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d62:	4b2a      	ldr	r3, [pc, #168]	; (81e0c <usart_serial_init+0x10c>)
   81d64:	4798      	blx	r3
   81d66:	4602      	mov	r2, r0
   81d68:	f107 0308 	add.w	r3, r7, #8
   81d6c:	4619      	mov	r1, r3
   81d6e:	6878      	ldr	r0, [r7, #4]
   81d70:	4b2b      	ldr	r3, [pc, #172]	; (81e20 <usart_serial_init+0x120>)
   81d72:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81d74:	6878      	ldr	r0, [r7, #4]
   81d76:	4b2b      	ldr	r3, [pc, #172]	; (81e24 <usart_serial_init+0x124>)
   81d78:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81d7a:	6878      	ldr	r0, [r7, #4]
   81d7c:	4b2a      	ldr	r3, [pc, #168]	; (81e28 <usart_serial_init+0x128>)
   81d7e:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81d80:	687b      	ldr	r3, [r7, #4]
   81d82:	4a2a      	ldr	r2, [pc, #168]	; (81e2c <usart_serial_init+0x12c>)
   81d84:	4293      	cmp	r3, r2
   81d86:	d111      	bne.n	81dac <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   81d88:	2012      	movs	r0, #18
   81d8a:	4b22      	ldr	r3, [pc, #136]	; (81e14 <usart_serial_init+0x114>)
   81d8c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81d8e:	4b1f      	ldr	r3, [pc, #124]	; (81e0c <usart_serial_init+0x10c>)
   81d90:	4798      	blx	r3
   81d92:	4602      	mov	r2, r0
   81d94:	f107 0308 	add.w	r3, r7, #8
   81d98:	4619      	mov	r1, r3
   81d9a:	6878      	ldr	r0, [r7, #4]
   81d9c:	4b20      	ldr	r3, [pc, #128]	; (81e20 <usart_serial_init+0x120>)
   81d9e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81da0:	6878      	ldr	r0, [r7, #4]
   81da2:	4b20      	ldr	r3, [pc, #128]	; (81e24 <usart_serial_init+0x124>)
   81da4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81da6:	6878      	ldr	r0, [r7, #4]
   81da8:	4b1f      	ldr	r3, [pc, #124]	; (81e28 <usart_serial_init+0x128>)
   81daa:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81dac:	687b      	ldr	r3, [r7, #4]
   81dae:	4a20      	ldr	r2, [pc, #128]	; (81e30 <usart_serial_init+0x130>)
   81db0:	4293      	cmp	r3, r2
   81db2:	d111      	bne.n	81dd8 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   81db4:	2013      	movs	r0, #19
   81db6:	4b17      	ldr	r3, [pc, #92]	; (81e14 <usart_serial_init+0x114>)
   81db8:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81dba:	4b14      	ldr	r3, [pc, #80]	; (81e0c <usart_serial_init+0x10c>)
   81dbc:	4798      	blx	r3
   81dbe:	4602      	mov	r2, r0
   81dc0:	f107 0308 	add.w	r3, r7, #8
   81dc4:	4619      	mov	r1, r3
   81dc6:	6878      	ldr	r0, [r7, #4]
   81dc8:	4b15      	ldr	r3, [pc, #84]	; (81e20 <usart_serial_init+0x120>)
   81dca:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81dcc:	6878      	ldr	r0, [r7, #4]
   81dce:	4b15      	ldr	r3, [pc, #84]	; (81e24 <usart_serial_init+0x124>)
   81dd0:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81dd2:	6878      	ldr	r0, [r7, #4]
   81dd4:	4b14      	ldr	r3, [pc, #80]	; (81e28 <usart_serial_init+0x128>)
   81dd6:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81dd8:	687b      	ldr	r3, [r7, #4]
   81dda:	4a16      	ldr	r2, [pc, #88]	; (81e34 <usart_serial_init+0x134>)
   81ddc:	4293      	cmp	r3, r2
   81dde:	d111      	bne.n	81e04 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81de0:	2014      	movs	r0, #20
   81de2:	4b0c      	ldr	r3, [pc, #48]	; (81e14 <usart_serial_init+0x114>)
   81de4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81de6:	4b09      	ldr	r3, [pc, #36]	; (81e0c <usart_serial_init+0x10c>)
   81de8:	4798      	blx	r3
   81dea:	4602      	mov	r2, r0
   81dec:	f107 0308 	add.w	r3, r7, #8
   81df0:	4619      	mov	r1, r3
   81df2:	6878      	ldr	r0, [r7, #4]
   81df4:	4b0a      	ldr	r3, [pc, #40]	; (81e20 <usart_serial_init+0x120>)
   81df6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81df8:	6878      	ldr	r0, [r7, #4]
   81dfa:	4b0a      	ldr	r3, [pc, #40]	; (81e24 <usart_serial_init+0x124>)
   81dfc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81dfe:	6878      	ldr	r0, [r7, #4]
   81e00:	4b09      	ldr	r3, [pc, #36]	; (81e28 <usart_serial_init+0x128>)
   81e02:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81e04:	bf00      	nop
   81e06:	3730      	adds	r7, #48	; 0x30
   81e08:	46bd      	mov	sp, r7
   81e0a:	bd80      	pop	{r7, pc}
   81e0c:	00081cd1 	.word	0x00081cd1
   81e10:	400e0800 	.word	0x400e0800
   81e14:	00081ce5 	.word	0x00081ce5
   81e18:	000817b5 	.word	0x000817b5
   81e1c:	40098000 	.word	0x40098000
   81e20:	000819b5 	.word	0x000819b5
   81e24:	00081a39 	.word	0x00081a39
   81e28:	00081a69 	.word	0x00081a69
   81e2c:	4009c000 	.word	0x4009c000
   81e30:	400a0000 	.word	0x400a0000
   81e34:	400a4000 	.word	0x400a4000

00081e38 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81e38:	b580      	push	{r7, lr}
   81e3a:	b082      	sub	sp, #8
   81e3c:	af00      	add	r7, sp, #0
   81e3e:	6078      	str	r0, [r7, #4]
   81e40:	460b      	mov	r3, r1
   81e42:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81e44:	687b      	ldr	r3, [r7, #4]
   81e46:	4a27      	ldr	r2, [pc, #156]	; (81ee4 <usart_serial_putchar+0xac>)
   81e48:	4293      	cmp	r3, r2
   81e4a:	d10a      	bne.n	81e62 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81e4c:	bf00      	nop
   81e4e:	78fb      	ldrb	r3, [r7, #3]
   81e50:	4619      	mov	r1, r3
   81e52:	6878      	ldr	r0, [r7, #4]
   81e54:	4b24      	ldr	r3, [pc, #144]	; (81ee8 <usart_serial_putchar+0xb0>)
   81e56:	4798      	blx	r3
   81e58:	4603      	mov	r3, r0
   81e5a:	2b00      	cmp	r3, #0
   81e5c:	d1f7      	bne.n	81e4e <usart_serial_putchar+0x16>
		return 1;
   81e5e:	2301      	movs	r3, #1
   81e60:	e03c      	b.n	81edc <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81e62:	687b      	ldr	r3, [r7, #4]
   81e64:	4a21      	ldr	r2, [pc, #132]	; (81eec <usart_serial_putchar+0xb4>)
   81e66:	4293      	cmp	r3, r2
   81e68:	d10a      	bne.n	81e80 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81e6a:	bf00      	nop
   81e6c:	78fb      	ldrb	r3, [r7, #3]
   81e6e:	4619      	mov	r1, r3
   81e70:	6878      	ldr	r0, [r7, #4]
   81e72:	4b1f      	ldr	r3, [pc, #124]	; (81ef0 <usart_serial_putchar+0xb8>)
   81e74:	4798      	blx	r3
   81e76:	4603      	mov	r3, r0
   81e78:	2b00      	cmp	r3, #0
   81e7a:	d1f7      	bne.n	81e6c <usart_serial_putchar+0x34>
		return 1;
   81e7c:	2301      	movs	r3, #1
   81e7e:	e02d      	b.n	81edc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81e80:	687b      	ldr	r3, [r7, #4]
   81e82:	4a1c      	ldr	r2, [pc, #112]	; (81ef4 <usart_serial_putchar+0xbc>)
   81e84:	4293      	cmp	r3, r2
   81e86:	d10a      	bne.n	81e9e <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81e88:	bf00      	nop
   81e8a:	78fb      	ldrb	r3, [r7, #3]
   81e8c:	4619      	mov	r1, r3
   81e8e:	6878      	ldr	r0, [r7, #4]
   81e90:	4b17      	ldr	r3, [pc, #92]	; (81ef0 <usart_serial_putchar+0xb8>)
   81e92:	4798      	blx	r3
   81e94:	4603      	mov	r3, r0
   81e96:	2b00      	cmp	r3, #0
   81e98:	d1f7      	bne.n	81e8a <usart_serial_putchar+0x52>
		return 1;
   81e9a:	2301      	movs	r3, #1
   81e9c:	e01e      	b.n	81edc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81e9e:	687b      	ldr	r3, [r7, #4]
   81ea0:	4a15      	ldr	r2, [pc, #84]	; (81ef8 <usart_serial_putchar+0xc0>)
   81ea2:	4293      	cmp	r3, r2
   81ea4:	d10a      	bne.n	81ebc <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81ea6:	bf00      	nop
   81ea8:	78fb      	ldrb	r3, [r7, #3]
   81eaa:	4619      	mov	r1, r3
   81eac:	6878      	ldr	r0, [r7, #4]
   81eae:	4b10      	ldr	r3, [pc, #64]	; (81ef0 <usart_serial_putchar+0xb8>)
   81eb0:	4798      	blx	r3
   81eb2:	4603      	mov	r3, r0
   81eb4:	2b00      	cmp	r3, #0
   81eb6:	d1f7      	bne.n	81ea8 <usart_serial_putchar+0x70>
		return 1;
   81eb8:	2301      	movs	r3, #1
   81eba:	e00f      	b.n	81edc <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81ebc:	687b      	ldr	r3, [r7, #4]
   81ebe:	4a0f      	ldr	r2, [pc, #60]	; (81efc <usart_serial_putchar+0xc4>)
   81ec0:	4293      	cmp	r3, r2
   81ec2:	d10a      	bne.n	81eda <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81ec4:	bf00      	nop
   81ec6:	78fb      	ldrb	r3, [r7, #3]
   81ec8:	4619      	mov	r1, r3
   81eca:	6878      	ldr	r0, [r7, #4]
   81ecc:	4b08      	ldr	r3, [pc, #32]	; (81ef0 <usart_serial_putchar+0xb8>)
   81ece:	4798      	blx	r3
   81ed0:	4603      	mov	r3, r0
   81ed2:	2b00      	cmp	r3, #0
   81ed4:	d1f7      	bne.n	81ec6 <usart_serial_putchar+0x8e>
		return 1;
   81ed6:	2301      	movs	r3, #1
   81ed8:	e000      	b.n	81edc <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81eda:	2300      	movs	r3, #0
}
   81edc:	4618      	mov	r0, r3
   81ede:	3708      	adds	r7, #8
   81ee0:	46bd      	mov	sp, r7
   81ee2:	bd80      	pop	{r7, pc}
   81ee4:	400e0800 	.word	0x400e0800
   81ee8:	00081879 	.word	0x00081879
   81eec:	40098000 	.word	0x40098000
   81ef0:	00081ad1 	.word	0x00081ad1
   81ef4:	4009c000 	.word	0x4009c000
   81ef8:	400a0000 	.word	0x400a0000
   81efc:	400a4000 	.word	0x400a4000

00081f00 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81f00:	b580      	push	{r7, lr}
   81f02:	b084      	sub	sp, #16
   81f04:	af00      	add	r7, sp, #0
   81f06:	6078      	str	r0, [r7, #4]
   81f08:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81f0a:	2300      	movs	r3, #0
   81f0c:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81f0e:	687b      	ldr	r3, [r7, #4]
   81f10:	4a2b      	ldr	r2, [pc, #172]	; (81fc0 <usart_serial_getchar+0xc0>)
   81f12:	4293      	cmp	r3, r2
   81f14:	d107      	bne.n	81f26 <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81f16:	bf00      	nop
   81f18:	6839      	ldr	r1, [r7, #0]
   81f1a:	6878      	ldr	r0, [r7, #4]
   81f1c:	4b29      	ldr	r3, [pc, #164]	; (81fc4 <usart_serial_getchar+0xc4>)
   81f1e:	4798      	blx	r3
   81f20:	4603      	mov	r3, r0
   81f22:	2b00      	cmp	r3, #0
   81f24:	d1f8      	bne.n	81f18 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81f26:	687b      	ldr	r3, [r7, #4]
   81f28:	4a27      	ldr	r2, [pc, #156]	; (81fc8 <usart_serial_getchar+0xc8>)
   81f2a:	4293      	cmp	r3, r2
   81f2c:	d10d      	bne.n	81f4a <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81f2e:	bf00      	nop
   81f30:	f107 030c 	add.w	r3, r7, #12
   81f34:	4619      	mov	r1, r3
   81f36:	6878      	ldr	r0, [r7, #4]
   81f38:	4b24      	ldr	r3, [pc, #144]	; (81fcc <usart_serial_getchar+0xcc>)
   81f3a:	4798      	blx	r3
   81f3c:	4603      	mov	r3, r0
   81f3e:	2b00      	cmp	r3, #0
   81f40:	d1f6      	bne.n	81f30 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81f42:	68fb      	ldr	r3, [r7, #12]
   81f44:	b2da      	uxtb	r2, r3
   81f46:	683b      	ldr	r3, [r7, #0]
   81f48:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81f4a:	687b      	ldr	r3, [r7, #4]
   81f4c:	4a20      	ldr	r2, [pc, #128]	; (81fd0 <usart_serial_getchar+0xd0>)
   81f4e:	4293      	cmp	r3, r2
   81f50:	d10d      	bne.n	81f6e <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81f52:	bf00      	nop
   81f54:	f107 030c 	add.w	r3, r7, #12
   81f58:	4619      	mov	r1, r3
   81f5a:	6878      	ldr	r0, [r7, #4]
   81f5c:	4b1b      	ldr	r3, [pc, #108]	; (81fcc <usart_serial_getchar+0xcc>)
   81f5e:	4798      	blx	r3
   81f60:	4603      	mov	r3, r0
   81f62:	2b00      	cmp	r3, #0
   81f64:	d1f6      	bne.n	81f54 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81f66:	68fb      	ldr	r3, [r7, #12]
   81f68:	b2da      	uxtb	r2, r3
   81f6a:	683b      	ldr	r3, [r7, #0]
   81f6c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81f6e:	687b      	ldr	r3, [r7, #4]
   81f70:	4a18      	ldr	r2, [pc, #96]	; (81fd4 <usart_serial_getchar+0xd4>)
   81f72:	4293      	cmp	r3, r2
   81f74:	d10d      	bne.n	81f92 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81f76:	bf00      	nop
   81f78:	f107 030c 	add.w	r3, r7, #12
   81f7c:	4619      	mov	r1, r3
   81f7e:	6878      	ldr	r0, [r7, #4]
   81f80:	4b12      	ldr	r3, [pc, #72]	; (81fcc <usart_serial_getchar+0xcc>)
   81f82:	4798      	blx	r3
   81f84:	4603      	mov	r3, r0
   81f86:	2b00      	cmp	r3, #0
   81f88:	d1f6      	bne.n	81f78 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81f8a:	68fb      	ldr	r3, [r7, #12]
   81f8c:	b2da      	uxtb	r2, r3
   81f8e:	683b      	ldr	r3, [r7, #0]
   81f90:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81f92:	687b      	ldr	r3, [r7, #4]
   81f94:	4a10      	ldr	r2, [pc, #64]	; (81fd8 <usart_serial_getchar+0xd8>)
   81f96:	4293      	cmp	r3, r2
   81f98:	d10d      	bne.n	81fb6 <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81f9a:	bf00      	nop
   81f9c:	f107 030c 	add.w	r3, r7, #12
   81fa0:	4619      	mov	r1, r3
   81fa2:	6878      	ldr	r0, [r7, #4]
   81fa4:	4b09      	ldr	r3, [pc, #36]	; (81fcc <usart_serial_getchar+0xcc>)
   81fa6:	4798      	blx	r3
   81fa8:	4603      	mov	r3, r0
   81faa:	2b00      	cmp	r3, #0
   81fac:	d1f6      	bne.n	81f9c <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81fae:	68fb      	ldr	r3, [r7, #12]
   81fb0:	b2da      	uxtb	r2, r3
   81fb2:	683b      	ldr	r3, [r7, #0]
   81fb4:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81fb6:	bf00      	nop
   81fb8:	3710      	adds	r7, #16
   81fba:	46bd      	mov	sp, r7
   81fbc:	bd80      	pop	{r7, pc}
   81fbe:	bf00      	nop
   81fc0:	400e0800 	.word	0x400e0800
   81fc4:	000818a9 	.word	0x000818a9
   81fc8:	40098000 	.word	0x40098000
   81fcc:	00081b01 	.word	0x00081b01
   81fd0:	4009c000 	.word	0x4009c000
   81fd4:	400a0000 	.word	0x400a0000
   81fd8:	400a4000 	.word	0x400a4000

00081fdc <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81fdc:	b580      	push	{r7, lr}
   81fde:	b082      	sub	sp, #8
   81fe0:	af00      	add	r7, sp, #0
   81fe2:	6078      	str	r0, [r7, #4]
   81fe4:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81fe6:	4a0f      	ldr	r2, [pc, #60]	; (82024 <stdio_serial_init+0x48>)
   81fe8:	687b      	ldr	r3, [r7, #4]
   81fea:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81fec:	4b0e      	ldr	r3, [pc, #56]	; (82028 <stdio_serial_init+0x4c>)
   81fee:	4a0f      	ldr	r2, [pc, #60]	; (8202c <stdio_serial_init+0x50>)
   81ff0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81ff2:	4b0f      	ldr	r3, [pc, #60]	; (82030 <stdio_serial_init+0x54>)
   81ff4:	4a0f      	ldr	r2, [pc, #60]	; (82034 <stdio_serial_init+0x58>)
   81ff6:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81ff8:	6839      	ldr	r1, [r7, #0]
   81ffa:	6878      	ldr	r0, [r7, #4]
   81ffc:	4b0e      	ldr	r3, [pc, #56]	; (82038 <stdio_serial_init+0x5c>)
   81ffe:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82000:	4b0e      	ldr	r3, [pc, #56]	; (8203c <stdio_serial_init+0x60>)
   82002:	681b      	ldr	r3, [r3, #0]
   82004:	689b      	ldr	r3, [r3, #8]
   82006:	2100      	movs	r1, #0
   82008:	4618      	mov	r0, r3
   8200a:	4b0d      	ldr	r3, [pc, #52]	; (82040 <stdio_serial_init+0x64>)
   8200c:	4798      	blx	r3
	setbuf(stdin, NULL);
   8200e:	4b0b      	ldr	r3, [pc, #44]	; (8203c <stdio_serial_init+0x60>)
   82010:	681b      	ldr	r3, [r3, #0]
   82012:	685b      	ldr	r3, [r3, #4]
   82014:	2100      	movs	r1, #0
   82016:	4618      	mov	r0, r3
   82018:	4b09      	ldr	r3, [pc, #36]	; (82040 <stdio_serial_init+0x64>)
   8201a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   8201c:	bf00      	nop
   8201e:	3708      	adds	r7, #8
   82020:	46bd      	mov	sp, r7
   82022:	bd80      	pop	{r7, pc}
   82024:	20071204 	.word	0x20071204
   82028:	20071200 	.word	0x20071200
   8202c:	00081e39 	.word	0x00081e39
   82030:	200711fc 	.word	0x200711fc
   82034:	00081f01 	.word	0x00081f01
   82038:	00081d01 	.word	0x00081d01
   8203c:	20070830 	.word	0x20070830
   82040:	00083f3d 	.word	0x00083f3d

00082044 <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   82044:	b580      	push	{r7, lr}
   82046:	b082      	sub	sp, #8
   82048:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   8204a:	4b29      	ldr	r3, [pc, #164]	; (820f0 <UART_Handler+0xac>)
   8204c:	781b      	ldrb	r3, [r3, #0]
   8204e:	3301      	adds	r3, #1
   82050:	b2da      	uxtb	r2, r3
   82052:	4b27      	ldr	r3, [pc, #156]	; (820f0 <UART_Handler+0xac>)
   82054:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   82056:	4b27      	ldr	r3, [pc, #156]	; (820f4 <UART_Handler+0xb0>)
   82058:	695b      	ldr	r3, [r3, #20]
   8205a:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   8205c:	687b      	ldr	r3, [r7, #4]
   8205e:	f003 0301 	and.w	r3, r3, #1
   82062:	2b00      	cmp	r3, #0
   82064:	d040      	beq.n	820e8 <UART_Handler+0xa4>
	{
		rx_val=UART->UART_RHR;
   82066:	4b23      	ldr	r3, [pc, #140]	; (820f4 <UART_Handler+0xb0>)
   82068:	699b      	ldr	r3, [r3, #24]
   8206a:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   8206c:	78fb      	ldrb	r3, [r7, #3]
   8206e:	337f      	adds	r3, #127	; 0x7f
   82070:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   82072:	4b1f      	ldr	r3, [pc, #124]	; (820f0 <UART_Handler+0xac>)
   82074:	781b      	ldrb	r3, [r3, #0]
   82076:	2b01      	cmp	r3, #1
   82078:	d104      	bne.n	82084 <UART_Handler+0x40>
		{
			rc=rx_val;
   8207a:	78fb      	ldrb	r3, [r7, #3]
   8207c:	b29a      	uxth	r2, r3
   8207e:	4b1e      	ldr	r3, [pc, #120]	; (820f8 <UART_Handler+0xb4>)
   82080:	801a      	strh	r2, [r3, #0]
   82082:	e00a      	b.n	8209a <UART_Handler+0x56>
		}
		else if (cnt==2)
   82084:	4b1a      	ldr	r3, [pc, #104]	; (820f0 <UART_Handler+0xac>)
   82086:	781b      	ldrb	r3, [r3, #0]
   82088:	2b02      	cmp	r3, #2
   8208a:	d106      	bne.n	8209a <UART_Handler+0x56>
		{
			bic_rc=rx_val;
   8208c:	78fb      	ldrb	r3, [r7, #3]
   8208e:	b29a      	uxth	r2, r3
   82090:	4b1a      	ldr	r3, [pc, #104]	; (820fc <UART_Handler+0xb8>)
   82092:	801a      	strh	r2, [r3, #0]
			cnt=0;
   82094:	4b16      	ldr	r3, [pc, #88]	; (820f0 <UART_Handler+0xac>)
   82096:	2200      	movs	r2, #0
   82098:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   8209a:	4b17      	ldr	r3, [pc, #92]	; (820f8 <UART_Handler+0xb4>)
   8209c:	881b      	ldrh	r3, [r3, #0]
   8209e:	4619      	mov	r1, r3
   820a0:	4b16      	ldr	r3, [pc, #88]	; (820fc <UART_Handler+0xb8>)
   820a2:	881b      	ldrh	r3, [r3, #0]
   820a4:	461a      	mov	r2, r3
   820a6:	4816      	ldr	r0, [pc, #88]	; (82100 <UART_Handler+0xbc>)
   820a8:	4b16      	ldr	r3, [pc, #88]	; (82104 <UART_Handler+0xc0>)
   820aa:	4798      	blx	r3
		tc_stop(TC0,0);
   820ac:	2100      	movs	r1, #0
   820ae:	4816      	ldr	r0, [pc, #88]	; (82108 <UART_Handler+0xc4>)
   820b0:	4b16      	ldr	r3, [pc, #88]	; (8210c <UART_Handler+0xc8>)
   820b2:	4798      	blx	r3
		tc_stop(TC0,1);
   820b4:	2101      	movs	r1, #1
   820b6:	4814      	ldr	r0, [pc, #80]	; (82108 <UART_Handler+0xc4>)
   820b8:	4b14      	ldr	r3, [pc, #80]	; (8210c <UART_Handler+0xc8>)
   820ba:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   820bc:	4b0e      	ldr	r3, [pc, #56]	; (820f8 <UART_Handler+0xb4>)
   820be:	881b      	ldrh	r3, [r3, #0]
   820c0:	461a      	mov	r2, r3
   820c2:	2100      	movs	r1, #0
   820c4:	4810      	ldr	r0, [pc, #64]	; (82108 <UART_Handler+0xc4>)
   820c6:	4b12      	ldr	r3, [pc, #72]	; (82110 <UART_Handler+0xcc>)
   820c8:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   820ca:	4b0c      	ldr	r3, [pc, #48]	; (820fc <UART_Handler+0xb8>)
   820cc:	881b      	ldrh	r3, [r3, #0]
   820ce:	461a      	mov	r2, r3
   820d0:	2101      	movs	r1, #1
   820d2:	480d      	ldr	r0, [pc, #52]	; (82108 <UART_Handler+0xc4>)
   820d4:	4b0e      	ldr	r3, [pc, #56]	; (82110 <UART_Handler+0xcc>)
   820d6:	4798      	blx	r3
		tc_start(TC0,0);
   820d8:	2100      	movs	r1, #0
   820da:	480b      	ldr	r0, [pc, #44]	; (82108 <UART_Handler+0xc4>)
   820dc:	4b0d      	ldr	r3, [pc, #52]	; (82114 <UART_Handler+0xd0>)
   820de:	4798      	blx	r3
		tc_start(TC0,1);
   820e0:	2101      	movs	r1, #1
   820e2:	4809      	ldr	r0, [pc, #36]	; (82108 <UART_Handler+0xc4>)
   820e4:	4b0b      	ldr	r3, [pc, #44]	; (82114 <UART_Handler+0xd0>)
   820e6:	4798      	blx	r3
	}
}
   820e8:	bf00      	nop
   820ea:	3708      	adds	r7, #8
   820ec:	46bd      	mov	sp, r7
   820ee:	bd80      	pop	{r7, pc}
   820f0:	20070cec 	.word	0x20070cec
   820f4:	400e0800 	.word	0x400e0800
   820f8:	20070cde 	.word	0x20070cde
   820fc:	20071220 	.word	0x20071220
   82100:	00086dd4 	.word	0x00086dd4
   82104:	00083e79 	.word	0x00083e79
   82108:	40080000 	.word	0x40080000
   8210c:	00081725 	.word	0x00081725
   82110:	00081745 	.word	0x00081745
   82114:	00081705 	.word	0x00081705

00082118 <main>:
int main (void)
{
   82118:	b590      	push	{r4, r7, lr}
   8211a:	b085      	sub	sp, #20
   8211c:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   8211e:	4b1a      	ldr	r3, [pc, #104]	; (82188 <main+0x70>)
   82120:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   82122:	4b1a      	ldr	r3, [pc, #104]	; (8218c <main+0x74>)
   82124:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   82126:	2008      	movs	r0, #8
   82128:	4b19      	ldr	r3, [pc, #100]	; (82190 <main+0x78>)
   8212a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   8212c:	200b      	movs	r0, #11
   8212e:	4b19      	ldr	r3, [pc, #100]	; (82194 <main+0x7c>)
   82130:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   82132:	4b19      	ldr	r3, [pc, #100]	; (82198 <main+0x80>)
   82134:	2250      	movs	r2, #80	; 0x50
   82136:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   82138:	4b17      	ldr	r3, [pc, #92]	; (82198 <main+0x80>)
   8213a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8213e:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   82140:	4b15      	ldr	r3, [pc, #84]	; (82198 <main+0x80>)
   82142:	2246      	movs	r2, #70	; 0x46
   82144:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   82146:	4b15      	ldr	r3, [pc, #84]	; (8219c <main+0x84>)
   82148:	f44f 7240 	mov.w	r2, #768	; 0x300
   8214c:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   8214e:	4914      	ldr	r1, [pc, #80]	; (821a0 <main+0x88>)
   82150:	4811      	ldr	r0, [pc, #68]	; (82198 <main+0x80>)
   82152:	4b14      	ldr	r3, [pc, #80]	; (821a4 <main+0x8c>)
   82154:	4798      	blx	r3
	uart_enable(UART);
   82156:	4810      	ldr	r0, [pc, #64]	; (82198 <main+0x80>)
   82158:	4b13      	ldr	r3, [pc, #76]	; (821a8 <main+0x90>)
   8215a:	4798      	blx	r3
	uart_enable_rx(UART);
   8215c:	480e      	ldr	r0, [pc, #56]	; (82198 <main+0x80>)
   8215e:	4b13      	ldr	r3, [pc, #76]	; (821ac <main+0x94>)
   82160:	4798      	blx	r3
	uart_enable_tx(UART);
   82162:	480d      	ldr	r0, [pc, #52]	; (82198 <main+0x80>)
   82164:	4b12      	ldr	r3, [pc, #72]	; (821b0 <main+0x98>)
   82166:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   82168:	2008      	movs	r0, #8
   8216a:	4b12      	ldr	r3, [pc, #72]	; (821b4 <main+0x9c>)
   8216c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   8216e:	2008      	movs	r0, #8
   82170:	4b11      	ldr	r3, [pc, #68]	; (821b8 <main+0xa0>)
   82172:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   82174:	2100      	movs	r1, #0
   82176:	2008      	movs	r0, #8
   82178:	4b10      	ldr	r3, [pc, #64]	; (821bc <main+0xa4>)
   8217a:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   8217c:	2008      	movs	r0, #8
   8217e:	4b10      	ldr	r3, [pc, #64]	; (821c0 <main+0xa8>)
   82180:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   82182:	2300      	movs	r3, #0
   82184:	60fb      	str	r3, [r7, #12]
   82186:	e020      	b.n	821ca <main+0xb2>
   82188:	00082e45 	.word	0x00082e45
   8218c:	0008157d 	.word	0x0008157d
   82190:	00081ce5 	.word	0x00081ce5
   82194:	00083631 	.word	0x00083631
   82198:	400e0800 	.word	0x400e0800
   8219c:	400e0e00 	.word	0x400e0e00
   821a0:	00086dc4 	.word	0x00086dc4
   821a4:	00081fdd 	.word	0x00081fdd
   821a8:	00081845 	.word	0x00081845
   821ac:	0008182d 	.word	0x0008182d
   821b0:	00081815 	.word	0x00081815
   821b4:	00081b85 	.word	0x00081b85
   821b8:	00081bb9 	.word	0x00081bb9
   821bc:	00081bed 	.word	0x00081bed
   821c0:	00081b55 	.word	0x00081b55
   821c4:	68fb      	ldr	r3, [r7, #12]
   821c6:	3301      	adds	r3, #1
   821c8:	60fb      	str	r3, [r7, #12]
   821ca:	68fb      	ldr	r3, [r7, #12]
   821cc:	4a90      	ldr	r2, [pc, #576]	; (82410 <main+0x2f8>)
   821ce:	4293      	cmp	r3, r2
   821d0:	ddf8      	ble.n	821c4 <main+0xac>
	{
		;
	}
	printf("welcome\n");
   821d2:	4890      	ldr	r0, [pc, #576]	; (82414 <main+0x2fc>)
   821d4:	4b90      	ldr	r3, [pc, #576]	; (82418 <main+0x300>)
   821d6:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   821d8:	200b      	movs	r0, #11
   821da:	4b90      	ldr	r3, [pc, #576]	; (8241c <main+0x304>)
   821dc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   821de:	200c      	movs	r0, #12
   821e0:	4b8e      	ldr	r3, [pc, #568]	; (8241c <main+0x304>)
   821e2:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   821e4:	200d      	movs	r0, #13
   821e6:	4b8d      	ldr	r3, [pc, #564]	; (8241c <main+0x304>)
   821e8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   821ea:	200e      	movs	r0, #14
   821ec:	4b8b      	ldr	r3, [pc, #556]	; (8241c <main+0x304>)
   821ee:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   821f0:	4b8b      	ldr	r3, [pc, #556]	; (82420 <main+0x308>)
   821f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   821f4:	0e5b      	lsrs	r3, r3, #25
   821f6:	f003 0301 	and.w	r3, r3, #1
   821fa:	4a8a      	ldr	r2, [pc, #552]	; (82424 <main+0x30c>)
   821fc:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   821fe:	4b8a      	ldr	r3, [pc, #552]	; (82428 <main+0x310>)
   82200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82202:	0f1b      	lsrs	r3, r3, #28
   82204:	f003 0301 	and.w	r3, r3, #1
   82208:	4a88      	ldr	r2, [pc, #544]	; (8242c <main+0x314>)
   8220a:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   8220c:	4b86      	ldr	r3, [pc, #536]	; (82428 <main+0x310>)
   8220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82210:	0e9b      	lsrs	r3, r3, #26
   82212:	f003 0301 	and.w	r3, r3, #1
   82216:	4a86      	ldr	r2, [pc, #536]	; (82430 <main+0x318>)
   82218:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   8221a:	4b84      	ldr	r3, [pc, #528]	; (8242c <main+0x314>)
   8221c:	681b      	ldr	r3, [r3, #0]
   8221e:	4a85      	ldr	r2, [pc, #532]	; (82434 <main+0x31c>)
   82220:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   82222:	4b83      	ldr	r3, [pc, #524]	; (82430 <main+0x318>)
   82224:	681b      	ldr	r3, [r3, #0]
   82226:	4a84      	ldr	r2, [pc, #528]	; (82438 <main+0x320>)
   82228:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   8222a:	4b84      	ldr	r3, [pc, #528]	; (8243c <main+0x324>)
   8222c:	60bb      	str	r3, [r7, #8]
	uint32_t secondcount = (1312499/2  + 328124)  ;   //
   8222e:	4b84      	ldr	r3, [pc, #528]	; (82440 <main+0x328>)
   82230:	607b      	str	r3, [r7, #4]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   82232:	2101      	movs	r1, #1
   82234:	4883      	ldr	r0, [pc, #524]	; (82444 <main+0x32c>)
   82236:	4b84      	ldr	r3, [pc, #528]	; (82448 <main+0x330>)
   82238:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   8223a:	4b79      	ldr	r3, [pc, #484]	; (82420 <main+0x308>)
   8223c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82240:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   82242:	4b77      	ldr	r3, [pc, #476]	; (82420 <main+0x308>)
   82244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82248:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   8224a:	4b80      	ldr	r3, [pc, #512]	; (8244c <main+0x334>)
   8224c:	781b      	ldrb	r3, [r3, #0]
   8224e:	2b01      	cmp	r3, #1
   82250:	d057      	beq.n	82302 <main+0x1ea>
		{
			
		
				if(flag_1==0)
   82252:	4b7f      	ldr	r3, [pc, #508]	; (82450 <main+0x338>)
   82254:	681b      	ldr	r3, [r3, #0]
   82256:	2b00      	cmp	r3, #0
   82258:	d125      	bne.n	822a6 <main+0x18e>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   8225a:	4b7e      	ldr	r3, [pc, #504]	; (82454 <main+0x33c>)
   8225c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8225e:	0b9b      	lsrs	r3, r3, #14
   82260:	f003 0301 	and.w	r3, r3, #1
   82264:	4a6f      	ldr	r2, [pc, #444]	; (82424 <main+0x30c>)
   82266:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   82268:	4b6e      	ldr	r3, [pc, #440]	; (82424 <main+0x30c>)
   8226a:	681b      	ldr	r3, [r3, #0]
   8226c:	2b01      	cmp	r3, #1
   8226e:	d116      	bne.n	8229e <main+0x186>
   82270:	4b79      	ldr	r3, [pc, #484]	; (82458 <main+0x340>)
   82272:	681b      	ldr	r3, [r3, #0]
   82274:	2b00      	cmp	r3, #0
   82276:	d112      	bne.n	8229e <main+0x186>
					{
						dummy_1++;
   82278:	4b78      	ldr	r3, [pc, #480]	; (8245c <main+0x344>)
   8227a:	681b      	ldr	r3, [r3, #0]
   8227c:	3301      	adds	r3, #1
   8227e:	4a77      	ldr	r2, [pc, #476]	; (8245c <main+0x344>)
   82280:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   82282:	4b76      	ldr	r3, [pc, #472]	; (8245c <main+0x344>)
   82284:	681b      	ldr	r3, [r3, #0]
   82286:	2b02      	cmp	r3, #2
   82288:	d109      	bne.n	8229e <main+0x186>
						{
							tc_stop(TC0,0);
   8228a:	2100      	movs	r1, #0
   8228c:	4874      	ldr	r0, [pc, #464]	; (82460 <main+0x348>)
   8228e:	4b75      	ldr	r3, [pc, #468]	; (82464 <main+0x34c>)
   82290:	4798      	blx	r3
							dummy_1=0;
   82292:	4b72      	ldr	r3, [pc, #456]	; (8245c <main+0x344>)
   82294:	2200      	movs	r2, #0
   82296:	601a      	str	r2, [r3, #0]
							flag_1=1;
   82298:	4b6d      	ldr	r3, [pc, #436]	; (82450 <main+0x338>)
   8229a:	2201      	movs	r2, #1
   8229c:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   8229e:	4b61      	ldr	r3, [pc, #388]	; (82424 <main+0x30c>)
   822a0:	681b      	ldr	r3, [r3, #0]
   822a2:	4a6d      	ldr	r2, [pc, #436]	; (82458 <main+0x340>)
   822a4:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   822a6:	4b70      	ldr	r3, [pc, #448]	; (82468 <main+0x350>)
   822a8:	681b      	ldr	r3, [r3, #0]
   822aa:	2b00      	cmp	r3, #0
   822ac:	d129      	bne.n	82302 <main+0x1ea>
   822ae:	4b68      	ldr	r3, [pc, #416]	; (82450 <main+0x338>)
   822b0:	681b      	ldr	r3, [r3, #0]
   822b2:	2b01      	cmp	r3, #1
   822b4:	d125      	bne.n	82302 <main+0x1ea>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   822b6:	4b67      	ldr	r3, [pc, #412]	; (82454 <main+0x33c>)
   822b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   822ba:	0bdb      	lsrs	r3, r3, #15
   822bc:	f003 0301 	and.w	r3, r3, #1
   822c0:	4a5a      	ldr	r2, [pc, #360]	; (8242c <main+0x314>)
   822c2:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   822c4:	4b59      	ldr	r3, [pc, #356]	; (8242c <main+0x314>)
   822c6:	681b      	ldr	r3, [r3, #0]
   822c8:	2b01      	cmp	r3, #1
   822ca:	d116      	bne.n	822fa <main+0x1e2>
   822cc:	4b59      	ldr	r3, [pc, #356]	; (82434 <main+0x31c>)
   822ce:	681b      	ldr	r3, [r3, #0]
   822d0:	2b00      	cmp	r3, #0
   822d2:	d112      	bne.n	822fa <main+0x1e2>
					{
						dummy_1b++;
   822d4:	4b65      	ldr	r3, [pc, #404]	; (8246c <main+0x354>)
   822d6:	681b      	ldr	r3, [r3, #0]
   822d8:	3301      	adds	r3, #1
   822da:	4a64      	ldr	r2, [pc, #400]	; (8246c <main+0x354>)
   822dc:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   822de:	4b63      	ldr	r3, [pc, #396]	; (8246c <main+0x354>)
   822e0:	681b      	ldr	r3, [r3, #0]
   822e2:	2b02      	cmp	r3, #2
   822e4:	d109      	bne.n	822fa <main+0x1e2>
						{
							tc_stop(TC0,1);
   822e6:	2101      	movs	r1, #1
   822e8:	485d      	ldr	r0, [pc, #372]	; (82460 <main+0x348>)
   822ea:	4b5e      	ldr	r3, [pc, #376]	; (82464 <main+0x34c>)
   822ec:	4798      	blx	r3
							dummy_1b=0;
   822ee:	4b5f      	ldr	r3, [pc, #380]	; (8246c <main+0x354>)
   822f0:	2200      	movs	r2, #0
   822f2:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   822f4:	4b5c      	ldr	r3, [pc, #368]	; (82468 <main+0x350>)
   822f6:	2201      	movs	r2, #1
   822f8:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   822fa:	4b4c      	ldr	r3, [pc, #304]	; (8242c <main+0x314>)
   822fc:	681b      	ldr	r3, [r3, #0]
   822fe:	4a4d      	ldr	r2, [pc, #308]	; (82434 <main+0x31c>)
   82300:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   82302:	4b5b      	ldr	r3, [pc, #364]	; (82470 <main+0x358>)
   82304:	781b      	ldrb	r3, [r3, #0]
   82306:	2b01      	cmp	r3, #1
   82308:	d142      	bne.n	82390 <main+0x278>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   8230a:	4b52      	ldr	r3, [pc, #328]	; (82454 <main+0x33c>)
   8230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8230e:	0b9b      	lsrs	r3, r3, #14
   82310:	f003 0301 	and.w	r3, r3, #1
   82314:	4a43      	ldr	r2, [pc, #268]	; (82424 <main+0x30c>)
   82316:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   82318:	4b42      	ldr	r3, [pc, #264]	; (82424 <main+0x30c>)
   8231a:	681b      	ldr	r3, [r3, #0]
   8231c:	2b01      	cmp	r3, #1
   8231e:	d110      	bne.n	82342 <main+0x22a>
   82320:	4b4d      	ldr	r3, [pc, #308]	; (82458 <main+0x340>)
   82322:	681b      	ldr	r3, [r3, #0]
   82324:	2b00      	cmp	r3, #0
   82326:	d10c      	bne.n	82342 <main+0x22a>
				{
					acid_count++;
   82328:	4b52      	ldr	r3, [pc, #328]	; (82474 <main+0x35c>)
   8232a:	681b      	ldr	r3, [r3, #0]
   8232c:	3301      	adds	r3, #1
   8232e:	4a51      	ldr	r2, [pc, #324]	; (82474 <main+0x35c>)
   82330:	6013      	str	r3, [r2, #0]
					acid_f_b = acid_count;
   82332:	4b50      	ldr	r3, [pc, #320]	; (82474 <main+0x35c>)
   82334:	681b      	ldr	r3, [r3, #0]
   82336:	b29a      	uxth	r2, r3
   82338:	4b4f      	ldr	r3, [pc, #316]	; (82478 <main+0x360>)
   8233a:	801a      	strh	r2, [r3, #0]
					TC1_cnt = 0;
   8233c:	4b4f      	ldr	r3, [pc, #316]	; (8247c <main+0x364>)
   8233e:	2200      	movs	r2, #0
   82340:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   82342:	4b38      	ldr	r3, [pc, #224]	; (82424 <main+0x30c>)
   82344:	681b      	ldr	r3, [r3, #0]
   82346:	4a44      	ldr	r2, [pc, #272]	; (82458 <main+0x340>)
   82348:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   8234a:	4b42      	ldr	r3, [pc, #264]	; (82454 <main+0x33c>)
   8234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8234e:	0bdb      	lsrs	r3, r3, #15
   82350:	f003 0301 	and.w	r3, r3, #1
   82354:	4a35      	ldr	r2, [pc, #212]	; (8242c <main+0x314>)
   82356:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   82358:	4b34      	ldr	r3, [pc, #208]	; (8242c <main+0x314>)
   8235a:	681b      	ldr	r3, [r3, #0]
   8235c:	2b01      	cmp	r3, #1
   8235e:	d113      	bne.n	82388 <main+0x270>
   82360:	4b34      	ldr	r3, [pc, #208]	; (82434 <main+0x31c>)
   82362:	681b      	ldr	r3, [r3, #0]
   82364:	2b00      	cmp	r3, #0
   82366:	d10f      	bne.n	82388 <main+0x270>
				{
				      bicarb_count++;
   82368:	4b45      	ldr	r3, [pc, #276]	; (82480 <main+0x368>)
   8236a:	681b      	ldr	r3, [r3, #0]
   8236c:	3301      	adds	r3, #1
   8236e:	4a44      	ldr	r2, [pc, #272]	; (82480 <main+0x368>)
   82370:	6013      	str	r3, [r2, #0]
					  bicarb_f_b = bicarb_count;
   82372:	4b43      	ldr	r3, [pc, #268]	; (82480 <main+0x368>)
   82374:	681b      	ldr	r3, [r3, #0]
   82376:	b29a      	uxth	r2, r3
   82378:	4b42      	ldr	r3, [pc, #264]	; (82484 <main+0x36c>)
   8237a:	801a      	strh	r2, [r3, #0]
				 TC2_cnt = 0;
   8237c:	4b42      	ldr	r3, [pc, #264]	; (82488 <main+0x370>)
   8237e:	2200      	movs	r2, #0
   82380:	601a      	str	r2, [r3, #0]
				 TC1_cnt = 0;
   82382:	4b3e      	ldr	r3, [pc, #248]	; (8247c <main+0x364>)
   82384:	2200      	movs	r2, #0
   82386:	601a      	str	r2, [r3, #0]
				}
				prev_status_bic= status_bic;
   82388:	4b28      	ldr	r3, [pc, #160]	; (8242c <main+0x314>)
   8238a:	681b      	ldr	r3, [r3, #0]
   8238c:	4a29      	ldr	r2, [pc, #164]	; (82434 <main+0x31c>)
   8238e:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1) && (OneSecFlag == 1)  )   // 
   82390:	4b3e      	ldr	r3, [pc, #248]	; (8248c <main+0x374>)
   82392:	781b      	ldrb	r3, [r3, #0]
   82394:	b2db      	uxtb	r3, r3
   82396:	2b01      	cmp	r3, #1
   82398:	d137      	bne.n	8240a <main+0x2f2>
   8239a:	4b2d      	ldr	r3, [pc, #180]	; (82450 <main+0x338>)
   8239c:	681b      	ldr	r3, [r3, #0]
   8239e:	2b01      	cmp	r3, #1
   823a0:	d133      	bne.n	8240a <main+0x2f2>
   823a2:	4b31      	ldr	r3, [pc, #196]	; (82468 <main+0x350>)
   823a4:	681b      	ldr	r3, [r3, #0]
   823a6:	2b01      	cmp	r3, #1
   823a8:	d12f      	bne.n	8240a <main+0x2f2>
   823aa:	4b39      	ldr	r3, [pc, #228]	; (82490 <main+0x378>)
   823ac:	781b      	ldrb	r3, [r3, #0]
   823ae:	2b01      	cmp	r3, #1
   823b0:	d12b      	bne.n	8240a <main+0x2f2>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   823b2:	4b1d      	ldr	r3, [pc, #116]	; (82428 <main+0x310>)
   823b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   823b6:	0e9b      	lsrs	r3, r3, #26
   823b8:	f003 0301 	and.w	r3, r3, #1
   823bc:	4a1c      	ldr	r2, [pc, #112]	; (82430 <main+0x318>)
   823be:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   823c0:	4b1b      	ldr	r3, [pc, #108]	; (82430 <main+0x318>)
   823c2:	681b      	ldr	r3, [r3, #0]
   823c4:	2b01      	cmp	r3, #1
   823c6:	d11c      	bne.n	82402 <main+0x2ea>
   823c8:	4b1b      	ldr	r3, [pc, #108]	; (82438 <main+0x320>)
   823ca:	681b      	ldr	r3, [r3, #0]
   823cc:	2b00      	cmp	r3, #0
   823ce:	d118      	bne.n	82402 <main+0x2ea>
			{
				stop_pump();
   823d0:	4b30      	ldr	r3, [pc, #192]	; (82494 <main+0x37c>)
   823d2:	4798      	blx	r3
				Correction_Count++;
   823d4:	4b30      	ldr	r3, [pc, #192]	; (82498 <main+0x380>)
   823d6:	781b      	ldrb	r3, [r3, #0]
   823d8:	3301      	adds	r3, #1
   823da:	b2da      	uxtb	r2, r3
   823dc:	4b2e      	ldr	r3, [pc, #184]	; (82498 <main+0x380>)
   823de:	701a      	strb	r2, [r3, #0]
// 				}
// 				}
// 				}

//				rc=Set_RC;
				start_pump();
   823e0:	4b2e      	ldr	r3, [pc, #184]	; (8249c <main+0x384>)
   823e2:	4798      	blx	r3
				OneSecFlag = 0;
   823e4:	4b2a      	ldr	r3, [pc, #168]	; (82490 <main+0x378>)
   823e6:	2200      	movs	r2, #0
   823e8:	701a      	strb	r2, [r3, #0]
				
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   823ea:	68bb      	ldr	r3, [r7, #8]
   823ec:	221d      	movs	r2, #29
   823ee:	2102      	movs	r1, #2
   823f0:	481b      	ldr	r0, [pc, #108]	; (82460 <main+0x348>)
   823f2:	4c2b      	ldr	r4, [pc, #172]	; (824a0 <main+0x388>)
   823f4:	47a0      	blx	r4
				startTimer2(TC1,0,TC3_IRQn,secondcount);
   823f6:	687b      	ldr	r3, [r7, #4]
   823f8:	221e      	movs	r2, #30
   823fa:	2100      	movs	r1, #0
   823fc:	4829      	ldr	r0, [pc, #164]	; (824a4 <main+0x38c>)
   823fe:	4c2a      	ldr	r4, [pc, #168]	; (824a8 <main+0x390>)
   82400:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   82402:	4b0b      	ldr	r3, [pc, #44]	; (82430 <main+0x318>)
   82404:	681b      	ldr	r3, [r3, #0]
   82406:	4a0c      	ldr	r2, [pc, #48]	; (82438 <main+0x320>)
   82408:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   8240a:	4b28      	ldr	r3, [pc, #160]	; (824ac <main+0x394>)
   8240c:	781b      	ldrb	r3, [r3, #0]
   8240e:	e04f      	b.n	824b0 <main+0x398>
   82410:	0001869f 	.word	0x0001869f
   82414:	00086ddc 	.word	0x00086ddc
   82418:	00083e79 	.word	0x00083e79
   8241c:	00083631 	.word	0x00083631
   82420:	400e1000 	.word	0x400e1000
   82424:	20070cf0 	.word	0x20070cf0
   82428:	400e1200 	.word	0x400e1200
   8242c:	20070cf4 	.word	0x20070cf4
   82430:	20070cf8 	.word	0x20070cf8
   82434:	20070cfc 	.word	0x20070cfc
   82438:	20070d00 	.word	0x20070d00
   8243c:	001406f3 	.word	0x001406f3
   82440:	000f0535 	.word	0x000f0535
   82444:	400e0800 	.word	0x400e0800
   82448:	0008185d 	.word	0x0008185d
   8244c:	20070cdc 	.word	0x20070cdc
   82450:	20070d04 	.word	0x20070d04
   82454:	400e0e00 	.word	0x400e0e00
   82458:	20070d08 	.word	0x20070d08
   8245c:	20070d0c 	.word	0x20070d0c
   82460:	40080000 	.word	0x40080000
   82464:	00081725 	.word	0x00081725
   82468:	20070d10 	.word	0x20070d10
   8246c:	20070d14 	.word	0x20070d14
   82470:	20070ce3 	.word	0x20070ce3
   82474:	20070ce4 	.word	0x20070ce4
   82478:	200711f8 	.word	0x200711f8
   8247c:	20070ca8 	.word	0x20070ca8
   82480:	20070ce8 	.word	0x20070ce8
   82484:	200711fa 	.word	0x200711fa
   82488:	20070cac 	.word	0x20070cac
   8248c:	20070cdd 	.word	0x20070cdd
   82490:	20070cb8 	.word	0x20070cb8
   82494:	00082a7d 	.word	0x00082a7d
   82498:	20070ce2 	.word	0x20070ce2
   8249c:	000828c9 	.word	0x000828c9
   824a0:	000813ad 	.word	0x000813ad
   824a4:	40084000 	.word	0x40084000
   824a8:	00081421 	.word	0x00081421
   824ac:	20070400 	.word	0x20070400
   824b0:	2b05      	cmp	r3, #5
   824b2:	f63f aeca 	bhi.w	8224a <main+0x132>
   824b6:	a201      	add	r2, pc, #4	; (adr r2, 824bc <main+0x3a4>)
   824b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   824bc:	000824d5 	.word	0x000824d5
   824c0:	00082505 	.word	0x00082505
   824c4:	0008224b 	.word	0x0008224b
   824c8:	000824ef 	.word	0x000824ef
   824cc:	0008251f 	.word	0x0008251f
   824d0:	00082535 	.word	0x00082535
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   824d4:	4ba7      	ldr	r3, [pc, #668]	; (82774 <main+0x65c>)
   824d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   824da:	801a      	strh	r2, [r3, #0]
					start_acidpump();
   824dc:	4ba6      	ldr	r3, [pc, #664]	; (82778 <main+0x660>)
   824de:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   824e0:	4ba6      	ldr	r3, [pc, #664]	; (8277c <main+0x664>)
   824e2:	2203      	movs	r2, #3
   824e4:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   824e6:	4ba6      	ldr	r3, [pc, #664]	; (82780 <main+0x668>)
   824e8:	2200      	movs	r2, #0
   824ea:	701a      	strb	r2, [r3, #0]
				break;
   824ec:	e188      	b.n	82800 <main+0x6e8>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   824ee:	4ba5      	ldr	r3, [pc, #660]	; (82784 <main+0x66c>)
   824f0:	681b      	ldr	r3, [r3, #0]
   824f2:	2b01      	cmp	r3, #1
   824f4:	d102      	bne.n	824fc <main+0x3e4>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   824f6:	4ba1      	ldr	r3, [pc, #644]	; (8277c <main+0x664>)
   824f8:	2201      	movs	r2, #1
   824fa:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   824fc:	4ba0      	ldr	r3, [pc, #640]	; (82780 <main+0x668>)
   824fe:	2200      	movs	r2, #0
   82500:	701a      	strb	r2, [r3, #0]
				break;
   82502:	e17d      	b.n	82800 <main+0x6e8>
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   82504:	4ba0      	ldr	r3, [pc, #640]	; (82788 <main+0x670>)
   82506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8250a:	801a      	strh	r2, [r3, #0]
					start_bicarpump();
   8250c:	4b9f      	ldr	r3, [pc, #636]	; (8278c <main+0x674>)
   8250e:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   82510:	4b9a      	ldr	r3, [pc, #616]	; (8277c <main+0x664>)
   82512:	2204      	movs	r2, #4
   82514:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   82516:	4b9a      	ldr	r3, [pc, #616]	; (82780 <main+0x668>)
   82518:	2200      	movs	r2, #0
   8251a:	701a      	strb	r2, [r3, #0]
				break;
   8251c:	e170      	b.n	82800 <main+0x6e8>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   8251e:	4b9c      	ldr	r3, [pc, #624]	; (82790 <main+0x678>)
   82520:	681b      	ldr	r3, [r3, #0]
   82522:	2b01      	cmp	r3, #1
   82524:	d102      	bne.n	8252c <main+0x414>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   82526:	4b95      	ldr	r3, [pc, #596]	; (8277c <main+0x664>)
   82528:	2205      	movs	r2, #5
   8252a:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   8252c:	4b94      	ldr	r3, [pc, #592]	; (82780 <main+0x668>)
   8252e:	2200      	movs	r2, #0
   82530:	701a      	strb	r2, [r3, #0]
				break;
   82532:	e165      	b.n	82800 <main+0x6e8>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   82534:	4b97      	ldr	r3, [pc, #604]	; (82794 <main+0x67c>)
   82536:	781b      	ldrb	r3, [r3, #0]
   82538:	b2db      	uxtb	r3, r3
   8253a:	2b01      	cmp	r3, #1
   8253c:	f47f ae85 	bne.w	8224a <main+0x132>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   82540:	4b95      	ldr	r3, [pc, #596]	; (82798 <main+0x680>)
   82542:	781b      	ldrb	r3, [r3, #0]
   82544:	70fb      	strb	r3, [r7, #3]
						switch (dummy)
   82546:	78fb      	ldrb	r3, [r7, #3]
   82548:	3b01      	subs	r3, #1
   8254a:	2b13      	cmp	r3, #19
   8254c:	f200 814d 	bhi.w	827ea <main+0x6d2>
   82550:	a201      	add	r2, pc, #4	; (adr r2, 82558 <main+0x440>)
   82552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82556:	bf00      	nop
   82558:	00082613 	.word	0x00082613
   8255c:	000826c7 	.word	0x000826c7
   82560:	000827d9 	.word	0x000827d9
   82564:	0008262d 	.word	0x0008262d
   82568:	0008263f 	.word	0x0008263f
   8256c:	00082651 	.word	0x00082651
   82570:	00082663 	.word	0x00082663
   82574:	000825c1 	.word	0x000825c1
   82578:	000825e9 	.word	0x000825e9
   8257c:	000827eb 	.word	0x000827eb
   82580:	000827eb 	.word	0x000827eb
   82584:	000825a9 	.word	0x000825a9
   82588:	000825b5 	.word	0x000825b5
   8258c:	000827eb 	.word	0x000827eb
   82590:	000827eb 	.word	0x000827eb
   82594:	000827eb 	.word	0x000827eb
   82598:	000827eb 	.word	0x000827eb
   8259c:	00082675 	.word	0x00082675
   825a0:	000826a5 	.word	0x000826a5
   825a4:	000826ad 	.word	0x000826ad
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   825a8:	4b72      	ldr	r3, [pc, #456]	; (82774 <main+0x65c>)
   825aa:	22d2      	movs	r2, #210	; 0xd2
   825ac:	801a      	strh	r2, [r3, #0]
															start_acidpump();
   825ae:	4b72      	ldr	r3, [pc, #456]	; (82778 <main+0x660>)
   825b0:	4798      	blx	r3
							
							break;
   825b2:	e11b      	b.n	827ec <main+0x6d4>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   825b4:	4b74      	ldr	r3, [pc, #464]	; (82788 <main+0x670>)
   825b6:	22d2      	movs	r2, #210	; 0xd2
   825b8:	801a      	strh	r2, [r3, #0]
															start_bicarpump();
   825ba:	4b74      	ldr	r3, [pc, #464]	; (8278c <main+0x674>)
   825bc:	4798      	blx	r3
							
							break;
   825be:	e115      	b.n	827ec <main+0x6d4>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
					feedcount_flag = 1; 
   825c0:	4b76      	ldr	r3, [pc, #472]	; (8279c <main+0x684>)
   825c2:	2201      	movs	r2, #1
   825c4:	701a      	strb	r2, [r3, #0]
								rc=210;
   825c6:	4b6b      	ldr	r3, [pc, #428]	; (82774 <main+0x65c>)
   825c8:	22d2      	movs	r2, #210	; 0xd2
   825ca:	801a      	strh	r2, [r3, #0]
								bic_rc=210;
   825cc:	4b6e      	ldr	r3, [pc, #440]	; (82788 <main+0x670>)
   825ce:	22d2      	movs	r2, #210	; 0xd2
   825d0:	801a      	strh	r2, [r3, #0]
								start_acidpump();
   825d2:	4b69      	ldr	r3, [pc, #420]	; (82778 <main+0x660>)
   825d4:	4798      	blx	r3
								start_bicarpump();
   825d6:	4b6d      	ldr	r3, [pc, #436]	; (8278c <main+0x674>)
   825d8:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   825da:	4b68      	ldr	r3, [pc, #416]	; (8277c <main+0x664>)
   825dc:	2205      	movs	r2, #5
   825de:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   825e0:	4b6f      	ldr	r3, [pc, #444]	; (827a0 <main+0x688>)
   825e2:	2201      	movs	r2, #1
   825e4:	701a      	strb	r2, [r3, #0]
							break;
   825e6:	e101      	b.n	827ec <main+0x6d4>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
							feedcount_flag = 0; 
   825e8:	4b6c      	ldr	r3, [pc, #432]	; (8279c <main+0x684>)
   825ea:	2200      	movs	r2, #0
   825ec:	701a      	strb	r2, [r3, #0]
							acid_count = 0;
   825ee:	4b6d      	ldr	r3, [pc, #436]	; (827a4 <main+0x68c>)
   825f0:	2200      	movs	r2, #0
   825f2:	601a      	str	r2, [r3, #0]
							bicarb_count = 0;
   825f4:	4b6c      	ldr	r3, [pc, #432]	; (827a8 <main+0x690>)
   825f6:	2200      	movs	r2, #0
   825f8:	601a      	str	r2, [r3, #0]
								stop_pump();
   825fa:	4b6c      	ldr	r3, [pc, #432]	; (827ac <main+0x694>)
   825fc:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   825fe:	4b5f      	ldr	r3, [pc, #380]	; (8277c <main+0x664>)
   82600:	2205      	movs	r2, #5
   82602:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   82604:	4b5e      	ldr	r3, [pc, #376]	; (82780 <main+0x668>)
   82606:	2200      	movs	r2, #0
   82608:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   8260a:	4b65      	ldr	r3, [pc, #404]	; (827a0 <main+0x688>)
   8260c:	2200      	movs	r2, #0
   8260e:	701a      	strb	r2, [r3, #0]
							break;
   82610:	e0ec      	b.n	827ec <main+0x6d4>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_1=0;
   82612:	4b5c      	ldr	r3, [pc, #368]	; (82784 <main+0x66c>)
   82614:	2200      	movs	r2, #0
   82616:	601a      	str	r2, [r3, #0]
							flag_1b=0;
   82618:	4b5d      	ldr	r3, [pc, #372]	; (82790 <main+0x678>)
   8261a:	2200      	movs	r2, #0
   8261c:	601a      	str	r2, [r3, #0]
							flag_nrmal=0;
   8261e:	4b58      	ldr	r3, [pc, #352]	; (82780 <main+0x668>)
   82620:	2200      	movs	r2, #0
   82622:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   82624:	4b55      	ldr	r3, [pc, #340]	; (8277c <main+0x664>)
   82626:	2200      	movs	r2, #0
   82628:	701a      	strb	r2, [r3, #0]
							break;
   8262a:	e0df      	b.n	827ec <main+0x6d4>
							case PROP_START_DISINFECTION:
								rc=210;
   8262c:	4b51      	ldr	r3, [pc, #324]	; (82774 <main+0x65c>)
   8262e:	22d2      	movs	r2, #210	; 0xd2
   82630:	801a      	strh	r2, [r3, #0]
								
								start_acidpump();
   82632:	4b51      	ldr	r3, [pc, #324]	; (82778 <main+0x660>)
   82634:	4798      	blx	r3
	
								state_3 = CPU3_STANDBY;
   82636:	4b51      	ldr	r3, [pc, #324]	; (8277c <main+0x664>)
   82638:	2205      	movs	r2, #5
   8263a:	701a      	strb	r2, [r3, #0]
							break;
   8263c:	e0d6      	b.n	827ec <main+0x6d4>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   8263e:	4b5b      	ldr	r3, [pc, #364]	; (827ac <main+0x694>)
   82640:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82642:	4b4e      	ldr	r3, [pc, #312]	; (8277c <main+0x664>)
   82644:	2205      	movs	r2, #5
   82646:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;    // added manav07
   82648:	4b4d      	ldr	r3, [pc, #308]	; (82780 <main+0x668>)
   8264a:	2200      	movs	r2, #0
   8264c:	701a      	strb	r2, [r3, #0]
							break;
   8264e:	e0cd      	b.n	827ec <main+0x6d4>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   82650:	4b4d      	ldr	r3, [pc, #308]	; (82788 <main+0x670>)
   82652:	22d2      	movs	r2, #210	; 0xd2
   82654:	801a      	strh	r2, [r3, #0]
								start_bicarpump();
   82656:	4b4d      	ldr	r3, [pc, #308]	; (8278c <main+0x674>)
   82658:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   8265a:	4b48      	ldr	r3, [pc, #288]	; (8277c <main+0x664>)
   8265c:	2205      	movs	r2, #5
   8265e:	701a      	strb	r2, [r3, #0]
							break;
   82660:	e0c4      	b.n	827ec <main+0x6d4>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   82662:	4b52      	ldr	r3, [pc, #328]	; (827ac <main+0x694>)
   82664:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82666:	4b45      	ldr	r3, [pc, #276]	; (8277c <main+0x664>)
   82668:	2205      	movs	r2, #5
   8266a:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;    // added manav07
   8266c:	4b44      	ldr	r3, [pc, #272]	; (82780 <main+0x668>)
   8266e:	2200      	movs	r2, #0
   82670:	701a      	strb	r2, [r3, #0]
							break;
   82672:	e0bb      	b.n	827ec <main+0x6d4>
							
							case prop_BICAR_FEED_BACK:   //selftest bicar
							//   bic_rc = 210; 
							rc= 210;
   82674:	4b3f      	ldr	r3, [pc, #252]	; (82774 <main+0x65c>)
   82676:	22d2      	movs	r2, #210	; 0xd2
   82678:	801a      	strh	r2, [r3, #0]
							bic_rc = 210;
   8267a:	4b43      	ldr	r3, [pc, #268]	; (82788 <main+0x670>)
   8267c:	22d2      	movs	r2, #210	; 0xd2
   8267e:	801a      	strh	r2, [r3, #0]
							
							   feedcount_flag = 1; 
   82680:	4b46      	ldr	r3, [pc, #280]	; (8279c <main+0x684>)
   82682:	2201      	movs	r2, #1
   82684:	701a      	strb	r2, [r3, #0]
							   startTimer1(TC0,2,TC2_IRQn,stepcount);
   82686:	68bb      	ldr	r3, [r7, #8]
   82688:	221d      	movs	r2, #29
   8268a:	2102      	movs	r1, #2
   8268c:	4848      	ldr	r0, [pc, #288]	; (827b0 <main+0x698>)
   8268e:	4c49      	ldr	r4, [pc, #292]	; (827b4 <main+0x69c>)
   82690:	47a0      	blx	r4
							    start_pump();
   82692:	4b49      	ldr	r3, [pc, #292]	; (827b8 <main+0x6a0>)
   82694:	4798      	blx	r3
						
							   flag_nrmal=0;  // 1
   82696:	4b3a      	ldr	r3, [pc, #232]	; (82780 <main+0x668>)
   82698:	2200      	movs	r2, #0
   8269a:	701a      	strb	r2, [r3, #0]
							   state_3 = CPU3_STANDBY;
   8269c:	4b37      	ldr	r3, [pc, #220]	; (8277c <main+0x664>)
   8269e:	2205      	movs	r2, #5
   826a0:	701a      	strb	r2, [r3, #0]
							break;
   826a2:	e0a3      	b.n	827ec <main+0x6d4>
							case prop_BICAR_FEED_BACK_STATUS:
						//	uint8_t acid_feed_back_counter = 0;
					//		        bicarb_f_b_counter = bicarb_count;
					//				acid_feed_back_counter = acid_count;
					SV_put_sensor_data(&sv_sys_statbuffer);
   826a4:	4845      	ldr	r0, [pc, #276]	; (827bc <main+0x6a4>)
   826a6:	4b46      	ldr	r3, [pc, #280]	; (827c0 <main+0x6a8>)
   826a8:	4798      	blx	r3
// 								stop_pump();
// 									flag_1=0;
// 									flag_1b=0;
// 									flag_nrmal=0;
// 									state_3 = CPU3_STANDBY;
							break;
   826aa:	e09f      	b.n	827ec <main+0x6d4>
							case prop_RESET_FEED_BACK_STATUS:
							acid_f_b = 0;
   826ac:	4b45      	ldr	r3, [pc, #276]	; (827c4 <main+0x6ac>)
   826ae:	2200      	movs	r2, #0
   826b0:	801a      	strh	r2, [r3, #0]
							bicarb_f_b = 0;
   826b2:	4b45      	ldr	r3, [pc, #276]	; (827c8 <main+0x6b0>)
   826b4:	2200      	movs	r2, #0
   826b6:	801a      	strh	r2, [r3, #0]
							acid_count = 0;
   826b8:	4b3a      	ldr	r3, [pc, #232]	; (827a4 <main+0x68c>)
   826ba:	2200      	movs	r2, #0
   826bc:	601a      	str	r2, [r3, #0]
							bicarb_count = 0;
   826be:	4b3a      	ldr	r3, [pc, #232]	; (827a8 <main+0x690>)
   826c0:	2200      	movs	r2, #0
   826c2:	601a      	str	r2, [r3, #0]
							break;
   826c4:	e092      	b.n	827ec <main+0x6d4>
							case PROP_START_MIXING:
							OneSecFlag = 1 ;
   826c6:	4b41      	ldr	r3, [pc, #260]	; (827cc <main+0x6b4>)
   826c8:	2201      	movs	r2, #1
   826ca:	701a      	strb	r2, [r3, #0]
								switch(User_setConductivity)
   826cc:	4b40      	ldr	r3, [pc, #256]	; (827d0 <main+0x6b8>)
   826ce:	881b      	ldrh	r3, [r3, #0]
   826d0:	3b87      	subs	r3, #135	; 0x87
   826d2:	2b08      	cmp	r3, #8
   826d4:	d838      	bhi.n	82748 <main+0x630>
   826d6:	a201      	add	r2, pc, #4	; (adr r2, 826dc <main+0x5c4>)
   826d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   826dc:	00082701 	.word	0x00082701
   826e0:	00082709 	.word	0x00082709
   826e4:	00082711 	.word	0x00082711
   826e8:	00082719 	.word	0x00082719
   826ec:	00082721 	.word	0x00082721
   826f0:	00082729 	.word	0x00082729
   826f4:	00082731 	.word	0x00082731
   826f8:	00082739 	.word	0x00082739
   826fc:	00082741 	.word	0x00082741
									{
												case 135:
									//			Set_conductivity = 1430;
												Set_RC = 166;
   82700:	4b34      	ldr	r3, [pc, #208]	; (827d4 <main+0x6bc>)
   82702:	22a6      	movs	r2, #166	; 0xa6
   82704:	801a      	strh	r2, [r3, #0]
											break;
   82706:	e01f      	b.n	82748 <main+0x630>
											case 136:
									//			Set_conductivity = 1441;
												Set_RC = 165;
   82708:	4b32      	ldr	r3, [pc, #200]	; (827d4 <main+0x6bc>)
   8270a:	22a5      	movs	r2, #165	; 0xa5
   8270c:	801a      	strh	r2, [r3, #0]
											break;
   8270e:	e01b      	b.n	82748 <main+0x630>
											case 137:
									//			Set_conductivity = 1452;
												Set_RC = 164;
   82710:	4b30      	ldr	r3, [pc, #192]	; (827d4 <main+0x6bc>)
   82712:	22a4      	movs	r2, #164	; 0xa4
   82714:	801a      	strh	r2, [r3, #0]
											break;
   82716:	e017      	b.n	82748 <main+0x630>
											case 138:
									//			Set_conductivity = 1463;
												Set_RC = 163;
   82718:	4b2e      	ldr	r3, [pc, #184]	; (827d4 <main+0x6bc>)
   8271a:	22a3      	movs	r2, #163	; 0xa3
   8271c:	801a      	strh	r2, [r3, #0]
											break;
   8271e:	e013      	b.n	82748 <main+0x630>
											case 139:
									//			Set_conductivity = 1474;  // 1414
												Set_RC = 162;
   82720:	4b2c      	ldr	r3, [pc, #176]	; (827d4 <main+0x6bc>)
   82722:	22a2      	movs	r2, #162	; 0xa2
   82724:	801a      	strh	r2, [r3, #0]
											break;
   82726:	e00f      	b.n	82748 <main+0x630>
											case 140:
									//			Set_conductivity = 1485;
												Set_RC = 161;
   82728:	4b2a      	ldr	r3, [pc, #168]	; (827d4 <main+0x6bc>)
   8272a:	22a1      	movs	r2, #161	; 0xa1
   8272c:	801a      	strh	r2, [r3, #0]
											break;
   8272e:	e00b      	b.n	82748 <main+0x630>
											case 141:
									//			Set_conductivity = 1496;  // 1436
												Set_RC = 160;
   82730:	4b28      	ldr	r3, [pc, #160]	; (827d4 <main+0x6bc>)
   82732:	22a0      	movs	r2, #160	; 0xa0
   82734:	801a      	strh	r2, [r3, #0]
												break;
   82736:	e007      	b.n	82748 <main+0x630>
											case 142:
									//		Set_conductivity = 1507;
											Set_RC = 159;
   82738:	4b26      	ldr	r3, [pc, #152]	; (827d4 <main+0x6bc>)
   8273a:	229f      	movs	r2, #159	; 0x9f
   8273c:	801a      	strh	r2, [r3, #0]
											break;
   8273e:	e003      	b.n	82748 <main+0x630>
											case 143:
									//		Set_conductivity = 1520;
											Set_RC = 158;
   82740:	4b24      	ldr	r3, [pc, #144]	; (827d4 <main+0x6bc>)
   82742:	229e      	movs	r2, #158	; 0x9e
   82744:	801a      	strh	r2, [r3, #0]
											break;
   82746:	bf00      	nop
														
									}
						
							feedcount_flag = 1; // test - to be removed
   82748:	4b14      	ldr	r3, [pc, #80]	; (8279c <main+0x684>)
   8274a:	2201      	movs	r2, #1
   8274c:	701a      	strb	r2, [r3, #0]
							rc = Set_RC;
   8274e:	4b21      	ldr	r3, [pc, #132]	; (827d4 <main+0x6bc>)
   82750:	881a      	ldrh	r2, [r3, #0]
   82752:	4b08      	ldr	r3, [pc, #32]	; (82774 <main+0x65c>)
   82754:	801a      	strh	r2, [r3, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   82756:	68bb      	ldr	r3, [r7, #8]
   82758:	221d      	movs	r2, #29
   8275a:	2102      	movs	r1, #2
   8275c:	4814      	ldr	r0, [pc, #80]	; (827b0 <main+0x698>)
   8275e:	4c15      	ldr	r4, [pc, #84]	; (827b4 <main+0x69c>)
   82760:	47a0      	blx	r4
						
// 								start_acidpump();
// 								start_bicarpump();

								start_pump();
   82762:	4b15      	ldr	r3, [pc, #84]	; (827b8 <main+0x6a0>)
   82764:	4798      	blx	r3
								flag_nrmal=1;
   82766:	4b06      	ldr	r3, [pc, #24]	; (82780 <main+0x668>)
   82768:	2201      	movs	r2, #1
   8276a:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   8276c:	4b03      	ldr	r3, [pc, #12]	; (8277c <main+0x664>)
   8276e:	2205      	movs	r2, #5
   82770:	701a      	strb	r2, [r3, #0]
							break;
   82772:	e03b      	b.n	827ec <main+0x6d4>
   82774:	20070cde 	.word	0x20070cde
   82778:	0008281d 	.word	0x0008281d
   8277c:	20070400 	.word	0x20070400
   82780:	20070cdd 	.word	0x20070cdd
   82784:	20070d04 	.word	0x20070d04
   82788:	20071220 	.word	0x20071220
   8278c:	000829dd 	.word	0x000829dd
   82790:	20070d10 	.word	0x20070d10
   82794:	20070df4 	.word	0x20070df4
   82798:	20070c94 	.word	0x20070c94
   8279c:	20070ce3 	.word	0x20070ce3
   827a0:	20070cdc 	.word	0x20070cdc
   827a4:	20070ce4 	.word	0x20070ce4
   827a8:	20070ce8 	.word	0x20070ce8
   827ac:	00082a7d 	.word	0x00082a7d
   827b0:	40080000 	.word	0x40080000
   827b4:	000813ad 	.word	0x000813ad
   827b8:	000828c9 	.word	0x000828c9
   827bc:	20071214 	.word	0x20071214
   827c0:	000814b1 	.word	0x000814b1
   827c4:	200711f8 	.word	0x200711f8
   827c8:	200711fa 	.word	0x200711fa
   827cc:	20070cb8 	.word	0x20070cb8
   827d0:	20070dce 	.word	0x20070dce
   827d4:	20070ce0 	.word	0x20070ce0
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   827d8:	4b0a      	ldr	r3, [pc, #40]	; (82804 <main+0x6ec>)
   827da:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   827dc:	4b0a      	ldr	r3, [pc, #40]	; (82808 <main+0x6f0>)
   827de:	2205      	movs	r2, #5
   827e0:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   827e2:	4b0a      	ldr	r3, [pc, #40]	; (8280c <main+0x6f4>)
   827e4:	2200      	movs	r2, #0
   827e6:	701a      	strb	r2, [r3, #0]
							break;
   827e8:	e000      	b.n	827ec <main+0x6d4>
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   827ea:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   827ec:	4b08      	ldr	r3, [pc, #32]	; (82810 <main+0x6f8>)
   827ee:	2200      	movs	r2, #0
   827f0:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   827f2:	4b08      	ldr	r3, [pc, #32]	; (82814 <main+0x6fc>)
   827f4:	2200      	movs	r2, #0
   827f6:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   827f8:	4b07      	ldr	r3, [pc, #28]	; (82818 <main+0x700>)
   827fa:	2200      	movs	r2, #0
   827fc:	601a      	str	r2, [r3, #0]
				break;
   827fe:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   82800:	e523      	b.n	8224a <main+0x132>
   82802:	bf00      	nop
   82804:	00082a7d 	.word	0x00082a7d
   82808:	20070400 	.word	0x20070400
   8280c:	20070cdd 	.word	0x20070cdd
   82810:	20070c94 	.word	0x20070c94
   82814:	20070df4 	.word	0x20070df4
   82818:	20070c8e 	.word	0x20070c8e

0008281c <start_acidpump>:
	}


void start_acidpump()
{
   8281c:	b598      	push	{r3, r4, r7, lr}
   8281e:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   82820:	4b1f      	ldr	r3, [pc, #124]	; (828a0 <start_acidpump+0x84>)
   82822:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   82826:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   82828:	4b1e      	ldr	r3, [pc, #120]	; (828a4 <start_acidpump+0x88>)
   8282a:	2203      	movs	r2, #3
   8282c:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   8282e:	4b1e      	ldr	r3, [pc, #120]	; (828a8 <start_acidpump+0x8c>)
   82830:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82834:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   82836:	4b1b      	ldr	r3, [pc, #108]	; (828a4 <start_acidpump+0x88>)
   82838:	4a1c      	ldr	r2, [pc, #112]	; (828ac <start_acidpump+0x90>)
   8283a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   8283e:	4b1a      	ldr	r3, [pc, #104]	; (828a8 <start_acidpump+0x8c>)
   82840:	4a1a      	ldr	r2, [pc, #104]	; (828ac <start_acidpump+0x90>)
   82842:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   82846:	4b17      	ldr	r3, [pc, #92]	; (828a4 <start_acidpump+0x88>)
   82848:	2203      	movs	r2, #3
   8284a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   8284e:	4b15      	ldr	r3, [pc, #84]	; (828a4 <start_acidpump+0x88>)
   82850:	220c      	movs	r2, #12
   82852:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   82856:	4b14      	ldr	r3, [pc, #80]	; (828a8 <start_acidpump+0x8c>)
   82858:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   8285c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   82860:	4b11      	ldr	r3, [pc, #68]	; (828a8 <start_acidpump+0x8c>)
   82862:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82866:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   8286a:	4a0e      	ldr	r2, [pc, #56]	; (828a4 <start_acidpump+0x88>)
   8286c:	4b10      	ldr	r3, [pc, #64]	; (828b0 <start_acidpump+0x94>)
   8286e:	681b      	ldr	r3, [r3, #0]
   82870:	4910      	ldr	r1, [pc, #64]	; (828b4 <start_acidpump+0x98>)
   82872:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82876:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   82878:	4a0b      	ldr	r2, [pc, #44]	; (828a8 <start_acidpump+0x8c>)
   8287a:	4b0d      	ldr	r3, [pc, #52]	; (828b0 <start_acidpump+0x94>)
   8287c:	681b      	ldr	r3, [r3, #0]
   8287e:	490d      	ldr	r1, [pc, #52]	; (828b4 <start_acidpump+0x98>)
   82880:	00db      	lsls	r3, r3, #3
   82882:	440b      	add	r3, r1
   82884:	685b      	ldr	r3, [r3, #4]
   82886:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   82888:	2001      	movs	r0, #1
   8288a:	4b0b      	ldr	r3, [pc, #44]	; (828b8 <start_acidpump+0x9c>)
   8288c:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);
   8288e:	4b0b      	ldr	r3, [pc, #44]	; (828bc <start_acidpump+0xa0>)
   82890:	881b      	ldrh	r3, [r3, #0]
   82892:	221b      	movs	r2, #27
   82894:	2100      	movs	r1, #0
   82896:	480a      	ldr	r0, [pc, #40]	; (828c0 <start_acidpump+0xa4>)
   82898:	4c0a      	ldr	r4, [pc, #40]	; (828c4 <start_acidpump+0xa8>)
   8289a:	47a0      	blx	r4
	
}
   8289c:	bf00      	nop
   8289e:	bd98      	pop	{r3, r4, r7, pc}
   828a0:	400e0e00 	.word	0x400e0e00
   828a4:	400e1400 	.word	0x400e1400
   828a8:	400e1200 	.word	0x400e1200
   828ac:	50494f00 	.word	0x50494f00
   828b0:	20070cd4 	.word	0x20070cd4
   828b4:	20070000 	.word	0x20070000
   828b8:	00081491 	.word	0x00081491
   828bc:	20070cde 	.word	0x20070cde
   828c0:	40080000 	.word	0x40080000
   828c4:	000812cd 	.word	0x000812cd

000828c8 <start_pump>:


	
void start_pump()
{
   828c8:	b598      	push	{r3, r4, r7, lr}
   828ca:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   828cc:	4b37      	ldr	r3, [pc, #220]	; (829ac <start_pump+0xe4>)
   828ce:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   828d2:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   828d4:	4b36      	ldr	r3, [pc, #216]	; (829b0 <start_pump+0xe8>)
   828d6:	2203      	movs	r2, #3
   828d8:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   828da:	4b36      	ldr	r3, [pc, #216]	; (829b4 <start_pump+0xec>)
   828dc:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   828e0:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   828e2:	4b33      	ldr	r3, [pc, #204]	; (829b0 <start_pump+0xe8>)
   828e4:	4a34      	ldr	r2, [pc, #208]	; (829b8 <start_pump+0xf0>)
   828e6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   828ea:	4b32      	ldr	r3, [pc, #200]	; (829b4 <start_pump+0xec>)
   828ec:	4a32      	ldr	r2, [pc, #200]	; (829b8 <start_pump+0xf0>)
   828ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   828f2:	4b2f      	ldr	r3, [pc, #188]	; (829b0 <start_pump+0xe8>)
   828f4:	2203      	movs	r2, #3
   828f6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   828fa:	4b2d      	ldr	r3, [pc, #180]	; (829b0 <start_pump+0xe8>)
   828fc:	220c      	movs	r2, #12
   828fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   82902:	4b2c      	ldr	r3, [pc, #176]	; (829b4 <start_pump+0xec>)
   82904:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82908:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   8290c:	4b29      	ldr	r3, [pc, #164]	; (829b4 <start_pump+0xec>)
   8290e:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82912:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   82916:	4a26      	ldr	r2, [pc, #152]	; (829b0 <start_pump+0xe8>)
   82918:	4b28      	ldr	r3, [pc, #160]	; (829bc <start_pump+0xf4>)
   8291a:	681b      	ldr	r3, [r3, #0]
   8291c:	4928      	ldr	r1, [pc, #160]	; (829c0 <start_pump+0xf8>)
   8291e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82922:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   82924:	4a23      	ldr	r2, [pc, #140]	; (829b4 <start_pump+0xec>)
   82926:	4b25      	ldr	r3, [pc, #148]	; (829bc <start_pump+0xf4>)
   82928:	681b      	ldr	r3, [r3, #0]
   8292a:	4925      	ldr	r1, [pc, #148]	; (829c0 <start_pump+0xf8>)
   8292c:	00db      	lsls	r3, r3, #3
   8292e:	440b      	add	r3, r1
   82930:	685b      	ldr	r3, [r3, #4]
   82932:	6393      	str	r3, [r2, #56]	; 0x38
	
	
	
	PIOD->PIO_WPMR	= 0x50494F00;
   82934:	4b1e      	ldr	r3, [pc, #120]	; (829b0 <start_pump+0xe8>)
   82936:	4a20      	ldr	r2, [pc, #128]	; (829b8 <start_pump+0xf0>)
   82938:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   8293c:	4b1d      	ldr	r3, [pc, #116]	; (829b4 <start_pump+0xec>)
   8293e:	4a1e      	ldr	r2, [pc, #120]	; (829b8 <start_pump+0xf0>)
   82940:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   82944:	4b1a      	ldr	r3, [pc, #104]	; (829b0 <start_pump+0xe8>)
   82946:	220c      	movs	r2, #12
   82948:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR = 0x000000003;
   8294c:	4b18      	ldr	r3, [pc, #96]	; (829b0 <start_pump+0xe8>)
   8294e:	2203      	movs	r2, #3
   82950:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   82954:	4b17      	ldr	r3, [pc, #92]	; (829b4 <start_pump+0xec>)
   82956:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   8295a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   8295e:	4b15      	ldr	r3, [pc, #84]	; (829b4 <start_pump+0xec>)
   82960:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82964:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOB->PIO_CODR  = 0x00204000;			// brake clear
   82968:	4b16      	ldr	r3, [pc, #88]	; (829c4 <start_pump+0xfc>)
   8296a:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   8296e:	635a      	str	r2, [r3, #52]	; 0x34
			
	PIOD->PIO_ODSR = array_bicar[count].dir;
   82970:	4a0f      	ldr	r2, [pc, #60]	; (829b0 <start_pump+0xe8>)
   82972:	4b12      	ldr	r3, [pc, #72]	; (829bc <start_pump+0xf4>)
   82974:	681b      	ldr	r3, [r3, #0]
   82976:	4914      	ldr	r1, [pc, #80]	; (829c8 <start_pump+0x100>)
   82978:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   8297c:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_bicar[count].AB;
   8297e:	4a0d      	ldr	r2, [pc, #52]	; (829b4 <start_pump+0xec>)
   82980:	4b0e      	ldr	r3, [pc, #56]	; (829bc <start_pump+0xf4>)
   82982:	681b      	ldr	r3, [r3, #0]
   82984:	4910      	ldr	r1, [pc, #64]	; (829c8 <start_pump+0x100>)
   82986:	00db      	lsls	r3, r3, #3
   82988:	440b      	add	r3, r1
   8298a:	685b      	ldr	r3, [r3, #4]
   8298c:	6393      	str	r3, [r2, #56]	; 0x38
			
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   8298e:	2001      	movs	r0, #1
   82990:	4b0e      	ldr	r3, [pc, #56]	; (829cc <start_pump+0x104>)
   82992:	4798      	blx	r3
	cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   82994:	2002      	movs	r0, #2
   82996:	4b0d      	ldr	r3, [pc, #52]	; (829cc <start_pump+0x104>)
   82998:	4798      	blx	r3
	
	
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   8299a:	4b0d      	ldr	r3, [pc, #52]	; (829d0 <start_pump+0x108>)
   8299c:	881b      	ldrh	r3, [r3, #0]
   8299e:	221b      	movs	r2, #27
   829a0:	2100      	movs	r1, #0
   829a2:	480c      	ldr	r0, [pc, #48]	; (829d4 <start_pump+0x10c>)
   829a4:	4c0c      	ldr	r4, [pc, #48]	; (829d8 <start_pump+0x110>)
   829a6:	47a0      	blx	r4
}
   829a8:	bf00      	nop
   829aa:	bd98      	pop	{r3, r4, r7, pc}
   829ac:	400e0e00 	.word	0x400e0e00
   829b0:	400e1400 	.word	0x400e1400
   829b4:	400e1200 	.word	0x400e1200
   829b8:	50494f00 	.word	0x50494f00
   829bc:	20070cd4 	.word	0x20070cd4
   829c0:	20070000 	.word	0x20070000
   829c4:	400e1000 	.word	0x400e1000
   829c8:	20070200 	.word	0x20070200
   829cc:	00081491 	.word	0x00081491
   829d0:	20070cde 	.word	0x20070cde
   829d4:	40080000 	.word	0x40080000
   829d8:	000812cd 	.word	0x000812cd

000829dc <start_bicarpump>:


void start_bicarpump()
{
   829dc:	b598      	push	{r3, r4, r7, lr}
   829de:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   829e0:	4b1c      	ldr	r3, [pc, #112]	; (82a54 <start_bicarpump+0x78>)
   829e2:	4a1d      	ldr	r2, [pc, #116]	; (82a58 <start_bicarpump+0x7c>)
   829e4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   829e8:	4b1c      	ldr	r3, [pc, #112]	; (82a5c <start_bicarpump+0x80>)
   829ea:	4a1b      	ldr	r2, [pc, #108]	; (82a58 <start_bicarpump+0x7c>)
   829ec:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   829f0:	4b18      	ldr	r3, [pc, #96]	; (82a54 <start_bicarpump+0x78>)
   829f2:	220c      	movs	r2, #12
   829f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   829f8:	4b16      	ldr	r3, [pc, #88]	; (82a54 <start_bicarpump+0x78>)
   829fa:	2203      	movs	r2, #3
   829fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   82a00:	4b16      	ldr	r3, [pc, #88]	; (82a5c <start_bicarpump+0x80>)
   82a02:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82a06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   82a0a:	4b14      	ldr	r3, [pc, #80]	; (82a5c <start_bicarpump+0x80>)
   82a0c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   82a10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   82a14:	4b12      	ldr	r3, [pc, #72]	; (82a60 <start_bicarpump+0x84>)
   82a16:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   82a1a:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   82a1c:	4a0d      	ldr	r2, [pc, #52]	; (82a54 <start_bicarpump+0x78>)
   82a1e:	4b11      	ldr	r3, [pc, #68]	; (82a64 <start_bicarpump+0x88>)
   82a20:	681b      	ldr	r3, [r3, #0]
   82a22:	4911      	ldr	r1, [pc, #68]	; (82a68 <start_bicarpump+0x8c>)
   82a24:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82a28:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   82a2a:	4a0c      	ldr	r2, [pc, #48]	; (82a5c <start_bicarpump+0x80>)
   82a2c:	4b0d      	ldr	r3, [pc, #52]	; (82a64 <start_bicarpump+0x88>)
   82a2e:	681b      	ldr	r3, [r3, #0]
   82a30:	490d      	ldr	r1, [pc, #52]	; (82a68 <start_bicarpump+0x8c>)
   82a32:	00db      	lsls	r3, r3, #3
   82a34:	440b      	add	r3, r1
   82a36:	685b      	ldr	r3, [r3, #4]
   82a38:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   82a3a:	2002      	movs	r0, #2
   82a3c:	4b0b      	ldr	r3, [pc, #44]	; (82a6c <start_bicarpump+0x90>)
   82a3e:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   82a40:	4b0b      	ldr	r3, [pc, #44]	; (82a70 <start_bicarpump+0x94>)
   82a42:	881b      	ldrh	r3, [r3, #0]
   82a44:	221c      	movs	r2, #28
   82a46:	2101      	movs	r1, #1
   82a48:	480a      	ldr	r0, [pc, #40]	; (82a74 <start_bicarpump+0x98>)
   82a4a:	4c0b      	ldr	r4, [pc, #44]	; (82a78 <start_bicarpump+0x9c>)
   82a4c:	47a0      	blx	r4
}
   82a4e:	bf00      	nop
   82a50:	bd98      	pop	{r3, r4, r7, pc}
   82a52:	bf00      	nop
   82a54:	400e1400 	.word	0x400e1400
   82a58:	50494f00 	.word	0x50494f00
   82a5c:	400e1200 	.word	0x400e1200
   82a60:	400e1000 	.word	0x400e1000
   82a64:	20070cd8 	.word	0x20070cd8
   82a68:	20070200 	.word	0x20070200
   82a6c:	00081491 	.word	0x00081491
   82a70:	20071220 	.word	0x20071220
   82a74:	40080000 	.word	0x40080000
   82a78:	0008133d 	.word	0x0008133d

00082a7c <stop_pump>:

void stop_pump()
{
   82a7c:	b580      	push	{r7, lr}
   82a7e:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   82a80:	2000      	movs	r0, #0
   82a82:	4b06      	ldr	r3, [pc, #24]	; (82a9c <stop_pump+0x20>)
   82a84:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   82a86:	2001      	movs	r0, #1
   82a88:	4b04      	ldr	r3, [pc, #16]	; (82a9c <stop_pump+0x20>)
   82a8a:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   82a8c:	2003      	movs	r0, #3
   82a8e:	4b03      	ldr	r3, [pc, #12]	; (82a9c <stop_pump+0x20>)
   82a90:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   82a92:	2004      	movs	r0, #4
   82a94:	4b01      	ldr	r3, [pc, #4]	; (82a9c <stop_pump+0x20>)
   82a96:	4798      	blx	r3
}
   82a98:	bf00      	nop
   82a9a:	bd80      	pop	{r7, pc}
   82a9c:	000815ed 	.word	0x000815ed

00082aa0 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   82aa0:	b580      	push	{r7, lr}
   82aa2:	b082      	sub	sp, #8
   82aa4:	af00      	add	r7, sp, #0
   82aa6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82aa8:	687b      	ldr	r3, [r7, #4]
   82aaa:	2b07      	cmp	r3, #7
   82aac:	d831      	bhi.n	82b12 <osc_enable+0x72>
   82aae:	a201      	add	r2, pc, #4	; (adr r2, 82ab4 <osc_enable+0x14>)
   82ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82ab4:	00082b11 	.word	0x00082b11
   82ab8:	00082ad5 	.word	0x00082ad5
   82abc:	00082add 	.word	0x00082add
   82ac0:	00082ae5 	.word	0x00082ae5
   82ac4:	00082aed 	.word	0x00082aed
   82ac8:	00082af5 	.word	0x00082af5
   82acc:	00082afd 	.word	0x00082afd
   82ad0:	00082b07 	.word	0x00082b07
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82ad4:	2000      	movs	r0, #0
   82ad6:	4b11      	ldr	r3, [pc, #68]	; (82b1c <osc_enable+0x7c>)
   82ad8:	4798      	blx	r3
		break;
   82ada:	e01a      	b.n	82b12 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82adc:	2001      	movs	r0, #1
   82ade:	4b0f      	ldr	r3, [pc, #60]	; (82b1c <osc_enable+0x7c>)
   82ae0:	4798      	blx	r3
		break;
   82ae2:	e016      	b.n	82b12 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82ae4:	2000      	movs	r0, #0
   82ae6:	4b0e      	ldr	r3, [pc, #56]	; (82b20 <osc_enable+0x80>)
   82ae8:	4798      	blx	r3
		break;
   82aea:	e012      	b.n	82b12 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82aec:	2010      	movs	r0, #16
   82aee:	4b0c      	ldr	r3, [pc, #48]	; (82b20 <osc_enable+0x80>)
   82af0:	4798      	blx	r3
		break;
   82af2:	e00e      	b.n	82b12 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82af4:	2020      	movs	r0, #32
   82af6:	4b0a      	ldr	r3, [pc, #40]	; (82b20 <osc_enable+0x80>)
   82af8:	4798      	blx	r3
		break;
   82afa:	e00a      	b.n	82b12 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82afc:	213e      	movs	r1, #62	; 0x3e
   82afe:	2000      	movs	r0, #0
   82b00:	4b08      	ldr	r3, [pc, #32]	; (82b24 <osc_enable+0x84>)
   82b02:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82b04:	e005      	b.n	82b12 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   82b06:	213e      	movs	r1, #62	; 0x3e
   82b08:	2001      	movs	r0, #1
   82b0a:	4b06      	ldr	r3, [pc, #24]	; (82b24 <osc_enable+0x84>)
   82b0c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   82b0e:	e000      	b.n	82b12 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   82b10:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   82b12:	bf00      	nop
   82b14:	3708      	adds	r7, #8
   82b16:	46bd      	mov	sp, r7
   82b18:	bd80      	pop	{r7, pc}
   82b1a:	bf00      	nop
   82b1c:	0008344d 	.word	0x0008344d
   82b20:	000834b9 	.word	0x000834b9
   82b24:	00083559 	.word	0x00083559

00082b28 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   82b28:	b580      	push	{r7, lr}
   82b2a:	b082      	sub	sp, #8
   82b2c:	af00      	add	r7, sp, #0
   82b2e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82b30:	687b      	ldr	r3, [r7, #4]
   82b32:	2b07      	cmp	r3, #7
   82b34:	d826      	bhi.n	82b84 <osc_is_ready+0x5c>
   82b36:	a201      	add	r2, pc, #4	; (adr r2, 82b3c <osc_is_ready+0x14>)
   82b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b3c:	00082b5d 	.word	0x00082b5d
   82b40:	00082b61 	.word	0x00082b61
   82b44:	00082b61 	.word	0x00082b61
   82b48:	00082b73 	.word	0x00082b73
   82b4c:	00082b73 	.word	0x00082b73
   82b50:	00082b73 	.word	0x00082b73
   82b54:	00082b73 	.word	0x00082b73
   82b58:	00082b73 	.word	0x00082b73
	case OSC_SLCK_32K_RC:
		return 1;
   82b5c:	2301      	movs	r3, #1
   82b5e:	e012      	b.n	82b86 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   82b60:	4b0b      	ldr	r3, [pc, #44]	; (82b90 <osc_is_ready+0x68>)
   82b62:	4798      	blx	r3
   82b64:	4603      	mov	r3, r0
   82b66:	2b00      	cmp	r3, #0
   82b68:	bf14      	ite	ne
   82b6a:	2301      	movne	r3, #1
   82b6c:	2300      	moveq	r3, #0
   82b6e:	b2db      	uxtb	r3, r3
   82b70:	e009      	b.n	82b86 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82b72:	4b08      	ldr	r3, [pc, #32]	; (82b94 <osc_is_ready+0x6c>)
   82b74:	4798      	blx	r3
   82b76:	4603      	mov	r3, r0
   82b78:	2b00      	cmp	r3, #0
   82b7a:	bf14      	ite	ne
   82b7c:	2301      	movne	r3, #1
   82b7e:	2300      	moveq	r3, #0
   82b80:	b2db      	uxtb	r3, r3
   82b82:	e000      	b.n	82b86 <osc_is_ready+0x5e>
	}

	return 0;
   82b84:	2300      	movs	r3, #0
}
   82b86:	4618      	mov	r0, r3
   82b88:	3708      	adds	r7, #8
   82b8a:	46bd      	mov	sp, r7
   82b8c:	bd80      	pop	{r7, pc}
   82b8e:	bf00      	nop
   82b90:	00083485 	.word	0x00083485
   82b94:	000835d1 	.word	0x000835d1

00082b98 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82b98:	b480      	push	{r7}
   82b9a:	b083      	sub	sp, #12
   82b9c:	af00      	add	r7, sp, #0
   82b9e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82ba0:	687b      	ldr	r3, [r7, #4]
   82ba2:	2b07      	cmp	r3, #7
   82ba4:	d825      	bhi.n	82bf2 <osc_get_rate+0x5a>
   82ba6:	a201      	add	r2, pc, #4	; (adr r2, 82bac <osc_get_rate+0x14>)
   82ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82bac:	00082bcd 	.word	0x00082bcd
   82bb0:	00082bd3 	.word	0x00082bd3
   82bb4:	00082bd9 	.word	0x00082bd9
   82bb8:	00082bdf 	.word	0x00082bdf
   82bbc:	00082be3 	.word	0x00082be3
   82bc0:	00082be7 	.word	0x00082be7
   82bc4:	00082beb 	.word	0x00082beb
   82bc8:	00082bef 	.word	0x00082bef
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82bcc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82bd0:	e010      	b.n	82bf4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82bd6:	e00d      	b.n	82bf4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82bdc:	e00a      	b.n	82bf4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   82bde:	4b08      	ldr	r3, [pc, #32]	; (82c00 <osc_get_rate+0x68>)
   82be0:	e008      	b.n	82bf4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82be2:	4b08      	ldr	r3, [pc, #32]	; (82c04 <osc_get_rate+0x6c>)
   82be4:	e006      	b.n	82bf4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82be6:	4b08      	ldr	r3, [pc, #32]	; (82c08 <osc_get_rate+0x70>)
   82be8:	e004      	b.n	82bf4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82bea:	4b07      	ldr	r3, [pc, #28]	; (82c08 <osc_get_rate+0x70>)
   82bec:	e002      	b.n	82bf4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   82bee:	4b06      	ldr	r3, [pc, #24]	; (82c08 <osc_get_rate+0x70>)
   82bf0:	e000      	b.n	82bf4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82bf2:	2300      	movs	r3, #0
}
   82bf4:	4618      	mov	r0, r3
   82bf6:	370c      	adds	r7, #12
   82bf8:	46bd      	mov	sp, r7
   82bfa:	bc80      	pop	{r7}
   82bfc:	4770      	bx	lr
   82bfe:	bf00      	nop
   82c00:	003d0900 	.word	0x003d0900
   82c04:	007a1200 	.word	0x007a1200
   82c08:	00b71b00 	.word	0x00b71b00

00082c0c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   82c0c:	b580      	push	{r7, lr}
   82c0e:	b082      	sub	sp, #8
   82c10:	af00      	add	r7, sp, #0
   82c12:	4603      	mov	r3, r0
   82c14:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   82c16:	bf00      	nop
   82c18:	79fb      	ldrb	r3, [r7, #7]
   82c1a:	4618      	mov	r0, r3
   82c1c:	4b05      	ldr	r3, [pc, #20]	; (82c34 <osc_wait_ready+0x28>)
   82c1e:	4798      	blx	r3
   82c20:	4603      	mov	r3, r0
   82c22:	f083 0301 	eor.w	r3, r3, #1
   82c26:	b2db      	uxtb	r3, r3
   82c28:	2b00      	cmp	r3, #0
   82c2a:	d1f5      	bne.n	82c18 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   82c2c:	bf00      	nop
   82c2e:	3708      	adds	r7, #8
   82c30:	46bd      	mov	sp, r7
   82c32:	bd80      	pop	{r7, pc}
   82c34:	00082b29 	.word	0x00082b29

00082c38 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   82c38:	b580      	push	{r7, lr}
   82c3a:	b086      	sub	sp, #24
   82c3c:	af00      	add	r7, sp, #0
   82c3e:	60f8      	str	r0, [r7, #12]
   82c40:	607a      	str	r2, [r7, #4]
   82c42:	603b      	str	r3, [r7, #0]
   82c44:	460b      	mov	r3, r1
   82c46:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   82c48:	687b      	ldr	r3, [r7, #4]
   82c4a:	2b00      	cmp	r3, #0
   82c4c:	d107      	bne.n	82c5e <pll_config_init+0x26>
   82c4e:	683b      	ldr	r3, [r7, #0]
   82c50:	2b00      	cmp	r3, #0
   82c52:	d104      	bne.n	82c5e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   82c54:	68fb      	ldr	r3, [r7, #12]
   82c56:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   82c5a:	601a      	str	r2, [r3, #0]
   82c5c:	e019      	b.n	82c92 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   82c5e:	7afb      	ldrb	r3, [r7, #11]
   82c60:	4618      	mov	r0, r3
   82c62:	4b0e      	ldr	r3, [pc, #56]	; (82c9c <pll_config_init+0x64>)
   82c64:	4798      	blx	r3
   82c66:	4602      	mov	r2, r0
   82c68:	687b      	ldr	r3, [r7, #4]
   82c6a:	fbb2 f3f3 	udiv	r3, r2, r3
   82c6e:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   82c70:	697b      	ldr	r3, [r7, #20]
   82c72:	683a      	ldr	r2, [r7, #0]
   82c74:	fb02 f303 	mul.w	r3, r2, r3
   82c78:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82c7a:	683b      	ldr	r3, [r7, #0]
   82c7c:	3b01      	subs	r3, #1
   82c7e:	041a      	lsls	r2, r3, #16
   82c80:	4b07      	ldr	r3, [pc, #28]	; (82ca0 <pll_config_init+0x68>)
   82c82:	4013      	ands	r3, r2
   82c84:	687a      	ldr	r2, [r7, #4]
   82c86:	b2d2      	uxtb	r2, r2
   82c88:	4313      	orrs	r3, r2
   82c8a:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   82c8e:	68fb      	ldr	r3, [r7, #12]
   82c90:	601a      	str	r2, [r3, #0]
	}
}
   82c92:	bf00      	nop
   82c94:	3718      	adds	r7, #24
   82c96:	46bd      	mov	sp, r7
   82c98:	bd80      	pop	{r7, pc}
   82c9a:	bf00      	nop
   82c9c:	00082b99 	.word	0x00082b99
   82ca0:	07ff0000 	.word	0x07ff0000

00082ca4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82ca4:	b580      	push	{r7, lr}
   82ca6:	b082      	sub	sp, #8
   82ca8:	af00      	add	r7, sp, #0
   82caa:	6078      	str	r0, [r7, #4]
   82cac:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82cae:	683b      	ldr	r3, [r7, #0]
   82cb0:	2b00      	cmp	r3, #0
   82cb2:	d108      	bne.n	82cc6 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82cb4:	4b09      	ldr	r3, [pc, #36]	; (82cdc <pll_enable+0x38>)
   82cb6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82cb8:	4a09      	ldr	r2, [pc, #36]	; (82ce0 <pll_enable+0x3c>)
   82cba:	687b      	ldr	r3, [r7, #4]
   82cbc:	681b      	ldr	r3, [r3, #0]
   82cbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82cc2:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   82cc4:	e005      	b.n	82cd2 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82cc6:	4a06      	ldr	r2, [pc, #24]	; (82ce0 <pll_enable+0x3c>)
   82cc8:	687b      	ldr	r3, [r7, #4]
   82cca:	681b      	ldr	r3, [r3, #0]
   82ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82cd0:	61d3      	str	r3, [r2, #28]
	}
}
   82cd2:	bf00      	nop
   82cd4:	3708      	adds	r7, #8
   82cd6:	46bd      	mov	sp, r7
   82cd8:	bd80      	pop	{r7, pc}
   82cda:	bf00      	nop
   82cdc:	000835e9 	.word	0x000835e9
   82ce0:	400e0600 	.word	0x400e0600

00082ce4 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82ce4:	b580      	push	{r7, lr}
   82ce6:	b082      	sub	sp, #8
   82ce8:	af00      	add	r7, sp, #0
   82cea:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82cec:	687b      	ldr	r3, [r7, #4]
   82cee:	2b00      	cmp	r3, #0
   82cf0:	d103      	bne.n	82cfa <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   82cf2:	4b05      	ldr	r3, [pc, #20]	; (82d08 <pll_is_locked+0x24>)
   82cf4:	4798      	blx	r3
   82cf6:	4603      	mov	r3, r0
   82cf8:	e002      	b.n	82d00 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82cfa:	4b04      	ldr	r3, [pc, #16]	; (82d0c <pll_is_locked+0x28>)
   82cfc:	4798      	blx	r3
   82cfe:	4603      	mov	r3, r0
	}
}
   82d00:	4618      	mov	r0, r3
   82d02:	3708      	adds	r7, #8
   82d04:	46bd      	mov	sp, r7
   82d06:	bd80      	pop	{r7, pc}
   82d08:	00083601 	.word	0x00083601
   82d0c:	00083619 	.word	0x00083619

00082d10 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   82d10:	b580      	push	{r7, lr}
   82d12:	b082      	sub	sp, #8
   82d14:	af00      	add	r7, sp, #0
   82d16:	4603      	mov	r3, r0
   82d18:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   82d1a:	79fb      	ldrb	r3, [r7, #7]
   82d1c:	3b03      	subs	r3, #3
   82d1e:	2b04      	cmp	r3, #4
   82d20:	d808      	bhi.n	82d34 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   82d22:	79fb      	ldrb	r3, [r7, #7]
   82d24:	4618      	mov	r0, r3
   82d26:	4b06      	ldr	r3, [pc, #24]	; (82d40 <pll_enable_source+0x30>)
   82d28:	4798      	blx	r3
		osc_wait_ready(e_src);
   82d2a:	79fb      	ldrb	r3, [r7, #7]
   82d2c:	4618      	mov	r0, r3
   82d2e:	4b05      	ldr	r3, [pc, #20]	; (82d44 <pll_enable_source+0x34>)
   82d30:	4798      	blx	r3
		break;
   82d32:	e000      	b.n	82d36 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   82d34:	bf00      	nop
	}
}
   82d36:	bf00      	nop
   82d38:	3708      	adds	r7, #8
   82d3a:	46bd      	mov	sp, r7
   82d3c:	bd80      	pop	{r7, pc}
   82d3e:	bf00      	nop
   82d40:	00082aa1 	.word	0x00082aa1
   82d44:	00082c0d 	.word	0x00082c0d

00082d48 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   82d48:	b580      	push	{r7, lr}
   82d4a:	b082      	sub	sp, #8
   82d4c:	af00      	add	r7, sp, #0
   82d4e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   82d50:	bf00      	nop
   82d52:	6878      	ldr	r0, [r7, #4]
   82d54:	4b04      	ldr	r3, [pc, #16]	; (82d68 <pll_wait_for_lock+0x20>)
   82d56:	4798      	blx	r3
   82d58:	4603      	mov	r3, r0
   82d5a:	2b00      	cmp	r3, #0
   82d5c:	d0f9      	beq.n	82d52 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   82d5e:	2300      	movs	r3, #0
}
   82d60:	4618      	mov	r0, r3
   82d62:	3708      	adds	r7, #8
   82d64:	46bd      	mov	sp, r7
   82d66:	bd80      	pop	{r7, pc}
   82d68:	00082ce5 	.word	0x00082ce5

00082d6c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82d6c:	b580      	push	{r7, lr}
   82d6e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82d70:	2006      	movs	r0, #6
   82d72:	4b04      	ldr	r3, [pc, #16]	; (82d84 <sysclk_get_main_hz+0x18>)
   82d74:	4798      	blx	r3
   82d76:	4602      	mov	r2, r0
   82d78:	4613      	mov	r3, r2
   82d7a:	00db      	lsls	r3, r3, #3
   82d7c:	1a9b      	subs	r3, r3, r2
   82d7e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82d80:	4618      	mov	r0, r3
   82d82:	bd80      	pop	{r7, pc}
   82d84:	00082b99 	.word	0x00082b99

00082d88 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82d88:	b580      	push	{r7, lr}
   82d8a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82d8c:	4b02      	ldr	r3, [pc, #8]	; (82d98 <sysclk_get_cpu_hz+0x10>)
   82d8e:	4798      	blx	r3
   82d90:	4603      	mov	r3, r0
   82d92:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82d94:	4618      	mov	r0, r3
   82d96:	bd80      	pop	{r7, pc}
   82d98:	00082d6d 	.word	0x00082d6d

00082d9c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82d9c:	b590      	push	{r4, r7, lr}
   82d9e:	b083      	sub	sp, #12
   82da0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82da2:	4b10      	ldr	r3, [pc, #64]	; (82de4 <sysclk_init+0x48>)
   82da4:	4798      	blx	r3
   82da6:	4603      	mov	r3, r0
   82da8:	4618      	mov	r0, r3
   82daa:	4b0f      	ldr	r3, [pc, #60]	; (82de8 <sysclk_init+0x4c>)
   82dac:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   82dae:	2006      	movs	r0, #6
   82db0:	4b0e      	ldr	r3, [pc, #56]	; (82dec <sysclk_init+0x50>)
   82db2:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82db4:	1d38      	adds	r0, r7, #4
   82db6:	230e      	movs	r3, #14
   82db8:	2201      	movs	r2, #1
   82dba:	2106      	movs	r1, #6
   82dbc:	4c0c      	ldr	r4, [pc, #48]	; (82df0 <sysclk_init+0x54>)
   82dbe:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   82dc0:	1d3b      	adds	r3, r7, #4
   82dc2:	2100      	movs	r1, #0
   82dc4:	4618      	mov	r0, r3
   82dc6:	4b0b      	ldr	r3, [pc, #44]	; (82df4 <sysclk_init+0x58>)
   82dc8:	4798      	blx	r3
		pll_wait_for_lock(0);
   82dca:	2000      	movs	r0, #0
   82dcc:	4b0a      	ldr	r3, [pc, #40]	; (82df8 <sysclk_init+0x5c>)
   82dce:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82dd0:	2010      	movs	r0, #16
   82dd2:	4b0a      	ldr	r3, [pc, #40]	; (82dfc <sysclk_init+0x60>)
   82dd4:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82dd6:	4b0a      	ldr	r3, [pc, #40]	; (82e00 <sysclk_init+0x64>)
   82dd8:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82dda:	bf00      	nop
   82ddc:	370c      	adds	r7, #12
   82dde:	46bd      	mov	sp, r7
   82de0:	bd90      	pop	{r4, r7, pc}
   82de2:	bf00      	nop
   82de4:	00082d89 	.word	0x00082d89
   82de8:	0008391d 	.word	0x0008391d
   82dec:	00082d11 	.word	0x00082d11
   82df0:	00082c39 	.word	0x00082c39
   82df4:	00082ca5 	.word	0x00082ca5
   82df8:	00082d49 	.word	0x00082d49
   82dfc:	000833cd 	.word	0x000833cd
   82e00:	00083799 	.word	0x00083799

00082e04 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   82e04:	b580      	push	{r7, lr}
   82e06:	b082      	sub	sp, #8
   82e08:	af00      	add	r7, sp, #0
   82e0a:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82e0c:	6878      	ldr	r0, [r7, #4]
   82e0e:	4b03      	ldr	r3, [pc, #12]	; (82e1c <sysclk_enable_peripheral_clock+0x18>)
   82e10:	4798      	blx	r3
}
   82e12:	bf00      	nop
   82e14:	3708      	adds	r7, #8
   82e16:	46bd      	mov	sp, r7
   82e18:	bd80      	pop	{r7, pc}
   82e1a:	bf00      	nop
   82e1c:	00083631 	.word	0x00083631

00082e20 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   82e20:	b580      	push	{r7, lr}
   82e22:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   82e24:	200b      	movs	r0, #11
   82e26:	4b06      	ldr	r3, [pc, #24]	; (82e40 <ioport_init+0x20>)
   82e28:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   82e2a:	200c      	movs	r0, #12
   82e2c:	4b04      	ldr	r3, [pc, #16]	; (82e40 <ioport_init+0x20>)
   82e2e:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   82e30:	200d      	movs	r0, #13
   82e32:	4b03      	ldr	r3, [pc, #12]	; (82e40 <ioport_init+0x20>)
   82e34:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   82e36:	200e      	movs	r0, #14
   82e38:	4b01      	ldr	r3, [pc, #4]	; (82e40 <ioport_init+0x20>)
   82e3a:	4798      	blx	r3
	arch_ioport_init();
}
   82e3c:	bf00      	nop
   82e3e:	bd80      	pop	{r7, pc}
   82e40:	00082e05 	.word	0x00082e05

00082e44 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82e44:	b580      	push	{r7, lr}
   82e46:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82e48:	4b17      	ldr	r3, [pc, #92]	; (82ea8 <board_init+0x64>)
   82e4a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82e4e:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   82e50:	4b16      	ldr	r3, [pc, #88]	; (82eac <board_init+0x68>)
   82e52:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82e54:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e58:	203b      	movs	r0, #59	; 0x3b
   82e5a:	4b15      	ldr	r3, [pc, #84]	; (82eb0 <board_init+0x6c>)
   82e5c:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82e5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e62:	2055      	movs	r0, #85	; 0x55
   82e64:	4b12      	ldr	r3, [pc, #72]	; (82eb0 <board_init+0x6c>)
   82e66:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82e68:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82e6c:	2056      	movs	r0, #86	; 0x56
   82e6e:	4b10      	ldr	r3, [pc, #64]	; (82eb0 <board_init+0x6c>)
   82e70:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82e72:	4910      	ldr	r1, [pc, #64]	; (82eb4 <board_init+0x70>)
   82e74:	2068      	movs	r0, #104	; 0x68
   82e76:	4b0e      	ldr	r3, [pc, #56]	; (82eb0 <board_init+0x6c>)
   82e78:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82e7a:	490f      	ldr	r1, [pc, #60]	; (82eb8 <board_init+0x74>)
   82e7c:	205c      	movs	r0, #92	; 0x5c
   82e7e:	4b0c      	ldr	r3, [pc, #48]	; (82eb0 <board_init+0x6c>)
   82e80:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82e86:	f44f 7140 	mov.w	r1, #768	; 0x300
   82e8a:	480c      	ldr	r0, [pc, #48]	; (82ebc <board_init+0x78>)
   82e8c:	4b0c      	ldr	r3, [pc, #48]	; (82ec0 <board_init+0x7c>)
   82e8e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82e90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e94:	202b      	movs	r0, #43	; 0x2b
   82e96:	4b06      	ldr	r3, [pc, #24]	; (82eb0 <board_init+0x6c>)
   82e98:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82e9a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82e9e:	202a      	movs	r0, #42	; 0x2a
   82ea0:	4b03      	ldr	r3, [pc, #12]	; (82eb0 <board_init+0x6c>)
   82ea2:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82ea4:	bf00      	nop
   82ea6:	bd80      	pop	{r7, pc}
   82ea8:	400e1a50 	.word	0x400e1a50
   82eac:	00082e21 	.word	0x00082e21
   82eb0:	000830a1 	.word	0x000830a1
   82eb4:	28000079 	.word	0x28000079
   82eb8:	28000001 	.word	0x28000001
   82ebc:	400e0e00 	.word	0x400e0e00
   82ec0:	000831dd 	.word	0x000831dd

00082ec4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82ec4:	b480      	push	{r7}
   82ec6:	b085      	sub	sp, #20
   82ec8:	af00      	add	r7, sp, #0
   82eca:	60f8      	str	r0, [r7, #12]
   82ecc:	60b9      	str	r1, [r7, #8]
   82ece:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82ed0:	687b      	ldr	r3, [r7, #4]
   82ed2:	2b00      	cmp	r3, #0
   82ed4:	d003      	beq.n	82ede <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82ed6:	68fb      	ldr	r3, [r7, #12]
   82ed8:	68ba      	ldr	r2, [r7, #8]
   82eda:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82edc:	e002      	b.n	82ee4 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82ede:	68fb      	ldr	r3, [r7, #12]
   82ee0:	68ba      	ldr	r2, [r7, #8]
   82ee2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82ee4:	bf00      	nop
   82ee6:	3714      	adds	r7, #20
   82ee8:	46bd      	mov	sp, r7
   82eea:	bc80      	pop	{r7}
   82eec:	4770      	bx	lr
   82eee:	bf00      	nop

00082ef0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   82ef0:	b480      	push	{r7}
   82ef2:	b087      	sub	sp, #28
   82ef4:	af00      	add	r7, sp, #0
   82ef6:	60f8      	str	r0, [r7, #12]
   82ef8:	60b9      	str	r1, [r7, #8]
   82efa:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82efc:	68fb      	ldr	r3, [r7, #12]
   82efe:	687a      	ldr	r2, [r7, #4]
   82f00:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   82f02:	68bb      	ldr	r3, [r7, #8]
   82f04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82f08:	d01f      	beq.n	82f4a <pio_set_peripheral+0x5a>
   82f0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82f0e:	d805      	bhi.n	82f1c <pio_set_peripheral+0x2c>
   82f10:	2b00      	cmp	r3, #0
   82f12:	d027      	beq.n	82f64 <pio_set_peripheral+0x74>
   82f14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82f18:	d00a      	beq.n	82f30 <pio_set_peripheral+0x40>
   82f1a:	e01f      	b.n	82f5c <pio_set_peripheral+0x6c>
   82f1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82f20:	d020      	beq.n	82f64 <pio_set_peripheral+0x74>
   82f22:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82f26:	d01d      	beq.n	82f64 <pio_set_peripheral+0x74>
   82f28:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82f2c:	d01a      	beq.n	82f64 <pio_set_peripheral+0x74>
   82f2e:	e015      	b.n	82f5c <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82f30:	68fb      	ldr	r3, [r7, #12]
   82f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82f34:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82f36:	68fb      	ldr	r3, [r7, #12]
   82f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   82f3a:	687b      	ldr	r3, [r7, #4]
   82f3c:	43d9      	mvns	r1, r3
   82f3e:	697b      	ldr	r3, [r7, #20]
   82f40:	400b      	ands	r3, r1
   82f42:	401a      	ands	r2, r3
   82f44:	68fb      	ldr	r3, [r7, #12]
   82f46:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82f48:	e008      	b.n	82f5c <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82f4a:	68fb      	ldr	r3, [r7, #12]
   82f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   82f4e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82f50:	687a      	ldr	r2, [r7, #4]
   82f52:	697b      	ldr	r3, [r7, #20]
   82f54:	431a      	orrs	r2, r3
   82f56:	68fb      	ldr	r3, [r7, #12]
   82f58:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   82f5a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82f5c:	68fb      	ldr	r3, [r7, #12]
   82f5e:	687a      	ldr	r2, [r7, #4]
   82f60:	605a      	str	r2, [r3, #4]
   82f62:	e000      	b.n	82f66 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82f64:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   82f66:	371c      	adds	r7, #28
   82f68:	46bd      	mov	sp, r7
   82f6a:	bc80      	pop	{r7}
   82f6c:	4770      	bx	lr
   82f6e:	bf00      	nop

00082f70 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   82f70:	b580      	push	{r7, lr}
   82f72:	b084      	sub	sp, #16
   82f74:	af00      	add	r7, sp, #0
   82f76:	60f8      	str	r0, [r7, #12]
   82f78:	60b9      	str	r1, [r7, #8]
   82f7a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82f7c:	68b9      	ldr	r1, [r7, #8]
   82f7e:	68f8      	ldr	r0, [r7, #12]
   82f80:	4b19      	ldr	r3, [pc, #100]	; (82fe8 <pio_set_input+0x78>)
   82f82:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82f84:	687b      	ldr	r3, [r7, #4]
   82f86:	f003 0301 	and.w	r3, r3, #1
   82f8a:	461a      	mov	r2, r3
   82f8c:	68b9      	ldr	r1, [r7, #8]
   82f8e:	68f8      	ldr	r0, [r7, #12]
   82f90:	4b16      	ldr	r3, [pc, #88]	; (82fec <pio_set_input+0x7c>)
   82f92:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82f94:	687b      	ldr	r3, [r7, #4]
   82f96:	f003 030a 	and.w	r3, r3, #10
   82f9a:	2b00      	cmp	r3, #0
   82f9c:	d003      	beq.n	82fa6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   82f9e:	68fb      	ldr	r3, [r7, #12]
   82fa0:	68ba      	ldr	r2, [r7, #8]
   82fa2:	621a      	str	r2, [r3, #32]
   82fa4:	e002      	b.n	82fac <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82fa6:	68fb      	ldr	r3, [r7, #12]
   82fa8:	68ba      	ldr	r2, [r7, #8]
   82faa:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82fac:	687b      	ldr	r3, [r7, #4]
   82fae:	f003 0302 	and.w	r3, r3, #2
   82fb2:	2b00      	cmp	r3, #0
   82fb4:	d004      	beq.n	82fc0 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82fb6:	68fb      	ldr	r3, [r7, #12]
   82fb8:	68ba      	ldr	r2, [r7, #8]
   82fba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   82fbe:	e008      	b.n	82fd2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   82fc0:	687b      	ldr	r3, [r7, #4]
   82fc2:	f003 0308 	and.w	r3, r3, #8
   82fc6:	2b00      	cmp	r3, #0
   82fc8:	d003      	beq.n	82fd2 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   82fca:	68fb      	ldr	r3, [r7, #12]
   82fcc:	68ba      	ldr	r2, [r7, #8]
   82fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82fd2:	68fb      	ldr	r3, [r7, #12]
   82fd4:	68ba      	ldr	r2, [r7, #8]
   82fd6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82fd8:	68fb      	ldr	r3, [r7, #12]
   82fda:	68ba      	ldr	r2, [r7, #8]
   82fdc:	601a      	str	r2, [r3, #0]
}
   82fde:	bf00      	nop
   82fe0:	3710      	adds	r7, #16
   82fe2:	46bd      	mov	sp, r7
   82fe4:	bd80      	pop	{r7, pc}
   82fe6:	bf00      	nop
   82fe8:	00083055 	.word	0x00083055
   82fec:	00082ec5 	.word	0x00082ec5

00082ff0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82ff0:	b580      	push	{r7, lr}
   82ff2:	b084      	sub	sp, #16
   82ff4:	af00      	add	r7, sp, #0
   82ff6:	60f8      	str	r0, [r7, #12]
   82ff8:	60b9      	str	r1, [r7, #8]
   82ffa:	607a      	str	r2, [r7, #4]
   82ffc:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   82ffe:	68b9      	ldr	r1, [r7, #8]
   83000:	68f8      	ldr	r0, [r7, #12]
   83002:	4b12      	ldr	r3, [pc, #72]	; (8304c <pio_set_output+0x5c>)
   83004:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   83006:	69ba      	ldr	r2, [r7, #24]
   83008:	68b9      	ldr	r1, [r7, #8]
   8300a:	68f8      	ldr	r0, [r7, #12]
   8300c:	4b10      	ldr	r3, [pc, #64]	; (83050 <pio_set_output+0x60>)
   8300e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83010:	683b      	ldr	r3, [r7, #0]
   83012:	2b00      	cmp	r3, #0
   83014:	d003      	beq.n	8301e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   83016:	68fb      	ldr	r3, [r7, #12]
   83018:	68ba      	ldr	r2, [r7, #8]
   8301a:	651a      	str	r2, [r3, #80]	; 0x50
   8301c:	e002      	b.n	83024 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8301e:	68fb      	ldr	r3, [r7, #12]
   83020:	68ba      	ldr	r2, [r7, #8]
   83022:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83024:	687b      	ldr	r3, [r7, #4]
   83026:	2b00      	cmp	r3, #0
   83028:	d003      	beq.n	83032 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8302a:	68fb      	ldr	r3, [r7, #12]
   8302c:	68ba      	ldr	r2, [r7, #8]
   8302e:	631a      	str	r2, [r3, #48]	; 0x30
   83030:	e002      	b.n	83038 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83032:	68fb      	ldr	r3, [r7, #12]
   83034:	68ba      	ldr	r2, [r7, #8]
   83036:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83038:	68fb      	ldr	r3, [r7, #12]
   8303a:	68ba      	ldr	r2, [r7, #8]
   8303c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8303e:	68fb      	ldr	r3, [r7, #12]
   83040:	68ba      	ldr	r2, [r7, #8]
   83042:	601a      	str	r2, [r3, #0]
}
   83044:	bf00      	nop
   83046:	3710      	adds	r7, #16
   83048:	46bd      	mov	sp, r7
   8304a:	bd80      	pop	{r7, pc}
   8304c:	00083055 	.word	0x00083055
   83050:	00082ec5 	.word	0x00082ec5

00083054 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   83054:	b480      	push	{r7}
   83056:	b083      	sub	sp, #12
   83058:	af00      	add	r7, sp, #0
   8305a:	6078      	str	r0, [r7, #4]
   8305c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   8305e:	687b      	ldr	r3, [r7, #4]
   83060:	683a      	ldr	r2, [r7, #0]
   83062:	645a      	str	r2, [r3, #68]	; 0x44
}
   83064:	bf00      	nop
   83066:	370c      	adds	r7, #12
   83068:	46bd      	mov	sp, r7
   8306a:	bc80      	pop	{r7}
   8306c:	4770      	bx	lr
   8306e:	bf00      	nop

00083070 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83070:	b480      	push	{r7}
   83072:	b083      	sub	sp, #12
   83074:	af00      	add	r7, sp, #0
   83076:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83078:	687b      	ldr	r3, [r7, #4]
   8307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   8307c:	4618      	mov	r0, r3
   8307e:	370c      	adds	r7, #12
   83080:	46bd      	mov	sp, r7
   83082:	bc80      	pop	{r7}
   83084:	4770      	bx	lr
   83086:	bf00      	nop

00083088 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83088:	b480      	push	{r7}
   8308a:	b083      	sub	sp, #12
   8308c:	af00      	add	r7, sp, #0
   8308e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83090:	687b      	ldr	r3, [r7, #4]
   83092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83094:	4618      	mov	r0, r3
   83096:	370c      	adds	r7, #12
   83098:	46bd      	mov	sp, r7
   8309a:	bc80      	pop	{r7}
   8309c:	4770      	bx	lr
   8309e:	bf00      	nop

000830a0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   830a0:	b590      	push	{r4, r7, lr}
   830a2:	b087      	sub	sp, #28
   830a4:	af02      	add	r7, sp, #8
   830a6:	6078      	str	r0, [r7, #4]
   830a8:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   830aa:	687b      	ldr	r3, [r7, #4]
   830ac:	095b      	lsrs	r3, r3, #5
   830ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   830b2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   830b6:	025b      	lsls	r3, r3, #9
   830b8:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   830ba:	683b      	ldr	r3, [r7, #0]
   830bc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   830c0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   830c4:	d046      	beq.n	83154 <pio_configure_pin+0xb4>
   830c6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   830ca:	d806      	bhi.n	830da <pio_configure_pin+0x3a>
   830cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   830d0:	d00a      	beq.n	830e8 <pio_configure_pin+0x48>
   830d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   830d6:	d022      	beq.n	8311e <pio_configure_pin+0x7e>
   830d8:	e070      	b.n	831bc <pio_configure_pin+0x11c>
   830da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   830de:	d045      	beq.n	8316c <pio_configure_pin+0xcc>
   830e0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   830e4:	d042      	beq.n	8316c <pio_configure_pin+0xcc>
   830e6:	e069      	b.n	831bc <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   830e8:	687b      	ldr	r3, [r7, #4]
   830ea:	f003 031f 	and.w	r3, r3, #31
   830ee:	2201      	movs	r2, #1
   830f0:	fa02 f303 	lsl.w	r3, r2, r3
   830f4:	461a      	mov	r2, r3
   830f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   830fa:	68f8      	ldr	r0, [r7, #12]
   830fc:	4b33      	ldr	r3, [pc, #204]	; (831cc <pio_configure_pin+0x12c>)
   830fe:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83100:	687b      	ldr	r3, [r7, #4]
   83102:	f003 031f 	and.w	r3, r3, #31
   83106:	2201      	movs	r2, #1
   83108:	fa02 f303 	lsl.w	r3, r2, r3
   8310c:	4619      	mov	r1, r3
   8310e:	683b      	ldr	r3, [r7, #0]
   83110:	f003 0301 	and.w	r3, r3, #1
   83114:	461a      	mov	r2, r3
   83116:	68f8      	ldr	r0, [r7, #12]
   83118:	4b2d      	ldr	r3, [pc, #180]	; (831d0 <pio_configure_pin+0x130>)
   8311a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8311c:	e050      	b.n	831c0 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8311e:	687b      	ldr	r3, [r7, #4]
   83120:	f003 031f 	and.w	r3, r3, #31
   83124:	2201      	movs	r2, #1
   83126:	fa02 f303 	lsl.w	r3, r2, r3
   8312a:	461a      	mov	r2, r3
   8312c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83130:	68f8      	ldr	r0, [r7, #12]
   83132:	4b26      	ldr	r3, [pc, #152]	; (831cc <pio_configure_pin+0x12c>)
   83134:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83136:	687b      	ldr	r3, [r7, #4]
   83138:	f003 031f 	and.w	r3, r3, #31
   8313c:	2201      	movs	r2, #1
   8313e:	fa02 f303 	lsl.w	r3, r2, r3
   83142:	4619      	mov	r1, r3
   83144:	683b      	ldr	r3, [r7, #0]
   83146:	f003 0301 	and.w	r3, r3, #1
   8314a:	461a      	mov	r2, r3
   8314c:	68f8      	ldr	r0, [r7, #12]
   8314e:	4b20      	ldr	r3, [pc, #128]	; (831d0 <pio_configure_pin+0x130>)
   83150:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   83152:	e035      	b.n	831c0 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83154:	687b      	ldr	r3, [r7, #4]
   83156:	f003 031f 	and.w	r3, r3, #31
   8315a:	2201      	movs	r2, #1
   8315c:	fa02 f303 	lsl.w	r3, r2, r3
   83160:	683a      	ldr	r2, [r7, #0]
   83162:	4619      	mov	r1, r3
   83164:	68f8      	ldr	r0, [r7, #12]
   83166:	4b1b      	ldr	r3, [pc, #108]	; (831d4 <pio_configure_pin+0x134>)
   83168:	4798      	blx	r3
		break;
   8316a:	e029      	b.n	831c0 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8316c:	687b      	ldr	r3, [r7, #4]
   8316e:	f003 031f 	and.w	r3, r3, #31
   83172:	2201      	movs	r2, #1
   83174:	fa02 f303 	lsl.w	r3, r2, r3
   83178:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8317a:	683b      	ldr	r3, [r7, #0]
   8317c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83180:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83184:	bf0c      	ite	eq
   83186:	2301      	moveq	r3, #1
   83188:	2300      	movne	r3, #0
   8318a:	b2db      	uxtb	r3, r3
   8318c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8318e:	683b      	ldr	r3, [r7, #0]
   83190:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83194:	2b00      	cmp	r3, #0
   83196:	bf14      	ite	ne
   83198:	2301      	movne	r3, #1
   8319a:	2300      	moveq	r3, #0
   8319c:	b2db      	uxtb	r3, r3
   8319e:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   831a0:	683b      	ldr	r3, [r7, #0]
   831a2:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   831a6:	2b00      	cmp	r3, #0
   831a8:	bf14      	ite	ne
   831aa:	2301      	movne	r3, #1
   831ac:	2300      	moveq	r3, #0
   831ae:	b2db      	uxtb	r3, r3
   831b0:	9300      	str	r3, [sp, #0]
   831b2:	4603      	mov	r3, r0
   831b4:	68f8      	ldr	r0, [r7, #12]
   831b6:	4c08      	ldr	r4, [pc, #32]	; (831d8 <pio_configure_pin+0x138>)
   831b8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   831ba:	e001      	b.n	831c0 <pio_configure_pin+0x120>

	default:
		return 0;
   831bc:	2300      	movs	r3, #0
   831be:	e000      	b.n	831c2 <pio_configure_pin+0x122>
	}

	return 1;
   831c0:	2301      	movs	r3, #1
}
   831c2:	4618      	mov	r0, r3
   831c4:	3714      	adds	r7, #20
   831c6:	46bd      	mov	sp, r7
   831c8:	bd90      	pop	{r4, r7, pc}
   831ca:	bf00      	nop
   831cc:	00082ef1 	.word	0x00082ef1
   831d0:	00082ec5 	.word	0x00082ec5
   831d4:	00082f71 	.word	0x00082f71
   831d8:	00082ff1 	.word	0x00082ff1

000831dc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   831dc:	b590      	push	{r4, r7, lr}
   831de:	b087      	sub	sp, #28
   831e0:	af02      	add	r7, sp, #8
   831e2:	60f8      	str	r0, [r7, #12]
   831e4:	60b9      	str	r1, [r7, #8]
   831e6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   831e8:	687b      	ldr	r3, [r7, #4]
   831ea:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   831ee:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   831f2:	d02e      	beq.n	83252 <pio_configure_pin_group+0x76>
   831f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   831f8:	d806      	bhi.n	83208 <pio_configure_pin_group+0x2c>
   831fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   831fe:	d00a      	beq.n	83216 <pio_configure_pin_group+0x3a>
   83200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83204:	d016      	beq.n	83234 <pio_configure_pin_group+0x58>
   83206:	e04c      	b.n	832a2 <pio_configure_pin_group+0xc6>
   83208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8320c:	d027      	beq.n	8325e <pio_configure_pin_group+0x82>
   8320e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83212:	d024      	beq.n	8325e <pio_configure_pin_group+0x82>
   83214:	e045      	b.n	832a2 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83216:	68ba      	ldr	r2, [r7, #8]
   83218:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8321c:	68f8      	ldr	r0, [r7, #12]
   8321e:	4b24      	ldr	r3, [pc, #144]	; (832b0 <pio_configure_pin_group+0xd4>)
   83220:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83222:	687b      	ldr	r3, [r7, #4]
   83224:	f003 0301 	and.w	r3, r3, #1
   83228:	461a      	mov	r2, r3
   8322a:	68b9      	ldr	r1, [r7, #8]
   8322c:	68f8      	ldr	r0, [r7, #12]
   8322e:	4b21      	ldr	r3, [pc, #132]	; (832b4 <pio_configure_pin_group+0xd8>)
   83230:	4798      	blx	r3
		break;
   83232:	e038      	b.n	832a6 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83234:	68ba      	ldr	r2, [r7, #8]
   83236:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8323a:	68f8      	ldr	r0, [r7, #12]
   8323c:	4b1c      	ldr	r3, [pc, #112]	; (832b0 <pio_configure_pin_group+0xd4>)
   8323e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83240:	687b      	ldr	r3, [r7, #4]
   83242:	f003 0301 	and.w	r3, r3, #1
   83246:	461a      	mov	r2, r3
   83248:	68b9      	ldr	r1, [r7, #8]
   8324a:	68f8      	ldr	r0, [r7, #12]
   8324c:	4b19      	ldr	r3, [pc, #100]	; (832b4 <pio_configure_pin_group+0xd8>)
   8324e:	4798      	blx	r3
		break;
   83250:	e029      	b.n	832a6 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   83252:	687a      	ldr	r2, [r7, #4]
   83254:	68b9      	ldr	r1, [r7, #8]
   83256:	68f8      	ldr	r0, [r7, #12]
   83258:	4b17      	ldr	r3, [pc, #92]	; (832b8 <pio_configure_pin_group+0xdc>)
   8325a:	4798      	blx	r3
		break;
   8325c:	e023      	b.n	832a6 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8325e:	687b      	ldr	r3, [r7, #4]
   83260:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83264:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83268:	bf0c      	ite	eq
   8326a:	2301      	moveq	r3, #1
   8326c:	2300      	movne	r3, #0
   8326e:	b2db      	uxtb	r3, r3
   83270:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83272:	687b      	ldr	r3, [r7, #4]
   83274:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83278:	2b00      	cmp	r3, #0
   8327a:	bf14      	ite	ne
   8327c:	2301      	movne	r3, #1
   8327e:	2300      	moveq	r3, #0
   83280:	b2db      	uxtb	r3, r3
   83282:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83284:	687b      	ldr	r3, [r7, #4]
   83286:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8328a:	2b00      	cmp	r3, #0
   8328c:	bf14      	ite	ne
   8328e:	2301      	movne	r3, #1
   83290:	2300      	moveq	r3, #0
   83292:	b2db      	uxtb	r3, r3
   83294:	9300      	str	r3, [sp, #0]
   83296:	460b      	mov	r3, r1
   83298:	68b9      	ldr	r1, [r7, #8]
   8329a:	68f8      	ldr	r0, [r7, #12]
   8329c:	4c07      	ldr	r4, [pc, #28]	; (832bc <pio_configure_pin_group+0xe0>)
   8329e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   832a0:	e001      	b.n	832a6 <pio_configure_pin_group+0xca>

	default:
		return 0;
   832a2:	2300      	movs	r3, #0
   832a4:	e000      	b.n	832a8 <pio_configure_pin_group+0xcc>
	}

	return 1;
   832a6:	2301      	movs	r3, #1
}
   832a8:	4618      	mov	r0, r3
   832aa:	3714      	adds	r7, #20
   832ac:	46bd      	mov	sp, r7
   832ae:	bd90      	pop	{r4, r7, pc}
   832b0:	00082ef1 	.word	0x00082ef1
   832b4:	00082ec5 	.word	0x00082ec5
   832b8:	00082f71 	.word	0x00082f71
   832bc:	00082ff1 	.word	0x00082ff1

000832c0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   832c0:	b580      	push	{r7, lr}
   832c2:	b084      	sub	sp, #16
   832c4:	af00      	add	r7, sp, #0
   832c6:	6078      	str	r0, [r7, #4]
   832c8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   832ca:	6878      	ldr	r0, [r7, #4]
   832cc:	4b24      	ldr	r3, [pc, #144]	; (83360 <pio_handler_process+0xa0>)
   832ce:	4798      	blx	r3
   832d0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   832d2:	6878      	ldr	r0, [r7, #4]
   832d4:	4b23      	ldr	r3, [pc, #140]	; (83364 <pio_handler_process+0xa4>)
   832d6:	4798      	blx	r3
   832d8:	4602      	mov	r2, r0
   832da:	68fb      	ldr	r3, [r7, #12]
   832dc:	4013      	ands	r3, r2
   832de:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   832e0:	68fb      	ldr	r3, [r7, #12]
   832e2:	2b00      	cmp	r3, #0
   832e4:	d037      	beq.n	83356 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   832e6:	2300      	movs	r3, #0
   832e8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   832ea:	e031      	b.n	83350 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   832ec:	4a1e      	ldr	r2, [pc, #120]	; (83368 <pio_handler_process+0xa8>)
   832ee:	68bb      	ldr	r3, [r7, #8]
   832f0:	011b      	lsls	r3, r3, #4
   832f2:	4413      	add	r3, r2
   832f4:	681a      	ldr	r2, [r3, #0]
   832f6:	683b      	ldr	r3, [r7, #0]
   832f8:	429a      	cmp	r2, r3
   832fa:	d126      	bne.n	8334a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   832fc:	4a1a      	ldr	r2, [pc, #104]	; (83368 <pio_handler_process+0xa8>)
   832fe:	68bb      	ldr	r3, [r7, #8]
   83300:	011b      	lsls	r3, r3, #4
   83302:	4413      	add	r3, r2
   83304:	3304      	adds	r3, #4
   83306:	681a      	ldr	r2, [r3, #0]
   83308:	68fb      	ldr	r3, [r7, #12]
   8330a:	4013      	ands	r3, r2
   8330c:	2b00      	cmp	r3, #0
   8330e:	d01c      	beq.n	8334a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83310:	4a15      	ldr	r2, [pc, #84]	; (83368 <pio_handler_process+0xa8>)
   83312:	68bb      	ldr	r3, [r7, #8]
   83314:	011b      	lsls	r3, r3, #4
   83316:	4413      	add	r3, r2
   83318:	330c      	adds	r3, #12
   8331a:	681b      	ldr	r3, [r3, #0]
   8331c:	4912      	ldr	r1, [pc, #72]	; (83368 <pio_handler_process+0xa8>)
   8331e:	68ba      	ldr	r2, [r7, #8]
   83320:	0112      	lsls	r2, r2, #4
   83322:	440a      	add	r2, r1
   83324:	6810      	ldr	r0, [r2, #0]
   83326:	4910      	ldr	r1, [pc, #64]	; (83368 <pio_handler_process+0xa8>)
   83328:	68ba      	ldr	r2, [r7, #8]
   8332a:	0112      	lsls	r2, r2, #4
   8332c:	440a      	add	r2, r1
   8332e:	3204      	adds	r2, #4
   83330:	6812      	ldr	r2, [r2, #0]
   83332:	4611      	mov	r1, r2
   83334:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83336:	4a0c      	ldr	r2, [pc, #48]	; (83368 <pio_handler_process+0xa8>)
   83338:	68bb      	ldr	r3, [r7, #8]
   8333a:	011b      	lsls	r3, r3, #4
   8333c:	4413      	add	r3, r2
   8333e:	3304      	adds	r3, #4
   83340:	681b      	ldr	r3, [r3, #0]
   83342:	43db      	mvns	r3, r3
   83344:	68fa      	ldr	r2, [r7, #12]
   83346:	4013      	ands	r3, r2
   83348:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   8334a:	68bb      	ldr	r3, [r7, #8]
   8334c:	3301      	adds	r3, #1
   8334e:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83350:	68fb      	ldr	r3, [r7, #12]
   83352:	2b00      	cmp	r3, #0
   83354:	d1ca      	bne.n	832ec <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83356:	bf00      	nop
   83358:	3710      	adds	r7, #16
   8335a:	46bd      	mov	sp, r7
   8335c:	bd80      	pop	{r7, pc}
   8335e:	bf00      	nop
   83360:	00083071 	.word	0x00083071
   83364:	00083089 	.word	0x00083089
   83368:	20070d18 	.word	0x20070d18

0008336c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8336c:	b580      	push	{r7, lr}
   8336e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   83370:	210b      	movs	r1, #11
   83372:	4802      	ldr	r0, [pc, #8]	; (8337c <PIOA_Handler+0x10>)
   83374:	4b02      	ldr	r3, [pc, #8]	; (83380 <PIOA_Handler+0x14>)
   83376:	4798      	blx	r3
}
   83378:	bf00      	nop
   8337a:	bd80      	pop	{r7, pc}
   8337c:	400e0e00 	.word	0x400e0e00
   83380:	000832c1 	.word	0x000832c1

00083384 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83384:	b580      	push	{r7, lr}
   83386:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   83388:	210c      	movs	r1, #12
   8338a:	4802      	ldr	r0, [pc, #8]	; (83394 <PIOB_Handler+0x10>)
   8338c:	4b02      	ldr	r3, [pc, #8]	; (83398 <PIOB_Handler+0x14>)
   8338e:	4798      	blx	r3
}
   83390:	bf00      	nop
   83392:	bd80      	pop	{r7, pc}
   83394:	400e1000 	.word	0x400e1000
   83398:	000832c1 	.word	0x000832c1

0008339c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8339c:	b580      	push	{r7, lr}
   8339e:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   833a0:	210d      	movs	r1, #13
   833a2:	4802      	ldr	r0, [pc, #8]	; (833ac <PIOC_Handler+0x10>)
   833a4:	4b02      	ldr	r3, [pc, #8]	; (833b0 <PIOC_Handler+0x14>)
   833a6:	4798      	blx	r3
}
   833a8:	bf00      	nop
   833aa:	bd80      	pop	{r7, pc}
   833ac:	400e1200 	.word	0x400e1200
   833b0:	000832c1 	.word	0x000832c1

000833b4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   833b4:	b580      	push	{r7, lr}
   833b6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   833b8:	210e      	movs	r1, #14
   833ba:	4802      	ldr	r0, [pc, #8]	; (833c4 <PIOD_Handler+0x10>)
   833bc:	4b02      	ldr	r3, [pc, #8]	; (833c8 <PIOD_Handler+0x14>)
   833be:	4798      	blx	r3
}
   833c0:	bf00      	nop
   833c2:	bd80      	pop	{r7, pc}
   833c4:	400e1400 	.word	0x400e1400
   833c8:	000832c1 	.word	0x000832c1

000833cc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   833cc:	b480      	push	{r7}
   833ce:	b085      	sub	sp, #20
   833d0:	af00      	add	r7, sp, #0
   833d2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   833d4:	491c      	ldr	r1, [pc, #112]	; (83448 <pmc_switch_mck_to_pllack+0x7c>)
   833d6:	4b1c      	ldr	r3, [pc, #112]	; (83448 <pmc_switch_mck_to_pllack+0x7c>)
   833d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   833da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   833de:	687b      	ldr	r3, [r7, #4]
   833e0:	4313      	orrs	r3, r2
   833e2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   833e8:	60fb      	str	r3, [r7, #12]
   833ea:	e007      	b.n	833fc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   833ec:	68fb      	ldr	r3, [r7, #12]
   833ee:	2b00      	cmp	r3, #0
   833f0:	d101      	bne.n	833f6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   833f2:	2301      	movs	r3, #1
   833f4:	e023      	b.n	8343e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   833f6:	68fb      	ldr	r3, [r7, #12]
   833f8:	3b01      	subs	r3, #1
   833fa:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833fc:	4b12      	ldr	r3, [pc, #72]	; (83448 <pmc_switch_mck_to_pllack+0x7c>)
   833fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83400:	f003 0308 	and.w	r3, r3, #8
   83404:	2b00      	cmp	r3, #0
   83406:	d0f1      	beq.n	833ec <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83408:	4a0f      	ldr	r2, [pc, #60]	; (83448 <pmc_switch_mck_to_pllack+0x7c>)
   8340a:	4b0f      	ldr	r3, [pc, #60]	; (83448 <pmc_switch_mck_to_pllack+0x7c>)
   8340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8340e:	f023 0303 	bic.w	r3, r3, #3
   83412:	f043 0302 	orr.w	r3, r3, #2
   83416:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83418:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8341c:	60fb      	str	r3, [r7, #12]
   8341e:	e007      	b.n	83430 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83420:	68fb      	ldr	r3, [r7, #12]
   83422:	2b00      	cmp	r3, #0
   83424:	d101      	bne.n	8342a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83426:	2301      	movs	r3, #1
   83428:	e009      	b.n	8343e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8342a:	68fb      	ldr	r3, [r7, #12]
   8342c:	3b01      	subs	r3, #1
   8342e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83430:	4b05      	ldr	r3, [pc, #20]	; (83448 <pmc_switch_mck_to_pllack+0x7c>)
   83432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83434:	f003 0308 	and.w	r3, r3, #8
   83438:	2b00      	cmp	r3, #0
   8343a:	d0f1      	beq.n	83420 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8343c:	2300      	movs	r3, #0
}
   8343e:	4618      	mov	r0, r3
   83440:	3714      	adds	r7, #20
   83442:	46bd      	mov	sp, r7
   83444:	bc80      	pop	{r7}
   83446:	4770      	bx	lr
   83448:	400e0600 	.word	0x400e0600

0008344c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   8344c:	b480      	push	{r7}
   8344e:	b083      	sub	sp, #12
   83450:	af00      	add	r7, sp, #0
   83452:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83454:	687b      	ldr	r3, [r7, #4]
   83456:	2b01      	cmp	r3, #1
   83458:	d107      	bne.n	8346a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   8345a:	4a08      	ldr	r2, [pc, #32]	; (8347c <pmc_switch_sclk_to_32kxtal+0x30>)
   8345c:	4b07      	ldr	r3, [pc, #28]	; (8347c <pmc_switch_sclk_to_32kxtal+0x30>)
   8345e:	689b      	ldr	r3, [r3, #8]
   83460:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83468:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   8346a:	4b04      	ldr	r3, [pc, #16]	; (8347c <pmc_switch_sclk_to_32kxtal+0x30>)
   8346c:	4a04      	ldr	r2, [pc, #16]	; (83480 <pmc_switch_sclk_to_32kxtal+0x34>)
   8346e:	601a      	str	r2, [r3, #0]
}
   83470:	bf00      	nop
   83472:	370c      	adds	r7, #12
   83474:	46bd      	mov	sp, r7
   83476:	bc80      	pop	{r7}
   83478:	4770      	bx	lr
   8347a:	bf00      	nop
   8347c:	400e1a10 	.word	0x400e1a10
   83480:	a5000008 	.word	0xa5000008

00083484 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83484:	b480      	push	{r7}
   83486:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83488:	4b09      	ldr	r3, [pc, #36]	; (834b0 <pmc_osc_is_ready_32kxtal+0x2c>)
   8348a:	695b      	ldr	r3, [r3, #20]
   8348c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83490:	2b00      	cmp	r3, #0
   83492:	d007      	beq.n	834a4 <pmc_osc_is_ready_32kxtal+0x20>
   83494:	4b07      	ldr	r3, [pc, #28]	; (834b4 <pmc_osc_is_ready_32kxtal+0x30>)
   83496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83498:	f003 0380 	and.w	r3, r3, #128	; 0x80
   8349c:	2b00      	cmp	r3, #0
   8349e:	d001      	beq.n	834a4 <pmc_osc_is_ready_32kxtal+0x20>
   834a0:	2301      	movs	r3, #1
   834a2:	e000      	b.n	834a6 <pmc_osc_is_ready_32kxtal+0x22>
   834a4:	2300      	movs	r3, #0
}
   834a6:	4618      	mov	r0, r3
   834a8:	46bd      	mov	sp, r7
   834aa:	bc80      	pop	{r7}
   834ac:	4770      	bx	lr
   834ae:	bf00      	nop
   834b0:	400e1a10 	.word	0x400e1a10
   834b4:	400e0600 	.word	0x400e0600

000834b8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   834b8:	b480      	push	{r7}
   834ba:	b085      	sub	sp, #20
   834bc:	af00      	add	r7, sp, #0
   834be:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   834c0:	2300      	movs	r3, #0
   834c2:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   834c4:	4b21      	ldr	r3, [pc, #132]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   834c6:	6a1b      	ldr	r3, [r3, #32]
   834c8:	f003 0301 	and.w	r3, r3, #1
   834cc:	2b00      	cmp	r3, #0
   834ce:	d00e      	beq.n	834ee <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   834d0:	491e      	ldr	r1, [pc, #120]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   834d2:	4b1e      	ldr	r3, [pc, #120]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   834d4:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   834d6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   834da:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   834de:	687a      	ldr	r2, [r7, #4]
   834e0:	4313      	orrs	r3, r2
   834e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   834e6:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   834ea:	620b      	str	r3, [r1, #32]
   834ec:	e00b      	b.n	83506 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   834ee:	2301      	movs	r3, #1
   834f0:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   834f2:	4916      	ldr	r1, [pc, #88]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   834f4:	4b15      	ldr	r3, [pc, #84]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   834f6:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   834f8:	4b15      	ldr	r3, [pc, #84]	; (83550 <pmc_switch_mainck_to_fastrc+0x98>)
   834fa:	4013      	ands	r3, r2
   834fc:	687a      	ldr	r2, [r7, #4]
   834fe:	431a      	orrs	r2, r3
   83500:	4b14      	ldr	r3, [pc, #80]	; (83554 <pmc_switch_mainck_to_fastrc+0x9c>)
   83502:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83504:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83506:	bf00      	nop
   83508:	4b10      	ldr	r3, [pc, #64]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   8350a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83510:	2b00      	cmp	r3, #0
   83512:	d0f9      	beq.n	83508 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83514:	4a0d      	ldr	r2, [pc, #52]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   83516:	4b0d      	ldr	r3, [pc, #52]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   83518:	6a1b      	ldr	r3, [r3, #32]
   8351a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8351e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83522:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83526:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   83528:	68fb      	ldr	r3, [r7, #12]
   8352a:	2b00      	cmp	r3, #0
   8352c:	d009      	beq.n	83542 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8352e:	4a07      	ldr	r2, [pc, #28]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   83530:	4b06      	ldr	r3, [pc, #24]	; (8354c <pmc_switch_mainck_to_fastrc+0x94>)
   83532:	6a1b      	ldr	r3, [r3, #32]
   83534:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83538:	f023 0301 	bic.w	r3, r3, #1
   8353c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83540:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   83542:	bf00      	nop
   83544:	3714      	adds	r7, #20
   83546:	46bd      	mov	sp, r7
   83548:	bc80      	pop	{r7}
   8354a:	4770      	bx	lr
   8354c:	400e0600 	.word	0x400e0600
   83550:	ffc80086 	.word	0xffc80086
   83554:	0037ff09 	.word	0x0037ff09

00083558 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83558:	b480      	push	{r7}
   8355a:	b083      	sub	sp, #12
   8355c:	af00      	add	r7, sp, #0
   8355e:	6078      	str	r0, [r7, #4]
   83560:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83562:	687b      	ldr	r3, [r7, #4]
   83564:	2b00      	cmp	r3, #0
   83566:	d008      	beq.n	8357a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83568:	4916      	ldr	r1, [pc, #88]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8356a:	4b16      	ldr	r3, [pc, #88]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8356c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   8356e:	4a16      	ldr	r2, [pc, #88]	; (835c8 <pmc_switch_mainck_to_xtal+0x70>)
   83570:	401a      	ands	r2, r3
   83572:	4b16      	ldr	r3, [pc, #88]	; (835cc <pmc_switch_mainck_to_xtal+0x74>)
   83574:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83576:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   83578:	e01e      	b.n	835b8 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8357a:	4912      	ldr	r1, [pc, #72]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8357c:	4b11      	ldr	r3, [pc, #68]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8357e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83580:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83584:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83588:	683a      	ldr	r2, [r7, #0]
   8358a:	0212      	lsls	r2, r2, #8
   8358c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   8358e:	4313      	orrs	r3, r2
   83590:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83594:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83598:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8359a:	bf00      	nop
   8359c:	4b09      	ldr	r3, [pc, #36]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   8359e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835a0:	f003 0301 	and.w	r3, r3, #1
   835a4:	2b00      	cmp	r3, #0
   835a6:	d0f9      	beq.n	8359c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   835a8:	4a06      	ldr	r2, [pc, #24]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   835aa:	4b06      	ldr	r3, [pc, #24]	; (835c4 <pmc_switch_mainck_to_xtal+0x6c>)
   835ac:	6a1b      	ldr	r3, [r3, #32]
   835ae:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   835b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   835b6:	6213      	str	r3, [r2, #32]
	}
}
   835b8:	bf00      	nop
   835ba:	370c      	adds	r7, #12
   835bc:	46bd      	mov	sp, r7
   835be:	bc80      	pop	{r7}
   835c0:	4770      	bx	lr
   835c2:	bf00      	nop
   835c4:	400e0600 	.word	0x400e0600
   835c8:	fec8fffc 	.word	0xfec8fffc
   835cc:	01370002 	.word	0x01370002

000835d0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   835d0:	b480      	push	{r7}
   835d2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   835d4:	4b03      	ldr	r3, [pc, #12]	; (835e4 <pmc_osc_is_ready_mainck+0x14>)
   835d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   835d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   835dc:	4618      	mov	r0, r3
   835de:	46bd      	mov	sp, r7
   835e0:	bc80      	pop	{r7}
   835e2:	4770      	bx	lr
   835e4:	400e0600 	.word	0x400e0600

000835e8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   835e8:	b480      	push	{r7}
   835ea:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   835ec:	4b03      	ldr	r3, [pc, #12]	; (835fc <pmc_disable_pllack+0x14>)
   835ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   835f2:	629a      	str	r2, [r3, #40]	; 0x28
}
   835f4:	bf00      	nop
   835f6:	46bd      	mov	sp, r7
   835f8:	bc80      	pop	{r7}
   835fa:	4770      	bx	lr
   835fc:	400e0600 	.word	0x400e0600

00083600 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83600:	b480      	push	{r7}
   83602:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83604:	4b03      	ldr	r3, [pc, #12]	; (83614 <pmc_is_locked_pllack+0x14>)
   83606:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83608:	f003 0302 	and.w	r3, r3, #2
}
   8360c:	4618      	mov	r0, r3
   8360e:	46bd      	mov	sp, r7
   83610:	bc80      	pop	{r7}
   83612:	4770      	bx	lr
   83614:	400e0600 	.word	0x400e0600

00083618 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83618:	b480      	push	{r7}
   8361a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8361c:	4b03      	ldr	r3, [pc, #12]	; (8362c <pmc_is_locked_upll+0x14>)
   8361e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83620:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83624:	4618      	mov	r0, r3
   83626:	46bd      	mov	sp, r7
   83628:	bc80      	pop	{r7}
   8362a:	4770      	bx	lr
   8362c:	400e0600 	.word	0x400e0600

00083630 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83630:	b480      	push	{r7}
   83632:	b083      	sub	sp, #12
   83634:	af00      	add	r7, sp, #0
   83636:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83638:	687b      	ldr	r3, [r7, #4]
   8363a:	2b2c      	cmp	r3, #44	; 0x2c
   8363c:	d901      	bls.n	83642 <pmc_enable_periph_clk+0x12>
		return 1;
   8363e:	2301      	movs	r3, #1
   83640:	e02f      	b.n	836a2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83642:	687b      	ldr	r3, [r7, #4]
   83644:	2b1f      	cmp	r3, #31
   83646:	d813      	bhi.n	83670 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83648:	4b18      	ldr	r3, [pc, #96]	; (836ac <pmc_enable_periph_clk+0x7c>)
   8364a:	699a      	ldr	r2, [r3, #24]
   8364c:	2101      	movs	r1, #1
   8364e:	687b      	ldr	r3, [r7, #4]
   83650:	fa01 f303 	lsl.w	r3, r1, r3
   83654:	401a      	ands	r2, r3
   83656:	2101      	movs	r1, #1
   83658:	687b      	ldr	r3, [r7, #4]
   8365a:	fa01 f303 	lsl.w	r3, r1, r3
   8365e:	429a      	cmp	r2, r3
   83660:	d01e      	beq.n	836a0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83662:	4a12      	ldr	r2, [pc, #72]	; (836ac <pmc_enable_periph_clk+0x7c>)
   83664:	2101      	movs	r1, #1
   83666:	687b      	ldr	r3, [r7, #4]
   83668:	fa01 f303 	lsl.w	r3, r1, r3
   8366c:	6113      	str	r3, [r2, #16]
   8366e:	e017      	b.n	836a0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   83670:	687b      	ldr	r3, [r7, #4]
   83672:	3b20      	subs	r3, #32
   83674:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83676:	4b0d      	ldr	r3, [pc, #52]	; (836ac <pmc_enable_periph_clk+0x7c>)
   83678:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8367c:	2101      	movs	r1, #1
   8367e:	687b      	ldr	r3, [r7, #4]
   83680:	fa01 f303 	lsl.w	r3, r1, r3
   83684:	401a      	ands	r2, r3
   83686:	2101      	movs	r1, #1
   83688:	687b      	ldr	r3, [r7, #4]
   8368a:	fa01 f303 	lsl.w	r3, r1, r3
   8368e:	429a      	cmp	r2, r3
   83690:	d006      	beq.n	836a0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83692:	4a06      	ldr	r2, [pc, #24]	; (836ac <pmc_enable_periph_clk+0x7c>)
   83694:	2101      	movs	r1, #1
   83696:	687b      	ldr	r3, [r7, #4]
   83698:	fa01 f303 	lsl.w	r3, r1, r3
   8369c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   836a0:	2300      	movs	r3, #0
}
   836a2:	4618      	mov	r0, r3
   836a4:	370c      	adds	r7, #12
   836a6:	46bd      	mov	sp, r7
   836a8:	bc80      	pop	{r7}
   836aa:	4770      	bx	lr
   836ac:	400e0600 	.word	0x400e0600

000836b0 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   836b0:	b480      	push	{r7}
   836b2:	b083      	sub	sp, #12
   836b4:	af00      	add	r7, sp, #0
   836b6:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   836b8:	687b      	ldr	r3, [r7, #4]
   836ba:	2b00      	cmp	r3, #0
   836bc:	d004      	beq.n	836c8 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   836be:	4b07      	ldr	r3, [pc, #28]	; (836dc <pmc_set_writeprotect+0x2c>)
   836c0:	4a07      	ldr	r2, [pc, #28]	; (836e0 <pmc_set_writeprotect+0x30>)
   836c2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   836c6:	e003      	b.n	836d0 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   836c8:	4b04      	ldr	r3, [pc, #16]	; (836dc <pmc_set_writeprotect+0x2c>)
   836ca:	4a06      	ldr	r2, [pc, #24]	; (836e4 <pmc_set_writeprotect+0x34>)
   836cc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   836d0:	bf00      	nop
   836d2:	370c      	adds	r7, #12
   836d4:	46bd      	mov	sp, r7
   836d6:	bc80      	pop	{r7}
   836d8:	4770      	bx	lr
   836da:	bf00      	nop
   836dc:	400e0600 	.word	0x400e0600
   836e0:	504d4301 	.word	0x504d4301
   836e4:	504d4300 	.word	0x504d4300

000836e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   836e8:	b480      	push	{r7}
   836ea:	af00      	add	r7, sp, #0
	while (1) {
	}
   836ec:	e7fe      	b.n	836ec <Dummy_Handler+0x4>
   836ee:	bf00      	nop

000836f0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   836f0:	b580      	push	{r7, lr}
   836f2:	b082      	sub	sp, #8
   836f4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   836f6:	4b1e      	ldr	r3, [pc, #120]	; (83770 <Reset_Handler+0x80>)
   836f8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   836fa:	4b1e      	ldr	r3, [pc, #120]	; (83774 <Reset_Handler+0x84>)
   836fc:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   836fe:	687a      	ldr	r2, [r7, #4]
   83700:	683b      	ldr	r3, [r7, #0]
   83702:	429a      	cmp	r2, r3
   83704:	d00c      	beq.n	83720 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83706:	e007      	b.n	83718 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83708:	683b      	ldr	r3, [r7, #0]
   8370a:	1d1a      	adds	r2, r3, #4
   8370c:	603a      	str	r2, [r7, #0]
   8370e:	687a      	ldr	r2, [r7, #4]
   83710:	1d11      	adds	r1, r2, #4
   83712:	6079      	str	r1, [r7, #4]
   83714:	6812      	ldr	r2, [r2, #0]
   83716:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83718:	683b      	ldr	r3, [r7, #0]
   8371a:	4a17      	ldr	r2, [pc, #92]	; (83778 <Reset_Handler+0x88>)
   8371c:	4293      	cmp	r3, r2
   8371e:	d3f3      	bcc.n	83708 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83720:	4b16      	ldr	r3, [pc, #88]	; (8377c <Reset_Handler+0x8c>)
   83722:	603b      	str	r3, [r7, #0]
   83724:	e004      	b.n	83730 <Reset_Handler+0x40>
		*pDest++ = 0;
   83726:	683b      	ldr	r3, [r7, #0]
   83728:	1d1a      	adds	r2, r3, #4
   8372a:	603a      	str	r2, [r7, #0]
   8372c:	2200      	movs	r2, #0
   8372e:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83730:	683b      	ldr	r3, [r7, #0]
   83732:	4a13      	ldr	r2, [pc, #76]	; (83780 <Reset_Handler+0x90>)
   83734:	4293      	cmp	r3, r2
   83736:	d3f6      	bcc.n	83726 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83738:	4b12      	ldr	r3, [pc, #72]	; (83784 <Reset_Handler+0x94>)
   8373a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8373c:	4a12      	ldr	r2, [pc, #72]	; (83788 <Reset_Handler+0x98>)
   8373e:	687b      	ldr	r3, [r7, #4]
   83740:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83744:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83748:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8374a:	687b      	ldr	r3, [r7, #4]
   8374c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83750:	d309      	bcc.n	83766 <Reset_Handler+0x76>
   83752:	687b      	ldr	r3, [r7, #4]
   83754:	4a0d      	ldr	r2, [pc, #52]	; (8378c <Reset_Handler+0x9c>)
   83756:	4293      	cmp	r3, r2
   83758:	d805      	bhi.n	83766 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8375a:	4a0b      	ldr	r2, [pc, #44]	; (83788 <Reset_Handler+0x98>)
   8375c:	4b0a      	ldr	r3, [pc, #40]	; (83788 <Reset_Handler+0x98>)
   8375e:	689b      	ldr	r3, [r3, #8]
   83760:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83764:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83766:	4b0a      	ldr	r3, [pc, #40]	; (83790 <Reset_Handler+0xa0>)
   83768:	4798      	blx	r3

	/* Branch to main function */
	main();
   8376a:	4b0a      	ldr	r3, [pc, #40]	; (83794 <Reset_Handler+0xa4>)
   8376c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8376e:	e7fe      	b.n	8376e <Reset_Handler+0x7e>
   83770:	00086e6c 	.word	0x00086e6c
   83774:	20070000 	.word	0x20070000
   83778:	20070c6c 	.word	0x20070c6c
   8377c:	20070c6c 	.word	0x20070c6c
   83780:	2007125c 	.word	0x2007125c
   83784:	00080000 	.word	0x00080000
   83788:	e000ed00 	.word	0xe000ed00
   8378c:	200fffff 	.word	0x200fffff
   83790:	00083e29 	.word	0x00083e29
   83794:	00082119 	.word	0x00082119

00083798 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83798:	b480      	push	{r7}
   8379a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8379c:	4b57      	ldr	r3, [pc, #348]	; (838fc <SystemCoreClockUpdate+0x164>)
   8379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   837a0:	f003 0303 	and.w	r3, r3, #3
   837a4:	2b03      	cmp	r3, #3
   837a6:	f200 808a 	bhi.w	838be <SystemCoreClockUpdate+0x126>
   837aa:	a201      	add	r2, pc, #4	; (adr r2, 837b0 <SystemCoreClockUpdate+0x18>)
   837ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837b0:	000837c1 	.word	0x000837c1
   837b4:	000837e1 	.word	0x000837e1
   837b8:	00083831 	.word	0x00083831
   837bc:	00083831 	.word	0x00083831
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   837c0:	4b4f      	ldr	r3, [pc, #316]	; (83900 <SystemCoreClockUpdate+0x168>)
   837c2:	695b      	ldr	r3, [r3, #20]
   837c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   837c8:	2b00      	cmp	r3, #0
   837ca:	d004      	beq.n	837d6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   837cc:	4b4d      	ldr	r3, [pc, #308]	; (83904 <SystemCoreClockUpdate+0x16c>)
   837ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   837d2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   837d4:	e073      	b.n	838be <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   837d6:	4b4b      	ldr	r3, [pc, #300]	; (83904 <SystemCoreClockUpdate+0x16c>)
   837d8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   837dc:	601a      	str	r2, [r3, #0]
		}
		break;
   837de:	e06e      	b.n	838be <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   837e0:	4b46      	ldr	r3, [pc, #280]	; (838fc <SystemCoreClockUpdate+0x164>)
   837e2:	6a1b      	ldr	r3, [r3, #32]
   837e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   837e8:	2b00      	cmp	r3, #0
   837ea:	d003      	beq.n	837f4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   837ec:	4b45      	ldr	r3, [pc, #276]	; (83904 <SystemCoreClockUpdate+0x16c>)
   837ee:	4a46      	ldr	r2, [pc, #280]	; (83908 <SystemCoreClockUpdate+0x170>)
   837f0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   837f2:	e064      	b.n	838be <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   837f4:	4b43      	ldr	r3, [pc, #268]	; (83904 <SystemCoreClockUpdate+0x16c>)
   837f6:	4a45      	ldr	r2, [pc, #276]	; (8390c <SystemCoreClockUpdate+0x174>)
   837f8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   837fa:	4b40      	ldr	r3, [pc, #256]	; (838fc <SystemCoreClockUpdate+0x164>)
   837fc:	6a1b      	ldr	r3, [r3, #32]
   837fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83802:	2b10      	cmp	r3, #16
   83804:	d004      	beq.n	83810 <SystemCoreClockUpdate+0x78>
   83806:	2b20      	cmp	r3, #32
   83808:	d008      	beq.n	8381c <SystemCoreClockUpdate+0x84>
   8380a:	2b00      	cmp	r3, #0
   8380c:	d00e      	beq.n	8382c <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8380e:	e00e      	b.n	8382e <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83810:	4b3c      	ldr	r3, [pc, #240]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83812:	681b      	ldr	r3, [r3, #0]
   83814:	005b      	lsls	r3, r3, #1
   83816:	4a3b      	ldr	r2, [pc, #236]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83818:	6013      	str	r3, [r2, #0]
				break;
   8381a:	e008      	b.n	8382e <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8381c:	4b39      	ldr	r3, [pc, #228]	; (83904 <SystemCoreClockUpdate+0x16c>)
   8381e:	681a      	ldr	r2, [r3, #0]
   83820:	4613      	mov	r3, r2
   83822:	005b      	lsls	r3, r3, #1
   83824:	4413      	add	r3, r2
   83826:	4a37      	ldr	r2, [pc, #220]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83828:	6013      	str	r3, [r2, #0]
				break;
   8382a:	e000      	b.n	8382e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8382c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8382e:	e046      	b.n	838be <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83830:	4b32      	ldr	r3, [pc, #200]	; (838fc <SystemCoreClockUpdate+0x164>)
   83832:	6a1b      	ldr	r3, [r3, #32]
   83834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83838:	2b00      	cmp	r3, #0
   8383a:	d003      	beq.n	83844 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8383c:	4b31      	ldr	r3, [pc, #196]	; (83904 <SystemCoreClockUpdate+0x16c>)
   8383e:	4a32      	ldr	r2, [pc, #200]	; (83908 <SystemCoreClockUpdate+0x170>)
   83840:	601a      	str	r2, [r3, #0]
   83842:	e01c      	b.n	8387e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83844:	4b2f      	ldr	r3, [pc, #188]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83846:	4a31      	ldr	r2, [pc, #196]	; (8390c <SystemCoreClockUpdate+0x174>)
   83848:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8384a:	4b2c      	ldr	r3, [pc, #176]	; (838fc <SystemCoreClockUpdate+0x164>)
   8384c:	6a1b      	ldr	r3, [r3, #32]
   8384e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83852:	2b10      	cmp	r3, #16
   83854:	d004      	beq.n	83860 <SystemCoreClockUpdate+0xc8>
   83856:	2b20      	cmp	r3, #32
   83858:	d008      	beq.n	8386c <SystemCoreClockUpdate+0xd4>
   8385a:	2b00      	cmp	r3, #0
   8385c:	d00e      	beq.n	8387c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8385e:	e00e      	b.n	8387e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   83860:	4b28      	ldr	r3, [pc, #160]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83862:	681b      	ldr	r3, [r3, #0]
   83864:	005b      	lsls	r3, r3, #1
   83866:	4a27      	ldr	r2, [pc, #156]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83868:	6013      	str	r3, [r2, #0]
				break;
   8386a:	e008      	b.n	8387e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8386c:	4b25      	ldr	r3, [pc, #148]	; (83904 <SystemCoreClockUpdate+0x16c>)
   8386e:	681a      	ldr	r2, [r3, #0]
   83870:	4613      	mov	r3, r2
   83872:	005b      	lsls	r3, r3, #1
   83874:	4413      	add	r3, r2
   83876:	4a23      	ldr	r2, [pc, #140]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83878:	6013      	str	r3, [r2, #0]
				break;
   8387a:	e000      	b.n	8387e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8387c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8387e:	4b1f      	ldr	r3, [pc, #124]	; (838fc <SystemCoreClockUpdate+0x164>)
   83880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83882:	f003 0303 	and.w	r3, r3, #3
   83886:	2b02      	cmp	r3, #2
   83888:	d115      	bne.n	838b6 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8388a:	4b1c      	ldr	r3, [pc, #112]	; (838fc <SystemCoreClockUpdate+0x164>)
   8388c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8388e:	4b20      	ldr	r3, [pc, #128]	; (83910 <SystemCoreClockUpdate+0x178>)
   83890:	4013      	ands	r3, r2
   83892:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83894:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83896:	4a1b      	ldr	r2, [pc, #108]	; (83904 <SystemCoreClockUpdate+0x16c>)
   83898:	6812      	ldr	r2, [r2, #0]
   8389a:	fb02 f303 	mul.w	r3, r2, r3
   8389e:	4a19      	ldr	r2, [pc, #100]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838a0:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   838a2:	4b16      	ldr	r3, [pc, #88]	; (838fc <SystemCoreClockUpdate+0x164>)
   838a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   838a6:	b2db      	uxtb	r3, r3
   838a8:	4a16      	ldr	r2, [pc, #88]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838aa:	6812      	ldr	r2, [r2, #0]
   838ac:	fbb2 f3f3 	udiv	r3, r2, r3
   838b0:	4a14      	ldr	r2, [pc, #80]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838b2:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   838b4:	e002      	b.n	838bc <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   838b6:	4b13      	ldr	r3, [pc, #76]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838b8:	4a16      	ldr	r2, [pc, #88]	; (83914 <SystemCoreClockUpdate+0x17c>)
   838ba:	601a      	str	r2, [r3, #0]
		}
		break;
   838bc:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   838be:	4b0f      	ldr	r3, [pc, #60]	; (838fc <SystemCoreClockUpdate+0x164>)
   838c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   838c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   838c6:	2b70      	cmp	r3, #112	; 0x70
   838c8:	d108      	bne.n	838dc <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   838ca:	4b0e      	ldr	r3, [pc, #56]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838cc:	681b      	ldr	r3, [r3, #0]
   838ce:	4a12      	ldr	r2, [pc, #72]	; (83918 <SystemCoreClockUpdate+0x180>)
   838d0:	fba2 2303 	umull	r2, r3, r2, r3
   838d4:	085b      	lsrs	r3, r3, #1
   838d6:	4a0b      	ldr	r2, [pc, #44]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838d8:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   838da:	e00a      	b.n	838f2 <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   838dc:	4b07      	ldr	r3, [pc, #28]	; (838fc <SystemCoreClockUpdate+0x164>)
   838de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   838e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   838e4:	091b      	lsrs	r3, r3, #4
   838e6:	4a07      	ldr	r2, [pc, #28]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838e8:	6812      	ldr	r2, [r2, #0]
   838ea:	fa22 f303 	lsr.w	r3, r2, r3
   838ee:	4a05      	ldr	r2, [pc, #20]	; (83904 <SystemCoreClockUpdate+0x16c>)
   838f0:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   838f2:	bf00      	nop
   838f4:	46bd      	mov	sp, r7
   838f6:	bc80      	pop	{r7}
   838f8:	4770      	bx	lr
   838fa:	bf00      	nop
   838fc:	400e0600 	.word	0x400e0600
   83900:	400e1a10 	.word	0x400e1a10
   83904:	20070404 	.word	0x20070404
   83908:	00b71b00 	.word	0x00b71b00
   8390c:	003d0900 	.word	0x003d0900
   83910:	07ff0000 	.word	0x07ff0000
   83914:	0e4e1c00 	.word	0x0e4e1c00
   83918:	aaaaaaab 	.word	0xaaaaaaab

0008391c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   8391c:	b480      	push	{r7}
   8391e:	b083      	sub	sp, #12
   83920:	af00      	add	r7, sp, #0
   83922:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   83924:	687b      	ldr	r3, [r7, #4]
   83926:	4a25      	ldr	r2, [pc, #148]	; (839bc <system_init_flash+0xa0>)
   83928:	4293      	cmp	r3, r2
   8392a:	d806      	bhi.n	8393a <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   8392c:	4b24      	ldr	r3, [pc, #144]	; (839c0 <system_init_flash+0xa4>)
   8392e:	2200      	movs	r2, #0
   83930:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   83932:	4b24      	ldr	r3, [pc, #144]	; (839c4 <system_init_flash+0xa8>)
   83934:	2200      	movs	r2, #0
   83936:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83938:	e03b      	b.n	839b2 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8393a:	687b      	ldr	r3, [r7, #4]
   8393c:	4a22      	ldr	r2, [pc, #136]	; (839c8 <system_init_flash+0xac>)
   8393e:	4293      	cmp	r3, r2
   83940:	d808      	bhi.n	83954 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   83942:	4b1f      	ldr	r3, [pc, #124]	; (839c0 <system_init_flash+0xa4>)
   83944:	f44f 7280 	mov.w	r2, #256	; 0x100
   83948:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8394a:	4b1e      	ldr	r3, [pc, #120]	; (839c4 <system_init_flash+0xa8>)
   8394c:	f44f 7280 	mov.w	r2, #256	; 0x100
   83950:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83952:	e02e      	b.n	839b2 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   83954:	687b      	ldr	r3, [r7, #4]
   83956:	4a1d      	ldr	r2, [pc, #116]	; (839cc <system_init_flash+0xb0>)
   83958:	4293      	cmp	r3, r2
   8395a:	d808      	bhi.n	8396e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   8395c:	4b18      	ldr	r3, [pc, #96]	; (839c0 <system_init_flash+0xa4>)
   8395e:	f44f 7200 	mov.w	r2, #512	; 0x200
   83962:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   83964:	4b17      	ldr	r3, [pc, #92]	; (839c4 <system_init_flash+0xa8>)
   83966:	f44f 7200 	mov.w	r2, #512	; 0x200
   8396a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   8396c:	e021      	b.n	839b2 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8396e:	687b      	ldr	r3, [r7, #4]
   83970:	4a17      	ldr	r2, [pc, #92]	; (839d0 <system_init_flash+0xb4>)
   83972:	4293      	cmp	r3, r2
   83974:	d808      	bhi.n	83988 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83976:	4b12      	ldr	r3, [pc, #72]	; (839c0 <system_init_flash+0xa4>)
   83978:	f44f 7240 	mov.w	r2, #768	; 0x300
   8397c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8397e:	4b11      	ldr	r3, [pc, #68]	; (839c4 <system_init_flash+0xa8>)
   83980:	f44f 7240 	mov.w	r2, #768	; 0x300
   83984:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83986:	e014      	b.n	839b2 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83988:	687b      	ldr	r3, [r7, #4]
   8398a:	4a12      	ldr	r2, [pc, #72]	; (839d4 <system_init_flash+0xb8>)
   8398c:	4293      	cmp	r3, r2
   8398e:	d808      	bhi.n	839a2 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   83990:	4b0b      	ldr	r3, [pc, #44]	; (839c0 <system_init_flash+0xa4>)
   83992:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83996:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   83998:	4b0a      	ldr	r3, [pc, #40]	; (839c4 <system_init_flash+0xa8>)
   8399a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8399e:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   839a0:	e007      	b.n	839b2 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   839a2:	4b07      	ldr	r3, [pc, #28]	; (839c0 <system_init_flash+0xa4>)
   839a4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   839a8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   839aa:	4b06      	ldr	r3, [pc, #24]	; (839c4 <system_init_flash+0xa8>)
   839ac:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   839b0:	601a      	str	r2, [r3, #0]
	}
}
   839b2:	bf00      	nop
   839b4:	370c      	adds	r7, #12
   839b6:	46bd      	mov	sp, r7
   839b8:	bc80      	pop	{r7}
   839ba:	4770      	bx	lr
   839bc:	0121eabf 	.word	0x0121eabf
   839c0:	400e0a00 	.word	0x400e0a00
   839c4:	400e0c00 	.word	0x400e0c00
   839c8:	02faf07f 	.word	0x02faf07f
   839cc:	03d08fff 	.word	0x03d08fff
   839d0:	04c4b3ff 	.word	0x04c4b3ff
   839d4:	055d4a7f 	.word	0x055d4a7f

000839d8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   839d8:	b480      	push	{r7}
   839da:	b085      	sub	sp, #20
   839dc:	af00      	add	r7, sp, #0
   839de:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   839e0:	4b0a      	ldr	r3, [pc, #40]	; (83a0c <_sbrk+0x34>)
   839e2:	681b      	ldr	r3, [r3, #0]
   839e4:	2b00      	cmp	r3, #0
   839e6:	d102      	bne.n	839ee <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   839e8:	4b08      	ldr	r3, [pc, #32]	; (83a0c <_sbrk+0x34>)
   839ea:	4a09      	ldr	r2, [pc, #36]	; (83a10 <_sbrk+0x38>)
   839ec:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   839ee:	4b07      	ldr	r3, [pc, #28]	; (83a0c <_sbrk+0x34>)
   839f0:	681b      	ldr	r3, [r3, #0]
   839f2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   839f4:	4b05      	ldr	r3, [pc, #20]	; (83a0c <_sbrk+0x34>)
   839f6:	681a      	ldr	r2, [r3, #0]
   839f8:	687b      	ldr	r3, [r7, #4]
   839fa:	4413      	add	r3, r2
   839fc:	4a03      	ldr	r2, [pc, #12]	; (83a0c <_sbrk+0x34>)
   839fe:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   83a00:	68fb      	ldr	r3, [r7, #12]
}
   83a02:	4618      	mov	r0, r3
   83a04:	3714      	adds	r7, #20
   83a06:	46bd      	mov	sp, r7
   83a08:	bc80      	pop	{r7}
   83a0a:	4770      	bx	lr
   83a0c:	20070d88 	.word	0x20070d88
   83a10:	20073260 	.word	0x20073260

00083a14 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   83a14:	b480      	push	{r7}
   83a16:	b083      	sub	sp, #12
   83a18:	af00      	add	r7, sp, #0
   83a1a:	6078      	str	r0, [r7, #4]
	return -1;
   83a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
   83a20:	4618      	mov	r0, r3
   83a22:	370c      	adds	r7, #12
   83a24:	46bd      	mov	sp, r7
   83a26:	bc80      	pop	{r7}
   83a28:	4770      	bx	lr
   83a2a:	bf00      	nop

00083a2c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   83a2c:	b480      	push	{r7}
   83a2e:	b083      	sub	sp, #12
   83a30:	af00      	add	r7, sp, #0
   83a32:	6078      	str	r0, [r7, #4]
   83a34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   83a36:	683b      	ldr	r3, [r7, #0]
   83a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83a3c:	605a      	str	r2, [r3, #4]

	return 0;
   83a3e:	2300      	movs	r3, #0
}
   83a40:	4618      	mov	r0, r3
   83a42:	370c      	adds	r7, #12
   83a44:	46bd      	mov	sp, r7
   83a46:	bc80      	pop	{r7}
   83a48:	4770      	bx	lr
   83a4a:	bf00      	nop

00083a4c <_isatty>:

extern int _isatty(int file)
{
   83a4c:	b480      	push	{r7}
   83a4e:	b083      	sub	sp, #12
   83a50:	af00      	add	r7, sp, #0
   83a52:	6078      	str	r0, [r7, #4]
	return 1;
   83a54:	2301      	movs	r3, #1
}
   83a56:	4618      	mov	r0, r3
   83a58:	370c      	adds	r7, #12
   83a5a:	46bd      	mov	sp, r7
   83a5c:	bc80      	pop	{r7}
   83a5e:	4770      	bx	lr

00083a60 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   83a60:	b480      	push	{r7}
   83a62:	b085      	sub	sp, #20
   83a64:	af00      	add	r7, sp, #0
   83a66:	60f8      	str	r0, [r7, #12]
   83a68:	60b9      	str	r1, [r7, #8]
   83a6a:	607a      	str	r2, [r7, #4]
	return 0;
   83a6c:	2300      	movs	r3, #0
}
   83a6e:	4618      	mov	r0, r3
   83a70:	3714      	adds	r7, #20
   83a72:	46bd      	mov	sp, r7
   83a74:	bc80      	pop	{r7}
   83a76:	4770      	bx	lr

00083a78 <__aeabi_drsub>:
   83a78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83a7c:	e002      	b.n	83a84 <__adddf3>
   83a7e:	bf00      	nop

00083a80 <__aeabi_dsub>:
   83a80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083a84 <__adddf3>:
   83a84:	b530      	push	{r4, r5, lr}
   83a86:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83a8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83a8e:	ea94 0f05 	teq	r4, r5
   83a92:	bf08      	it	eq
   83a94:	ea90 0f02 	teqeq	r0, r2
   83a98:	bf1f      	itttt	ne
   83a9a:	ea54 0c00 	orrsne.w	ip, r4, r0
   83a9e:	ea55 0c02 	orrsne.w	ip, r5, r2
   83aa2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83aa6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83aaa:	f000 80e2 	beq.w	83c72 <__adddf3+0x1ee>
   83aae:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83ab2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83ab6:	bfb8      	it	lt
   83ab8:	426d      	neglt	r5, r5
   83aba:	dd0c      	ble.n	83ad6 <__adddf3+0x52>
   83abc:	442c      	add	r4, r5
   83abe:	ea80 0202 	eor.w	r2, r0, r2
   83ac2:	ea81 0303 	eor.w	r3, r1, r3
   83ac6:	ea82 0000 	eor.w	r0, r2, r0
   83aca:	ea83 0101 	eor.w	r1, r3, r1
   83ace:	ea80 0202 	eor.w	r2, r0, r2
   83ad2:	ea81 0303 	eor.w	r3, r1, r3
   83ad6:	2d36      	cmp	r5, #54	; 0x36
   83ad8:	bf88      	it	hi
   83ada:	bd30      	pophi	{r4, r5, pc}
   83adc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83ae4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83ae8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83aec:	d002      	beq.n	83af4 <__adddf3+0x70>
   83aee:	4240      	negs	r0, r0
   83af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83af4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83af8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83afc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83b00:	d002      	beq.n	83b08 <__adddf3+0x84>
   83b02:	4252      	negs	r2, r2
   83b04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   83b08:	ea94 0f05 	teq	r4, r5
   83b0c:	f000 80a7 	beq.w	83c5e <__adddf3+0x1da>
   83b10:	f1a4 0401 	sub.w	r4, r4, #1
   83b14:	f1d5 0e20 	rsbs	lr, r5, #32
   83b18:	db0d      	blt.n	83b36 <__adddf3+0xb2>
   83b1a:	fa02 fc0e 	lsl.w	ip, r2, lr
   83b1e:	fa22 f205 	lsr.w	r2, r2, r5
   83b22:	1880      	adds	r0, r0, r2
   83b24:	f141 0100 	adc.w	r1, r1, #0
   83b28:	fa03 f20e 	lsl.w	r2, r3, lr
   83b2c:	1880      	adds	r0, r0, r2
   83b2e:	fa43 f305 	asr.w	r3, r3, r5
   83b32:	4159      	adcs	r1, r3
   83b34:	e00e      	b.n	83b54 <__adddf3+0xd0>
   83b36:	f1a5 0520 	sub.w	r5, r5, #32
   83b3a:	f10e 0e20 	add.w	lr, lr, #32
   83b3e:	2a01      	cmp	r2, #1
   83b40:	fa03 fc0e 	lsl.w	ip, r3, lr
   83b44:	bf28      	it	cs
   83b46:	f04c 0c02 	orrcs.w	ip, ip, #2
   83b4a:	fa43 f305 	asr.w	r3, r3, r5
   83b4e:	18c0      	adds	r0, r0, r3
   83b50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83b54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83b58:	d507      	bpl.n	83b6a <__adddf3+0xe6>
   83b5a:	f04f 0e00 	mov.w	lr, #0
   83b5e:	f1dc 0c00 	rsbs	ip, ip, #0
   83b62:	eb7e 0000 	sbcs.w	r0, lr, r0
   83b66:	eb6e 0101 	sbc.w	r1, lr, r1
   83b6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83b6e:	d31b      	bcc.n	83ba8 <__adddf3+0x124>
   83b70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83b74:	d30c      	bcc.n	83b90 <__adddf3+0x10c>
   83b76:	0849      	lsrs	r1, r1, #1
   83b78:	ea5f 0030 	movs.w	r0, r0, rrx
   83b7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83b80:	f104 0401 	add.w	r4, r4, #1
   83b84:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83b88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83b8c:	f080 809a 	bcs.w	83cc4 <__adddf3+0x240>
   83b90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83b94:	bf08      	it	eq
   83b96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83b9a:	f150 0000 	adcs.w	r0, r0, #0
   83b9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83ba2:	ea41 0105 	orr.w	r1, r1, r5
   83ba6:	bd30      	pop	{r4, r5, pc}
   83ba8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83bac:	4140      	adcs	r0, r0
   83bae:	eb41 0101 	adc.w	r1, r1, r1
   83bb2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83bb6:	f1a4 0401 	sub.w	r4, r4, #1
   83bba:	d1e9      	bne.n	83b90 <__adddf3+0x10c>
   83bbc:	f091 0f00 	teq	r1, #0
   83bc0:	bf04      	itt	eq
   83bc2:	4601      	moveq	r1, r0
   83bc4:	2000      	moveq	r0, #0
   83bc6:	fab1 f381 	clz	r3, r1
   83bca:	bf08      	it	eq
   83bcc:	3320      	addeq	r3, #32
   83bce:	f1a3 030b 	sub.w	r3, r3, #11
   83bd2:	f1b3 0220 	subs.w	r2, r3, #32
   83bd6:	da0c      	bge.n	83bf2 <__adddf3+0x16e>
   83bd8:	320c      	adds	r2, #12
   83bda:	dd08      	ble.n	83bee <__adddf3+0x16a>
   83bdc:	f102 0c14 	add.w	ip, r2, #20
   83be0:	f1c2 020c 	rsb	r2, r2, #12
   83be4:	fa01 f00c 	lsl.w	r0, r1, ip
   83be8:	fa21 f102 	lsr.w	r1, r1, r2
   83bec:	e00c      	b.n	83c08 <__adddf3+0x184>
   83bee:	f102 0214 	add.w	r2, r2, #20
   83bf2:	bfd8      	it	le
   83bf4:	f1c2 0c20 	rsble	ip, r2, #32
   83bf8:	fa01 f102 	lsl.w	r1, r1, r2
   83bfc:	fa20 fc0c 	lsr.w	ip, r0, ip
   83c00:	bfdc      	itt	le
   83c02:	ea41 010c 	orrle.w	r1, r1, ip
   83c06:	4090      	lslle	r0, r2
   83c08:	1ae4      	subs	r4, r4, r3
   83c0a:	bfa2      	ittt	ge
   83c0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83c10:	4329      	orrge	r1, r5
   83c12:	bd30      	popge	{r4, r5, pc}
   83c14:	ea6f 0404 	mvn.w	r4, r4
   83c18:	3c1f      	subs	r4, #31
   83c1a:	da1c      	bge.n	83c56 <__adddf3+0x1d2>
   83c1c:	340c      	adds	r4, #12
   83c1e:	dc0e      	bgt.n	83c3e <__adddf3+0x1ba>
   83c20:	f104 0414 	add.w	r4, r4, #20
   83c24:	f1c4 0220 	rsb	r2, r4, #32
   83c28:	fa20 f004 	lsr.w	r0, r0, r4
   83c2c:	fa01 f302 	lsl.w	r3, r1, r2
   83c30:	ea40 0003 	orr.w	r0, r0, r3
   83c34:	fa21 f304 	lsr.w	r3, r1, r4
   83c38:	ea45 0103 	orr.w	r1, r5, r3
   83c3c:	bd30      	pop	{r4, r5, pc}
   83c3e:	f1c4 040c 	rsb	r4, r4, #12
   83c42:	f1c4 0220 	rsb	r2, r4, #32
   83c46:	fa20 f002 	lsr.w	r0, r0, r2
   83c4a:	fa01 f304 	lsl.w	r3, r1, r4
   83c4e:	ea40 0003 	orr.w	r0, r0, r3
   83c52:	4629      	mov	r1, r5
   83c54:	bd30      	pop	{r4, r5, pc}
   83c56:	fa21 f004 	lsr.w	r0, r1, r4
   83c5a:	4629      	mov	r1, r5
   83c5c:	bd30      	pop	{r4, r5, pc}
   83c5e:	f094 0f00 	teq	r4, #0
   83c62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83c66:	bf06      	itte	eq
   83c68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83c6c:	3401      	addeq	r4, #1
   83c6e:	3d01      	subne	r5, #1
   83c70:	e74e      	b.n	83b10 <__adddf3+0x8c>
   83c72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83c76:	bf18      	it	ne
   83c78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83c7c:	d029      	beq.n	83cd2 <__adddf3+0x24e>
   83c7e:	ea94 0f05 	teq	r4, r5
   83c82:	bf08      	it	eq
   83c84:	ea90 0f02 	teqeq	r0, r2
   83c88:	d005      	beq.n	83c96 <__adddf3+0x212>
   83c8a:	ea54 0c00 	orrs.w	ip, r4, r0
   83c8e:	bf04      	itt	eq
   83c90:	4619      	moveq	r1, r3
   83c92:	4610      	moveq	r0, r2
   83c94:	bd30      	pop	{r4, r5, pc}
   83c96:	ea91 0f03 	teq	r1, r3
   83c9a:	bf1e      	ittt	ne
   83c9c:	2100      	movne	r1, #0
   83c9e:	2000      	movne	r0, #0
   83ca0:	bd30      	popne	{r4, r5, pc}
   83ca2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83ca6:	d105      	bne.n	83cb4 <__adddf3+0x230>
   83ca8:	0040      	lsls	r0, r0, #1
   83caa:	4149      	adcs	r1, r1
   83cac:	bf28      	it	cs
   83cae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83cb2:	bd30      	pop	{r4, r5, pc}
   83cb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83cb8:	bf3c      	itt	cc
   83cba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   83cbe:	bd30      	popcc	{r4, r5, pc}
   83cc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83cc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83cc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83ccc:	f04f 0000 	mov.w	r0, #0
   83cd0:	bd30      	pop	{r4, r5, pc}
   83cd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83cd6:	bf1a      	itte	ne
   83cd8:	4619      	movne	r1, r3
   83cda:	4610      	movne	r0, r2
   83cdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   83ce0:	bf1c      	itt	ne
   83ce2:	460b      	movne	r3, r1
   83ce4:	4602      	movne	r2, r0
   83ce6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83cea:	bf06      	itte	eq
   83cec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   83cf0:	ea91 0f03 	teqeq	r1, r3
   83cf4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83cf8:	bd30      	pop	{r4, r5, pc}
   83cfa:	bf00      	nop

00083cfc <__aeabi_ui2d>:
   83cfc:	f090 0f00 	teq	r0, #0
   83d00:	bf04      	itt	eq
   83d02:	2100      	moveq	r1, #0
   83d04:	4770      	bxeq	lr
   83d06:	b530      	push	{r4, r5, lr}
   83d08:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d0c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d10:	f04f 0500 	mov.w	r5, #0
   83d14:	f04f 0100 	mov.w	r1, #0
   83d18:	e750      	b.n	83bbc <__adddf3+0x138>
   83d1a:	bf00      	nop

00083d1c <__aeabi_i2d>:
   83d1c:	f090 0f00 	teq	r0, #0
   83d20:	bf04      	itt	eq
   83d22:	2100      	moveq	r1, #0
   83d24:	4770      	bxeq	lr
   83d26:	b530      	push	{r4, r5, lr}
   83d28:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83d2c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83d30:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83d34:	bf48      	it	mi
   83d36:	4240      	negmi	r0, r0
   83d38:	f04f 0100 	mov.w	r1, #0
   83d3c:	e73e      	b.n	83bbc <__adddf3+0x138>
   83d3e:	bf00      	nop

00083d40 <__aeabi_f2d>:
   83d40:	0042      	lsls	r2, r0, #1
   83d42:	ea4f 01e2 	mov.w	r1, r2, asr #3
   83d46:	ea4f 0131 	mov.w	r1, r1, rrx
   83d4a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83d4e:	bf1f      	itttt	ne
   83d50:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83d54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d58:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83d5c:	4770      	bxne	lr
   83d5e:	f092 0f00 	teq	r2, #0
   83d62:	bf14      	ite	ne
   83d64:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83d68:	4770      	bxeq	lr
   83d6a:	b530      	push	{r4, r5, lr}
   83d6c:	f44f 7460 	mov.w	r4, #896	; 0x380
   83d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83d74:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83d78:	e720      	b.n	83bbc <__adddf3+0x138>
   83d7a:	bf00      	nop

00083d7c <__aeabi_ul2d>:
   83d7c:	ea50 0201 	orrs.w	r2, r0, r1
   83d80:	bf08      	it	eq
   83d82:	4770      	bxeq	lr
   83d84:	b530      	push	{r4, r5, lr}
   83d86:	f04f 0500 	mov.w	r5, #0
   83d8a:	e00a      	b.n	83da2 <__aeabi_l2d+0x16>

00083d8c <__aeabi_l2d>:
   83d8c:	ea50 0201 	orrs.w	r2, r0, r1
   83d90:	bf08      	it	eq
   83d92:	4770      	bxeq	lr
   83d94:	b530      	push	{r4, r5, lr}
   83d96:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83d9a:	d502      	bpl.n	83da2 <__aeabi_l2d+0x16>
   83d9c:	4240      	negs	r0, r0
   83d9e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83da2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83da6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83daa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83dae:	f43f aedc 	beq.w	83b6a <__adddf3+0xe6>
   83db2:	f04f 0203 	mov.w	r2, #3
   83db6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83dba:	bf18      	it	ne
   83dbc:	3203      	addne	r2, #3
   83dbe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83dc2:	bf18      	it	ne
   83dc4:	3203      	addne	r2, #3
   83dc6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83dca:	f1c2 0320 	rsb	r3, r2, #32
   83dce:	fa00 fc03 	lsl.w	ip, r0, r3
   83dd2:	fa20 f002 	lsr.w	r0, r0, r2
   83dd6:	fa01 fe03 	lsl.w	lr, r1, r3
   83dda:	ea40 000e 	orr.w	r0, r0, lr
   83dde:	fa21 f102 	lsr.w	r1, r1, r2
   83de2:	4414      	add	r4, r2
   83de4:	e6c1      	b.n	83b6a <__adddf3+0xe6>
   83de6:	bf00      	nop

00083de8 <__aeabi_d2uiz>:
   83de8:	004a      	lsls	r2, r1, #1
   83dea:	d211      	bcs.n	83e10 <__aeabi_d2uiz+0x28>
   83dec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83df0:	d211      	bcs.n	83e16 <__aeabi_d2uiz+0x2e>
   83df2:	d50d      	bpl.n	83e10 <__aeabi_d2uiz+0x28>
   83df4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83df8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83dfc:	d40e      	bmi.n	83e1c <__aeabi_d2uiz+0x34>
   83dfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83e02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83e06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83e0a:	fa23 f002 	lsr.w	r0, r3, r2
   83e0e:	4770      	bx	lr
   83e10:	f04f 0000 	mov.w	r0, #0
   83e14:	4770      	bx	lr
   83e16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83e1a:	d102      	bne.n	83e22 <__aeabi_d2uiz+0x3a>
   83e1c:	f04f 30ff 	mov.w	r0, #4294967295
   83e20:	4770      	bx	lr
   83e22:	f04f 0000 	mov.w	r0, #0
   83e26:	4770      	bx	lr

00083e28 <__libc_init_array>:
   83e28:	b570      	push	{r4, r5, r6, lr}
   83e2a:	4e0f      	ldr	r6, [pc, #60]	; (83e68 <__libc_init_array+0x40>)
   83e2c:	4d0f      	ldr	r5, [pc, #60]	; (83e6c <__libc_init_array+0x44>)
   83e2e:	1b76      	subs	r6, r6, r5
   83e30:	10b6      	asrs	r6, r6, #2
   83e32:	bf18      	it	ne
   83e34:	2400      	movne	r4, #0
   83e36:	d005      	beq.n	83e44 <__libc_init_array+0x1c>
   83e38:	3401      	adds	r4, #1
   83e3a:	f855 3b04 	ldr.w	r3, [r5], #4
   83e3e:	4798      	blx	r3
   83e40:	42a6      	cmp	r6, r4
   83e42:	d1f9      	bne.n	83e38 <__libc_init_array+0x10>
   83e44:	4e0a      	ldr	r6, [pc, #40]	; (83e70 <__libc_init_array+0x48>)
   83e46:	4d0b      	ldr	r5, [pc, #44]	; (83e74 <__libc_init_array+0x4c>)
   83e48:	f002 fffa 	bl	86e40 <_init>
   83e4c:	1b76      	subs	r6, r6, r5
   83e4e:	10b6      	asrs	r6, r6, #2
   83e50:	bf18      	it	ne
   83e52:	2400      	movne	r4, #0
   83e54:	d006      	beq.n	83e64 <__libc_init_array+0x3c>
   83e56:	3401      	adds	r4, #1
   83e58:	f855 3b04 	ldr.w	r3, [r5], #4
   83e5c:	4798      	blx	r3
   83e5e:	42a6      	cmp	r6, r4
   83e60:	d1f9      	bne.n	83e56 <__libc_init_array+0x2e>
   83e62:	bd70      	pop	{r4, r5, r6, pc}
   83e64:	bd70      	pop	{r4, r5, r6, pc}
   83e66:	bf00      	nop
   83e68:	00086e4c 	.word	0x00086e4c
   83e6c:	00086e4c 	.word	0x00086e4c
   83e70:	00086e54 	.word	0x00086e54
   83e74:	00086e4c 	.word	0x00086e4c

00083e78 <iprintf>:
   83e78:	b40f      	push	{r0, r1, r2, r3}
   83e7a:	b510      	push	{r4, lr}
   83e7c:	4b07      	ldr	r3, [pc, #28]	; (83e9c <iprintf+0x24>)
   83e7e:	b082      	sub	sp, #8
   83e80:	ac04      	add	r4, sp, #16
   83e82:	f854 2b04 	ldr.w	r2, [r4], #4
   83e86:	6818      	ldr	r0, [r3, #0]
   83e88:	4623      	mov	r3, r4
   83e8a:	6881      	ldr	r1, [r0, #8]
   83e8c:	9401      	str	r4, [sp, #4]
   83e8e:	f000 f96f 	bl	84170 <_vfiprintf_r>
   83e92:	b002      	add	sp, #8
   83e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83e98:	b004      	add	sp, #16
   83e9a:	4770      	bx	lr
   83e9c:	20070830 	.word	0x20070830

00083ea0 <memset>:
   83ea0:	b470      	push	{r4, r5, r6}
   83ea2:	0784      	lsls	r4, r0, #30
   83ea4:	d046      	beq.n	83f34 <memset+0x94>
   83ea6:	1e54      	subs	r4, r2, #1
   83ea8:	2a00      	cmp	r2, #0
   83eaa:	d041      	beq.n	83f30 <memset+0x90>
   83eac:	b2cd      	uxtb	r5, r1
   83eae:	4603      	mov	r3, r0
   83eb0:	e002      	b.n	83eb8 <memset+0x18>
   83eb2:	1e62      	subs	r2, r4, #1
   83eb4:	b3e4      	cbz	r4, 83f30 <memset+0x90>
   83eb6:	4614      	mov	r4, r2
   83eb8:	f803 5b01 	strb.w	r5, [r3], #1
   83ebc:	079a      	lsls	r2, r3, #30
   83ebe:	d1f8      	bne.n	83eb2 <memset+0x12>
   83ec0:	2c03      	cmp	r4, #3
   83ec2:	d92e      	bls.n	83f22 <memset+0x82>
   83ec4:	b2cd      	uxtb	r5, r1
   83ec6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83eca:	2c0f      	cmp	r4, #15
   83ecc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83ed0:	d919      	bls.n	83f06 <memset+0x66>
   83ed2:	4626      	mov	r6, r4
   83ed4:	f103 0210 	add.w	r2, r3, #16
   83ed8:	3e10      	subs	r6, #16
   83eda:	2e0f      	cmp	r6, #15
   83edc:	f842 5c10 	str.w	r5, [r2, #-16]
   83ee0:	f842 5c0c 	str.w	r5, [r2, #-12]
   83ee4:	f842 5c08 	str.w	r5, [r2, #-8]
   83ee8:	f842 5c04 	str.w	r5, [r2, #-4]
   83eec:	f102 0210 	add.w	r2, r2, #16
   83ef0:	d8f2      	bhi.n	83ed8 <memset+0x38>
   83ef2:	f1a4 0210 	sub.w	r2, r4, #16
   83ef6:	f022 020f 	bic.w	r2, r2, #15
   83efa:	f004 040f 	and.w	r4, r4, #15
   83efe:	3210      	adds	r2, #16
   83f00:	2c03      	cmp	r4, #3
   83f02:	4413      	add	r3, r2
   83f04:	d90d      	bls.n	83f22 <memset+0x82>
   83f06:	461e      	mov	r6, r3
   83f08:	4622      	mov	r2, r4
   83f0a:	3a04      	subs	r2, #4
   83f0c:	2a03      	cmp	r2, #3
   83f0e:	f846 5b04 	str.w	r5, [r6], #4
   83f12:	d8fa      	bhi.n	83f0a <memset+0x6a>
   83f14:	1f22      	subs	r2, r4, #4
   83f16:	f022 0203 	bic.w	r2, r2, #3
   83f1a:	3204      	adds	r2, #4
   83f1c:	4413      	add	r3, r2
   83f1e:	f004 0403 	and.w	r4, r4, #3
   83f22:	b12c      	cbz	r4, 83f30 <memset+0x90>
   83f24:	b2c9      	uxtb	r1, r1
   83f26:	441c      	add	r4, r3
   83f28:	f803 1b01 	strb.w	r1, [r3], #1
   83f2c:	42a3      	cmp	r3, r4
   83f2e:	d1fb      	bne.n	83f28 <memset+0x88>
   83f30:	bc70      	pop	{r4, r5, r6}
   83f32:	4770      	bx	lr
   83f34:	4614      	mov	r4, r2
   83f36:	4603      	mov	r3, r0
   83f38:	e7c2      	b.n	83ec0 <memset+0x20>
   83f3a:	bf00      	nop

00083f3c <setbuf>:
   83f3c:	2900      	cmp	r1, #0
   83f3e:	bf0c      	ite	eq
   83f40:	2202      	moveq	r2, #2
   83f42:	2200      	movne	r2, #0
   83f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f48:	f000 b800 	b.w	83f4c <setvbuf>

00083f4c <setvbuf>:
   83f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83f50:	4d51      	ldr	r5, [pc, #324]	; (84098 <setvbuf+0x14c>)
   83f52:	b083      	sub	sp, #12
   83f54:	682d      	ldr	r5, [r5, #0]
   83f56:	4604      	mov	r4, r0
   83f58:	460f      	mov	r7, r1
   83f5a:	4690      	mov	r8, r2
   83f5c:	461e      	mov	r6, r3
   83f5e:	b115      	cbz	r5, 83f66 <setvbuf+0x1a>
   83f60:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83f62:	2b00      	cmp	r3, #0
   83f64:	d079      	beq.n	8405a <setvbuf+0x10e>
   83f66:	f1b8 0f02 	cmp.w	r8, #2
   83f6a:	d004      	beq.n	83f76 <setvbuf+0x2a>
   83f6c:	f1b8 0f01 	cmp.w	r8, #1
   83f70:	d87f      	bhi.n	84072 <setvbuf+0x126>
   83f72:	2e00      	cmp	r6, #0
   83f74:	db7d      	blt.n	84072 <setvbuf+0x126>
   83f76:	4621      	mov	r1, r4
   83f78:	4628      	mov	r0, r5
   83f7a:	f001 f93b 	bl	851f4 <_fflush_r>
   83f7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83f80:	b141      	cbz	r1, 83f94 <setvbuf+0x48>
   83f82:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83f86:	4299      	cmp	r1, r3
   83f88:	d002      	beq.n	83f90 <setvbuf+0x44>
   83f8a:	4628      	mov	r0, r5
   83f8c:	f001 fa8e 	bl	854ac <_free_r>
   83f90:	2300      	movs	r3, #0
   83f92:	6323      	str	r3, [r4, #48]	; 0x30
   83f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f98:	2200      	movs	r2, #0
   83f9a:	61a2      	str	r2, [r4, #24]
   83f9c:	6062      	str	r2, [r4, #4]
   83f9e:	061a      	lsls	r2, r3, #24
   83fa0:	d454      	bmi.n	8404c <setvbuf+0x100>
   83fa2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83fa6:	f023 0303 	bic.w	r3, r3, #3
   83faa:	f1b8 0f02 	cmp.w	r8, #2
   83fae:	81a3      	strh	r3, [r4, #12]
   83fb0:	d039      	beq.n	84026 <setvbuf+0xda>
   83fb2:	ab01      	add	r3, sp, #4
   83fb4:	466a      	mov	r2, sp
   83fb6:	4621      	mov	r1, r4
   83fb8:	4628      	mov	r0, r5
   83fba:	f001 fd15 	bl	859e8 <__swhatbuf_r>
   83fbe:	89a3      	ldrh	r3, [r4, #12]
   83fc0:	4318      	orrs	r0, r3
   83fc2:	81a0      	strh	r0, [r4, #12]
   83fc4:	b326      	cbz	r6, 84010 <setvbuf+0xc4>
   83fc6:	b327      	cbz	r7, 84012 <setvbuf+0xc6>
   83fc8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83fca:	2b00      	cmp	r3, #0
   83fcc:	d04d      	beq.n	8406a <setvbuf+0x11e>
   83fce:	9b00      	ldr	r3, [sp, #0]
   83fd0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83fd4:	429e      	cmp	r6, r3
   83fd6:	bf1c      	itt	ne
   83fd8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   83fdc:	81a0      	strhne	r0, [r4, #12]
   83fde:	f1b8 0f01 	cmp.w	r8, #1
   83fe2:	bf08      	it	eq
   83fe4:	f040 0001 	orreq.w	r0, r0, #1
   83fe8:	b283      	uxth	r3, r0
   83fea:	bf08      	it	eq
   83fec:	81a0      	strheq	r0, [r4, #12]
   83fee:	f003 0008 	and.w	r0, r3, #8
   83ff2:	b280      	uxth	r0, r0
   83ff4:	6027      	str	r7, [r4, #0]
   83ff6:	6127      	str	r7, [r4, #16]
   83ff8:	6166      	str	r6, [r4, #20]
   83ffa:	b318      	cbz	r0, 84044 <setvbuf+0xf8>
   83ffc:	f013 0001 	ands.w	r0, r3, #1
   84000:	d02f      	beq.n	84062 <setvbuf+0x116>
   84002:	2000      	movs	r0, #0
   84004:	4276      	negs	r6, r6
   84006:	61a6      	str	r6, [r4, #24]
   84008:	60a0      	str	r0, [r4, #8]
   8400a:	b003      	add	sp, #12
   8400c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84010:	9e00      	ldr	r6, [sp, #0]
   84012:	4630      	mov	r0, r6
   84014:	f001 fd5c 	bl	85ad0 <malloc>
   84018:	4607      	mov	r7, r0
   8401a:	b368      	cbz	r0, 84078 <setvbuf+0x12c>
   8401c:	89a3      	ldrh	r3, [r4, #12]
   8401e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84022:	81a3      	strh	r3, [r4, #12]
   84024:	e7d0      	b.n	83fc8 <setvbuf+0x7c>
   84026:	2000      	movs	r0, #0
   84028:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8402c:	f043 0302 	orr.w	r3, r3, #2
   84030:	2500      	movs	r5, #0
   84032:	2101      	movs	r1, #1
   84034:	81a3      	strh	r3, [r4, #12]
   84036:	60a5      	str	r5, [r4, #8]
   84038:	6022      	str	r2, [r4, #0]
   8403a:	6122      	str	r2, [r4, #16]
   8403c:	6161      	str	r1, [r4, #20]
   8403e:	b003      	add	sp, #12
   84040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84044:	60a0      	str	r0, [r4, #8]
   84046:	b003      	add	sp, #12
   84048:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8404c:	6921      	ldr	r1, [r4, #16]
   8404e:	4628      	mov	r0, r5
   84050:	f001 fa2c 	bl	854ac <_free_r>
   84054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84058:	e7a3      	b.n	83fa2 <setvbuf+0x56>
   8405a:	4628      	mov	r0, r5
   8405c:	f001 f95e 	bl	8531c <__sinit>
   84060:	e781      	b.n	83f66 <setvbuf+0x1a>
   84062:	60a6      	str	r6, [r4, #8]
   84064:	b003      	add	sp, #12
   84066:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8406a:	4628      	mov	r0, r5
   8406c:	f001 f956 	bl	8531c <__sinit>
   84070:	e7ad      	b.n	83fce <setvbuf+0x82>
   84072:	f04f 30ff 	mov.w	r0, #4294967295
   84076:	e7e2      	b.n	8403e <setvbuf+0xf2>
   84078:	f8dd 9000 	ldr.w	r9, [sp]
   8407c:	45b1      	cmp	r9, r6
   8407e:	d006      	beq.n	8408e <setvbuf+0x142>
   84080:	4648      	mov	r0, r9
   84082:	f001 fd25 	bl	85ad0 <malloc>
   84086:	4607      	mov	r7, r0
   84088:	b108      	cbz	r0, 8408e <setvbuf+0x142>
   8408a:	464e      	mov	r6, r9
   8408c:	e7c6      	b.n	8401c <setvbuf+0xd0>
   8408e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84092:	f04f 30ff 	mov.w	r0, #4294967295
   84096:	e7c7      	b.n	84028 <setvbuf+0xdc>
   84098:	20070830 	.word	0x20070830

0008409c <strlen>:
   8409c:	f020 0103 	bic.w	r1, r0, #3
   840a0:	f010 0003 	ands.w	r0, r0, #3
   840a4:	f1c0 0000 	rsb	r0, r0, #0
   840a8:	f851 3b04 	ldr.w	r3, [r1], #4
   840ac:	f100 0c04 	add.w	ip, r0, #4
   840b0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   840b4:	f06f 0200 	mvn.w	r2, #0
   840b8:	bf1c      	itt	ne
   840ba:	fa22 f20c 	lsrne.w	r2, r2, ip
   840be:	4313      	orrne	r3, r2
   840c0:	f04f 0c01 	mov.w	ip, #1
   840c4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   840c8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   840cc:	eba3 020c 	sub.w	r2, r3, ip
   840d0:	ea22 0203 	bic.w	r2, r2, r3
   840d4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   840d8:	bf04      	itt	eq
   840da:	f851 3b04 	ldreq.w	r3, [r1], #4
   840de:	3004      	addeq	r0, #4
   840e0:	d0f4      	beq.n	840cc <strlen+0x30>
   840e2:	f1c2 0100 	rsb	r1, r2, #0
   840e6:	ea02 0201 	and.w	r2, r2, r1
   840ea:	fab2 f282 	clz	r2, r2
   840ee:	f1c2 021f 	rsb	r2, r2, #31
   840f2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   840f6:	4770      	bx	lr

000840f8 <__sprint_r.part.0>:
   840f8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   840fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   840fe:	049c      	lsls	r4, r3, #18
   84100:	4692      	mov	sl, r2
   84102:	d52c      	bpl.n	8415e <__sprint_r.part.0+0x66>
   84104:	6893      	ldr	r3, [r2, #8]
   84106:	6812      	ldr	r2, [r2, #0]
   84108:	b33b      	cbz	r3, 8415a <__sprint_r.part.0+0x62>
   8410a:	460f      	mov	r7, r1
   8410c:	4680      	mov	r8, r0
   8410e:	f102 0908 	add.w	r9, r2, #8
   84112:	e919 0060 	ldmdb	r9, {r5, r6}
   84116:	08b6      	lsrs	r6, r6, #2
   84118:	d017      	beq.n	8414a <__sprint_r.part.0+0x52>
   8411a:	3d04      	subs	r5, #4
   8411c:	2400      	movs	r4, #0
   8411e:	e001      	b.n	84124 <__sprint_r.part.0+0x2c>
   84120:	42a6      	cmp	r6, r4
   84122:	d010      	beq.n	84146 <__sprint_r.part.0+0x4e>
   84124:	463a      	mov	r2, r7
   84126:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8412a:	4640      	mov	r0, r8
   8412c:	f001 f95e 	bl	853ec <_fputwc_r>
   84130:	1c43      	adds	r3, r0, #1
   84132:	f104 0401 	add.w	r4, r4, #1
   84136:	d1f3      	bne.n	84120 <__sprint_r.part.0+0x28>
   84138:	2300      	movs	r3, #0
   8413a:	f8ca 3008 	str.w	r3, [sl, #8]
   8413e:	f8ca 3004 	str.w	r3, [sl, #4]
   84142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84146:	f8da 3008 	ldr.w	r3, [sl, #8]
   8414a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   8414e:	f8ca 3008 	str.w	r3, [sl, #8]
   84152:	f109 0908 	add.w	r9, r9, #8
   84156:	2b00      	cmp	r3, #0
   84158:	d1db      	bne.n	84112 <__sprint_r.part.0+0x1a>
   8415a:	2000      	movs	r0, #0
   8415c:	e7ec      	b.n	84138 <__sprint_r.part.0+0x40>
   8415e:	f001 fa8d 	bl	8567c <__sfvwrite_r>
   84162:	2300      	movs	r3, #0
   84164:	f8ca 3008 	str.w	r3, [sl, #8]
   84168:	f8ca 3004 	str.w	r3, [sl, #4]
   8416c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084170 <_vfiprintf_r>:
   84170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84174:	b0ab      	sub	sp, #172	; 0xac
   84176:	461c      	mov	r4, r3
   84178:	9100      	str	r1, [sp, #0]
   8417a:	4690      	mov	r8, r2
   8417c:	9304      	str	r3, [sp, #16]
   8417e:	9005      	str	r0, [sp, #20]
   84180:	b118      	cbz	r0, 8418a <_vfiprintf_r+0x1a>
   84182:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84184:	2b00      	cmp	r3, #0
   84186:	f000 80de 	beq.w	84346 <_vfiprintf_r+0x1d6>
   8418a:	9800      	ldr	r0, [sp, #0]
   8418c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   84190:	b28a      	uxth	r2, r1
   84192:	0495      	lsls	r5, r2, #18
   84194:	d407      	bmi.n	841a6 <_vfiprintf_r+0x36>
   84196:	6e43      	ldr	r3, [r0, #100]	; 0x64
   84198:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8419c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   841a0:	8182      	strh	r2, [r0, #12]
   841a2:	6643      	str	r3, [r0, #100]	; 0x64
   841a4:	b292      	uxth	r2, r2
   841a6:	0711      	lsls	r1, r2, #28
   841a8:	f140 80b1 	bpl.w	8430e <_vfiprintf_r+0x19e>
   841ac:	9b00      	ldr	r3, [sp, #0]
   841ae:	691b      	ldr	r3, [r3, #16]
   841b0:	2b00      	cmp	r3, #0
   841b2:	f000 80ac 	beq.w	8430e <_vfiprintf_r+0x19e>
   841b6:	f002 021a 	and.w	r2, r2, #26
   841ba:	2a0a      	cmp	r2, #10
   841bc:	f000 80b5 	beq.w	8432a <_vfiprintf_r+0x1ba>
   841c0:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   841c4:	46d3      	mov	fp, sl
   841c6:	2300      	movs	r3, #0
   841c8:	9302      	str	r3, [sp, #8]
   841ca:	930f      	str	r3, [sp, #60]	; 0x3c
   841cc:	930e      	str	r3, [sp, #56]	; 0x38
   841ce:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   841d2:	f898 3000 	ldrb.w	r3, [r8]
   841d6:	4644      	mov	r4, r8
   841d8:	b1fb      	cbz	r3, 8421a <_vfiprintf_r+0xaa>
   841da:	2b25      	cmp	r3, #37	; 0x25
   841dc:	d102      	bne.n	841e4 <_vfiprintf_r+0x74>
   841de:	e01c      	b.n	8421a <_vfiprintf_r+0xaa>
   841e0:	2b25      	cmp	r3, #37	; 0x25
   841e2:	d003      	beq.n	841ec <_vfiprintf_r+0x7c>
   841e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   841e8:	2b00      	cmp	r3, #0
   841ea:	d1f9      	bne.n	841e0 <_vfiprintf_r+0x70>
   841ec:	ebc8 0504 	rsb	r5, r8, r4
   841f0:	b19d      	cbz	r5, 8421a <_vfiprintf_r+0xaa>
   841f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   841f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   841f6:	3301      	adds	r3, #1
   841f8:	442a      	add	r2, r5
   841fa:	2b07      	cmp	r3, #7
   841fc:	f8cb 8000 	str.w	r8, [fp]
   84200:	f8cb 5004 	str.w	r5, [fp, #4]
   84204:	920f      	str	r2, [sp, #60]	; 0x3c
   84206:	930e      	str	r3, [sp, #56]	; 0x38
   84208:	dd7b      	ble.n	84302 <_vfiprintf_r+0x192>
   8420a:	2a00      	cmp	r2, #0
   8420c:	f040 851f 	bne.w	84c4e <_vfiprintf_r+0xade>
   84210:	46d3      	mov	fp, sl
   84212:	9b02      	ldr	r3, [sp, #8]
   84214:	920e      	str	r2, [sp, #56]	; 0x38
   84216:	442b      	add	r3, r5
   84218:	9302      	str	r3, [sp, #8]
   8421a:	7823      	ldrb	r3, [r4, #0]
   8421c:	2b00      	cmp	r3, #0
   8421e:	f000 843b 	beq.w	84a98 <_vfiprintf_r+0x928>
   84222:	f04f 0300 	mov.w	r3, #0
   84226:	2100      	movs	r1, #0
   84228:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8422c:	f104 0801 	add.w	r8, r4, #1
   84230:	7863      	ldrb	r3, [r4, #1]
   84232:	4608      	mov	r0, r1
   84234:	460e      	mov	r6, r1
   84236:	460c      	mov	r4, r1
   84238:	f04f 32ff 	mov.w	r2, #4294967295
   8423c:	9201      	str	r2, [sp, #4]
   8423e:	f108 0801 	add.w	r8, r8, #1
   84242:	f1a3 0220 	sub.w	r2, r3, #32
   84246:	2a58      	cmp	r2, #88	; 0x58
   84248:	f200 838b 	bhi.w	84962 <_vfiprintf_r+0x7f2>
   8424c:	e8df f012 	tbh	[pc, r2, lsl #1]
   84250:	0389033d 	.word	0x0389033d
   84254:	03450389 	.word	0x03450389
   84258:	03890389 	.word	0x03890389
   8425c:	03890389 	.word	0x03890389
   84260:	03890389 	.word	0x03890389
   84264:	026b007e 	.word	0x026b007e
   84268:	00860389 	.word	0x00860389
   8426c:	03890270 	.word	0x03890270
   84270:	025d01cc 	.word	0x025d01cc
   84274:	025d025d 	.word	0x025d025d
   84278:	025d025d 	.word	0x025d025d
   8427c:	025d025d 	.word	0x025d025d
   84280:	025d025d 	.word	0x025d025d
   84284:	03890389 	.word	0x03890389
   84288:	03890389 	.word	0x03890389
   8428c:	03890389 	.word	0x03890389
   84290:	03890389 	.word	0x03890389
   84294:	03890389 	.word	0x03890389
   84298:	038901d1 	.word	0x038901d1
   8429c:	03890389 	.word	0x03890389
   842a0:	03890389 	.word	0x03890389
   842a4:	03890389 	.word	0x03890389
   842a8:	03890389 	.word	0x03890389
   842ac:	021a0389 	.word	0x021a0389
   842b0:	03890389 	.word	0x03890389
   842b4:	03890389 	.word	0x03890389
   842b8:	02e50389 	.word	0x02e50389
   842bc:	03890389 	.word	0x03890389
   842c0:	03890308 	.word	0x03890308
   842c4:	03890389 	.word	0x03890389
   842c8:	03890389 	.word	0x03890389
   842cc:	03890389 	.word	0x03890389
   842d0:	03890389 	.word	0x03890389
   842d4:	032b0389 	.word	0x032b0389
   842d8:	03890382 	.word	0x03890382
   842dc:	03890389 	.word	0x03890389
   842e0:	0382035e 	.word	0x0382035e
   842e4:	03890389 	.word	0x03890389
   842e8:	03890363 	.word	0x03890363
   842ec:	028d0370 	.word	0x028d0370
   842f0:	02e0008b 	.word	0x02e0008b
   842f4:	02930389 	.word	0x02930389
   842f8:	02b20389 	.word	0x02b20389
   842fc:	03890389 	.word	0x03890389
   84300:	034a      	.short	0x034a
   84302:	f10b 0b08 	add.w	fp, fp, #8
   84306:	9b02      	ldr	r3, [sp, #8]
   84308:	442b      	add	r3, r5
   8430a:	9302      	str	r3, [sp, #8]
   8430c:	e785      	b.n	8421a <_vfiprintf_r+0xaa>
   8430e:	9900      	ldr	r1, [sp, #0]
   84310:	9805      	ldr	r0, [sp, #20]
   84312:	f000 fe57 	bl	84fc4 <__swsetup_r>
   84316:	2800      	cmp	r0, #0
   84318:	f040 8545 	bne.w	84da6 <_vfiprintf_r+0xc36>
   8431c:	9b00      	ldr	r3, [sp, #0]
   8431e:	899a      	ldrh	r2, [r3, #12]
   84320:	f002 021a 	and.w	r2, r2, #26
   84324:	2a0a      	cmp	r2, #10
   84326:	f47f af4b 	bne.w	841c0 <_vfiprintf_r+0x50>
   8432a:	9900      	ldr	r1, [sp, #0]
   8432c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   84330:	2b00      	cmp	r3, #0
   84332:	f6ff af45 	blt.w	841c0 <_vfiprintf_r+0x50>
   84336:	4623      	mov	r3, r4
   84338:	4642      	mov	r2, r8
   8433a:	9805      	ldr	r0, [sp, #20]
   8433c:	f000 fe0c 	bl	84f58 <__sbprintf>
   84340:	b02b      	add	sp, #172	; 0xac
   84342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84346:	f000 ffe9 	bl	8531c <__sinit>
   8434a:	e71e      	b.n	8418a <_vfiprintf_r+0x1a>
   8434c:	9a04      	ldr	r2, [sp, #16]
   8434e:	4613      	mov	r3, r2
   84350:	6814      	ldr	r4, [r2, #0]
   84352:	3304      	adds	r3, #4
   84354:	2c00      	cmp	r4, #0
   84356:	9304      	str	r3, [sp, #16]
   84358:	da02      	bge.n	84360 <_vfiprintf_r+0x1f0>
   8435a:	4264      	negs	r4, r4
   8435c:	f046 0604 	orr.w	r6, r6, #4
   84360:	f898 3000 	ldrb.w	r3, [r8]
   84364:	e76b      	b.n	8423e <_vfiprintf_r+0xce>
   84366:	f04f 0300 	mov.w	r3, #0
   8436a:	9804      	ldr	r0, [sp, #16]
   8436c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84370:	4603      	mov	r3, r0
   84372:	2130      	movs	r1, #48	; 0x30
   84374:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   84378:	9901      	ldr	r1, [sp, #4]
   8437a:	2278      	movs	r2, #120	; 0x78
   8437c:	2900      	cmp	r1, #0
   8437e:	9406      	str	r4, [sp, #24]
   84380:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   84384:	6804      	ldr	r4, [r0, #0]
   84386:	f103 0304 	add.w	r3, r3, #4
   8438a:	f04f 0500 	mov.w	r5, #0
   8438e:	f046 0202 	orr.w	r2, r6, #2
   84392:	f2c0 850c 	blt.w	84dae <_vfiprintf_r+0xc3e>
   84396:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8439a:	ea54 0205 	orrs.w	r2, r4, r5
   8439e:	f046 0602 	orr.w	r6, r6, #2
   843a2:	9304      	str	r3, [sp, #16]
   843a4:	f040 84b5 	bne.w	84d12 <_vfiprintf_r+0xba2>
   843a8:	48b3      	ldr	r0, [pc, #716]	; (84678 <_vfiprintf_r+0x508>)
   843aa:	9b01      	ldr	r3, [sp, #4]
   843ac:	2b00      	cmp	r3, #0
   843ae:	f040 8462 	bne.w	84c76 <_vfiprintf_r+0xb06>
   843b2:	4699      	mov	r9, r3
   843b4:	4657      	mov	r7, sl
   843b6:	2300      	movs	r3, #0
   843b8:	9301      	str	r3, [sp, #4]
   843ba:	9303      	str	r3, [sp, #12]
   843bc:	9b01      	ldr	r3, [sp, #4]
   843be:	9a03      	ldr	r2, [sp, #12]
   843c0:	4293      	cmp	r3, r2
   843c2:	bfb8      	it	lt
   843c4:	4613      	movlt	r3, r2
   843c6:	461d      	mov	r5, r3
   843c8:	f1b9 0f00 	cmp.w	r9, #0
   843cc:	d000      	beq.n	843d0 <_vfiprintf_r+0x260>
   843ce:	3501      	adds	r5, #1
   843d0:	f016 0302 	ands.w	r3, r6, #2
   843d4:	9307      	str	r3, [sp, #28]
   843d6:	bf18      	it	ne
   843d8:	3502      	addne	r5, #2
   843da:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   843de:	9308      	str	r3, [sp, #32]
   843e0:	f040 82e8 	bne.w	849b4 <_vfiprintf_r+0x844>
   843e4:	9b06      	ldr	r3, [sp, #24]
   843e6:	1b5c      	subs	r4, r3, r5
   843e8:	2c00      	cmp	r4, #0
   843ea:	f340 82e3 	ble.w	849b4 <_vfiprintf_r+0x844>
   843ee:	2c10      	cmp	r4, #16
   843f0:	f340 853c 	ble.w	84e6c <_vfiprintf_r+0xcfc>
   843f4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8467c <_vfiprintf_r+0x50c>
   843f8:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   843fc:	46dc      	mov	ip, fp
   843fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84400:	46c3      	mov	fp, r8
   84402:	2310      	movs	r3, #16
   84404:	46a8      	mov	r8, r5
   84406:	4670      	mov	r0, lr
   84408:	464d      	mov	r5, r9
   8440a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8440e:	e007      	b.n	84420 <_vfiprintf_r+0x2b0>
   84410:	f100 0e02 	add.w	lr, r0, #2
   84414:	4608      	mov	r0, r1
   84416:	f10c 0c08 	add.w	ip, ip, #8
   8441a:	3c10      	subs	r4, #16
   8441c:	2c10      	cmp	r4, #16
   8441e:	dd13      	ble.n	84448 <_vfiprintf_r+0x2d8>
   84420:	1c41      	adds	r1, r0, #1
   84422:	3210      	adds	r2, #16
   84424:	2907      	cmp	r1, #7
   84426:	920f      	str	r2, [sp, #60]	; 0x3c
   84428:	f8cc 5000 	str.w	r5, [ip]
   8442c:	f8cc 3004 	str.w	r3, [ip, #4]
   84430:	910e      	str	r1, [sp, #56]	; 0x38
   84432:	dded      	ble.n	84410 <_vfiprintf_r+0x2a0>
   84434:	2a00      	cmp	r2, #0
   84436:	f040 82a5 	bne.w	84984 <_vfiprintf_r+0x814>
   8443a:	3c10      	subs	r4, #16
   8443c:	2c10      	cmp	r4, #16
   8443e:	4610      	mov	r0, r2
   84440:	f04f 0e01 	mov.w	lr, #1
   84444:	46d4      	mov	ip, sl
   84446:	dceb      	bgt.n	84420 <_vfiprintf_r+0x2b0>
   84448:	46a9      	mov	r9, r5
   8444a:	4670      	mov	r0, lr
   8444c:	4645      	mov	r5, r8
   8444e:	46d8      	mov	r8, fp
   84450:	46e3      	mov	fp, ip
   84452:	4422      	add	r2, r4
   84454:	2807      	cmp	r0, #7
   84456:	920f      	str	r2, [sp, #60]	; 0x3c
   84458:	f8cb 9000 	str.w	r9, [fp]
   8445c:	f8cb 4004 	str.w	r4, [fp, #4]
   84460:	900e      	str	r0, [sp, #56]	; 0x38
   84462:	f300 836d 	bgt.w	84b40 <_vfiprintf_r+0x9d0>
   84466:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8446a:	f10b 0b08 	add.w	fp, fp, #8
   8446e:	f100 0e01 	add.w	lr, r0, #1
   84472:	2b00      	cmp	r3, #0
   84474:	f040 82a7 	bne.w	849c6 <_vfiprintf_r+0x856>
   84478:	9b07      	ldr	r3, [sp, #28]
   8447a:	2b00      	cmp	r3, #0
   8447c:	f000 82ba 	beq.w	849f4 <_vfiprintf_r+0x884>
   84480:	3202      	adds	r2, #2
   84482:	a90c      	add	r1, sp, #48	; 0x30
   84484:	2302      	movs	r3, #2
   84486:	f1be 0f07 	cmp.w	lr, #7
   8448a:	920f      	str	r2, [sp, #60]	; 0x3c
   8448c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84490:	e88b 000a 	stmia.w	fp, {r1, r3}
   84494:	f340 8370 	ble.w	84b78 <_vfiprintf_r+0xa08>
   84498:	2a00      	cmp	r2, #0
   8449a:	f040 8400 	bne.w	84c9e <_vfiprintf_r+0xb2e>
   8449e:	9b08      	ldr	r3, [sp, #32]
   844a0:	f04f 0e01 	mov.w	lr, #1
   844a4:	2b80      	cmp	r3, #128	; 0x80
   844a6:	4610      	mov	r0, r2
   844a8:	46d3      	mov	fp, sl
   844aa:	f040 82a7 	bne.w	849fc <_vfiprintf_r+0x88c>
   844ae:	9b06      	ldr	r3, [sp, #24]
   844b0:	1b5c      	subs	r4, r3, r5
   844b2:	2c00      	cmp	r4, #0
   844b4:	f340 82a2 	ble.w	849fc <_vfiprintf_r+0x88c>
   844b8:	2c10      	cmp	r4, #16
   844ba:	f340 84f8 	ble.w	84eae <_vfiprintf_r+0xd3e>
   844be:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 84680 <_vfiprintf_r+0x510>
   844c2:	46de      	mov	lr, fp
   844c4:	2310      	movs	r3, #16
   844c6:	46c3      	mov	fp, r8
   844c8:	46a8      	mov	r8, r5
   844ca:	464d      	mov	r5, r9
   844cc:	f8dd 9014 	ldr.w	r9, [sp, #20]
   844d0:	e007      	b.n	844e2 <_vfiprintf_r+0x372>
   844d2:	f100 0c02 	add.w	ip, r0, #2
   844d6:	4608      	mov	r0, r1
   844d8:	f10e 0e08 	add.w	lr, lr, #8
   844dc:	3c10      	subs	r4, #16
   844de:	2c10      	cmp	r4, #16
   844e0:	dd13      	ble.n	8450a <_vfiprintf_r+0x39a>
   844e2:	1c41      	adds	r1, r0, #1
   844e4:	3210      	adds	r2, #16
   844e6:	2907      	cmp	r1, #7
   844e8:	920f      	str	r2, [sp, #60]	; 0x3c
   844ea:	f8ce 5000 	str.w	r5, [lr]
   844ee:	f8ce 3004 	str.w	r3, [lr, #4]
   844f2:	910e      	str	r1, [sp, #56]	; 0x38
   844f4:	dded      	ble.n	844d2 <_vfiprintf_r+0x362>
   844f6:	2a00      	cmp	r2, #0
   844f8:	f040 830c 	bne.w	84b14 <_vfiprintf_r+0x9a4>
   844fc:	3c10      	subs	r4, #16
   844fe:	2c10      	cmp	r4, #16
   84500:	f04f 0c01 	mov.w	ip, #1
   84504:	4610      	mov	r0, r2
   84506:	46d6      	mov	lr, sl
   84508:	dceb      	bgt.n	844e2 <_vfiprintf_r+0x372>
   8450a:	46a9      	mov	r9, r5
   8450c:	4645      	mov	r5, r8
   8450e:	46d8      	mov	r8, fp
   84510:	46f3      	mov	fp, lr
   84512:	4422      	add	r2, r4
   84514:	f1bc 0f07 	cmp.w	ip, #7
   84518:	920f      	str	r2, [sp, #60]	; 0x3c
   8451a:	f8cb 9000 	str.w	r9, [fp]
   8451e:	f8cb 4004 	str.w	r4, [fp, #4]
   84522:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   84526:	f300 83c8 	bgt.w	84cba <_vfiprintf_r+0xb4a>
   8452a:	9b01      	ldr	r3, [sp, #4]
   8452c:	9903      	ldr	r1, [sp, #12]
   8452e:	f10b 0b08 	add.w	fp, fp, #8
   84532:	1a5c      	subs	r4, r3, r1
   84534:	2c00      	cmp	r4, #0
   84536:	f10c 0e01 	add.w	lr, ip, #1
   8453a:	4660      	mov	r0, ip
   8453c:	f300 8264 	bgt.w	84a08 <_vfiprintf_r+0x898>
   84540:	9903      	ldr	r1, [sp, #12]
   84542:	f1be 0f07 	cmp.w	lr, #7
   84546:	440a      	add	r2, r1
   84548:	920f      	str	r2, [sp, #60]	; 0x3c
   8454a:	f8cb 7000 	str.w	r7, [fp]
   8454e:	f8cb 1004 	str.w	r1, [fp, #4]
   84552:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84556:	f340 82c5 	ble.w	84ae4 <_vfiprintf_r+0x974>
   8455a:	2a00      	cmp	r2, #0
   8455c:	f040 8332 	bne.w	84bc4 <_vfiprintf_r+0xa54>
   84560:	0770      	lsls	r0, r6, #29
   84562:	920e      	str	r2, [sp, #56]	; 0x38
   84564:	d538      	bpl.n	845d8 <_vfiprintf_r+0x468>
   84566:	9b06      	ldr	r3, [sp, #24]
   84568:	1b5c      	subs	r4, r3, r5
   8456a:	2c00      	cmp	r4, #0
   8456c:	dd34      	ble.n	845d8 <_vfiprintf_r+0x468>
   8456e:	46d3      	mov	fp, sl
   84570:	2c10      	cmp	r4, #16
   84572:	f340 8496 	ble.w	84ea2 <_vfiprintf_r+0xd32>
   84576:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8467c <_vfiprintf_r+0x50c>
   8457a:	990e      	ldr	r1, [sp, #56]	; 0x38
   8457c:	464f      	mov	r7, r9
   8457e:	2610      	movs	r6, #16
   84580:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84584:	e006      	b.n	84594 <_vfiprintf_r+0x424>
   84586:	1c88      	adds	r0, r1, #2
   84588:	4619      	mov	r1, r3
   8458a:	f10b 0b08 	add.w	fp, fp, #8
   8458e:	3c10      	subs	r4, #16
   84590:	2c10      	cmp	r4, #16
   84592:	dd13      	ble.n	845bc <_vfiprintf_r+0x44c>
   84594:	1c4b      	adds	r3, r1, #1
   84596:	3210      	adds	r2, #16
   84598:	2b07      	cmp	r3, #7
   8459a:	920f      	str	r2, [sp, #60]	; 0x3c
   8459c:	f8cb 7000 	str.w	r7, [fp]
   845a0:	f8cb 6004 	str.w	r6, [fp, #4]
   845a4:	930e      	str	r3, [sp, #56]	; 0x38
   845a6:	ddee      	ble.n	84586 <_vfiprintf_r+0x416>
   845a8:	2a00      	cmp	r2, #0
   845aa:	f040 8285 	bne.w	84ab8 <_vfiprintf_r+0x948>
   845ae:	3c10      	subs	r4, #16
   845b0:	2c10      	cmp	r4, #16
   845b2:	f04f 0001 	mov.w	r0, #1
   845b6:	4611      	mov	r1, r2
   845b8:	46d3      	mov	fp, sl
   845ba:	dceb      	bgt.n	84594 <_vfiprintf_r+0x424>
   845bc:	46b9      	mov	r9, r7
   845be:	4422      	add	r2, r4
   845c0:	2807      	cmp	r0, #7
   845c2:	920f      	str	r2, [sp, #60]	; 0x3c
   845c4:	f8cb 9000 	str.w	r9, [fp]
   845c8:	f8cb 4004 	str.w	r4, [fp, #4]
   845cc:	900e      	str	r0, [sp, #56]	; 0x38
   845ce:	f340 8292 	ble.w	84af6 <_vfiprintf_r+0x986>
   845d2:	2a00      	cmp	r2, #0
   845d4:	f040 840c 	bne.w	84df0 <_vfiprintf_r+0xc80>
   845d8:	9b02      	ldr	r3, [sp, #8]
   845da:	9a06      	ldr	r2, [sp, #24]
   845dc:	42aa      	cmp	r2, r5
   845de:	bfac      	ite	ge
   845e0:	189b      	addge	r3, r3, r2
   845e2:	195b      	addlt	r3, r3, r5
   845e4:	9302      	str	r3, [sp, #8]
   845e6:	e290      	b.n	84b0a <_vfiprintf_r+0x99a>
   845e8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   845ec:	f898 3000 	ldrb.w	r3, [r8]
   845f0:	e625      	b.n	8423e <_vfiprintf_r+0xce>
   845f2:	9406      	str	r4, [sp, #24]
   845f4:	2900      	cmp	r1, #0
   845f6:	f040 8485 	bne.w	84f04 <_vfiprintf_r+0xd94>
   845fa:	f046 0610 	orr.w	r6, r6, #16
   845fe:	06b3      	lsls	r3, r6, #26
   84600:	f140 8304 	bpl.w	84c0c <_vfiprintf_r+0xa9c>
   84604:	9904      	ldr	r1, [sp, #16]
   84606:	3107      	adds	r1, #7
   84608:	f021 0107 	bic.w	r1, r1, #7
   8460c:	e9d1 2300 	ldrd	r2, r3, [r1]
   84610:	4614      	mov	r4, r2
   84612:	461d      	mov	r5, r3
   84614:	3108      	adds	r1, #8
   84616:	9104      	str	r1, [sp, #16]
   84618:	2a00      	cmp	r2, #0
   8461a:	f173 0300 	sbcs.w	r3, r3, #0
   8461e:	f2c0 837c 	blt.w	84d1a <_vfiprintf_r+0xbaa>
   84622:	9b01      	ldr	r3, [sp, #4]
   84624:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84628:	2b00      	cmp	r3, #0
   8462a:	f2c0 830b 	blt.w	84c44 <_vfiprintf_r+0xad4>
   8462e:	ea54 0305 	orrs.w	r3, r4, r5
   84632:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84636:	f000 80de 	beq.w	847f6 <_vfiprintf_r+0x686>
   8463a:	2d00      	cmp	r5, #0
   8463c:	bf08      	it	eq
   8463e:	2c0a      	cmpeq	r4, #10
   84640:	f0c0 80de 	bcc.w	84800 <_vfiprintf_r+0x690>
   84644:	4657      	mov	r7, sl
   84646:	4620      	mov	r0, r4
   84648:	4629      	mov	r1, r5
   8464a:	220a      	movs	r2, #10
   8464c:	2300      	movs	r3, #0
   8464e:	f002 f9f3 	bl	86a38 <__aeabi_uldivmod>
   84652:	3230      	adds	r2, #48	; 0x30
   84654:	f807 2d01 	strb.w	r2, [r7, #-1]!
   84658:	4620      	mov	r0, r4
   8465a:	4629      	mov	r1, r5
   8465c:	2300      	movs	r3, #0
   8465e:	220a      	movs	r2, #10
   84660:	f002 f9ea 	bl	86a38 <__aeabi_uldivmod>
   84664:	4604      	mov	r4, r0
   84666:	460d      	mov	r5, r1
   84668:	ea54 0305 	orrs.w	r3, r4, r5
   8466c:	d1eb      	bne.n	84646 <_vfiprintf_r+0x4d6>
   8466e:	ebc7 030a 	rsb	r3, r7, sl
   84672:	9303      	str	r3, [sp, #12]
   84674:	e6a2      	b.n	843bc <_vfiprintf_r+0x24c>
   84676:	bf00      	nop
   84678:	00086e14 	.word	0x00086e14
   8467c:	00086e30 	.word	0x00086e30
   84680:	00086df0 	.word	0x00086df0
   84684:	9406      	str	r4, [sp, #24]
   84686:	2900      	cmp	r1, #0
   84688:	f040 8438 	bne.w	84efc <_vfiprintf_r+0xd8c>
   8468c:	f046 0610 	orr.w	r6, r6, #16
   84690:	f016 0320 	ands.w	r3, r6, #32
   84694:	f000 82a1 	beq.w	84bda <_vfiprintf_r+0xa6a>
   84698:	f04f 0200 	mov.w	r2, #0
   8469c:	9b04      	ldr	r3, [sp, #16]
   8469e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   846a2:	3307      	adds	r3, #7
   846a4:	f023 0307 	bic.w	r3, r3, #7
   846a8:	f103 0208 	add.w	r2, r3, #8
   846ac:	e9d3 4500 	ldrd	r4, r5, [r3]
   846b0:	9b01      	ldr	r3, [sp, #4]
   846b2:	9204      	str	r2, [sp, #16]
   846b4:	2b00      	cmp	r3, #0
   846b6:	db0a      	blt.n	846ce <_vfiprintf_r+0x55e>
   846b8:	ea54 0305 	orrs.w	r3, r4, r5
   846bc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   846c0:	d105      	bne.n	846ce <_vfiprintf_r+0x55e>
   846c2:	9b01      	ldr	r3, [sp, #4]
   846c4:	2b00      	cmp	r3, #0
   846c6:	f000 8427 	beq.w	84f18 <_vfiprintf_r+0xda8>
   846ca:	2400      	movs	r4, #0
   846cc:	2500      	movs	r5, #0
   846ce:	f04f 0900 	mov.w	r9, #0
   846d2:	4657      	mov	r7, sl
   846d4:	08e2      	lsrs	r2, r4, #3
   846d6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   846da:	08e9      	lsrs	r1, r5, #3
   846dc:	f004 0307 	and.w	r3, r4, #7
   846e0:	460d      	mov	r5, r1
   846e2:	4614      	mov	r4, r2
   846e4:	3330      	adds	r3, #48	; 0x30
   846e6:	ea54 0205 	orrs.w	r2, r4, r5
   846ea:	f807 3d01 	strb.w	r3, [r7, #-1]!
   846ee:	d1f1      	bne.n	846d4 <_vfiprintf_r+0x564>
   846f0:	07f4      	lsls	r4, r6, #31
   846f2:	d5bc      	bpl.n	8466e <_vfiprintf_r+0x4fe>
   846f4:	2b30      	cmp	r3, #48	; 0x30
   846f6:	d0ba      	beq.n	8466e <_vfiprintf_r+0x4fe>
   846f8:	2230      	movs	r2, #48	; 0x30
   846fa:	1e7b      	subs	r3, r7, #1
   846fc:	f807 2c01 	strb.w	r2, [r7, #-1]
   84700:	ebc3 020a 	rsb	r2, r3, sl
   84704:	9203      	str	r2, [sp, #12]
   84706:	461f      	mov	r7, r3
   84708:	e658      	b.n	843bc <_vfiprintf_r+0x24c>
   8470a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8470e:	2400      	movs	r4, #0
   84710:	f818 3b01 	ldrb.w	r3, [r8], #1
   84714:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84718:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   8471c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84720:	2a09      	cmp	r2, #9
   84722:	d9f5      	bls.n	84710 <_vfiprintf_r+0x5a0>
   84724:	e58d      	b.n	84242 <_vfiprintf_r+0xd2>
   84726:	f898 3000 	ldrb.w	r3, [r8]
   8472a:	2101      	movs	r1, #1
   8472c:	202b      	movs	r0, #43	; 0x2b
   8472e:	e586      	b.n	8423e <_vfiprintf_r+0xce>
   84730:	f898 3000 	ldrb.w	r3, [r8]
   84734:	f108 0501 	add.w	r5, r8, #1
   84738:	2b2a      	cmp	r3, #42	; 0x2a
   8473a:	f000 83cc 	beq.w	84ed6 <_vfiprintf_r+0xd66>
   8473e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84742:	2a09      	cmp	r2, #9
   84744:	46a8      	mov	r8, r5
   84746:	bf98      	it	ls
   84748:	2500      	movls	r5, #0
   8474a:	f200 83b5 	bhi.w	84eb8 <_vfiprintf_r+0xd48>
   8474e:	f818 3b01 	ldrb.w	r3, [r8], #1
   84752:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84756:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   8475a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8475e:	2a09      	cmp	r2, #9
   84760:	d9f5      	bls.n	8474e <_vfiprintf_r+0x5de>
   84762:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   84766:	9201      	str	r2, [sp, #4]
   84768:	e56b      	b.n	84242 <_vfiprintf_r+0xd2>
   8476a:	9406      	str	r4, [sp, #24]
   8476c:	2900      	cmp	r1, #0
   8476e:	d08f      	beq.n	84690 <_vfiprintf_r+0x520>
   84770:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84774:	e78c      	b.n	84690 <_vfiprintf_r+0x520>
   84776:	f04f 0300 	mov.w	r3, #0
   8477a:	9a04      	ldr	r2, [sp, #16]
   8477c:	9406      	str	r4, [sp, #24]
   8477e:	6817      	ldr	r7, [r2, #0]
   84780:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84784:	1d14      	adds	r4, r2, #4
   84786:	9b01      	ldr	r3, [sp, #4]
   84788:	2f00      	cmp	r7, #0
   8478a:	f000 837f 	beq.w	84e8c <_vfiprintf_r+0xd1c>
   8478e:	2b00      	cmp	r3, #0
   84790:	f2c0 8353 	blt.w	84e3a <_vfiprintf_r+0xcca>
   84794:	461a      	mov	r2, r3
   84796:	2100      	movs	r1, #0
   84798:	4638      	mov	r0, r7
   8479a:	f001 fc4d 	bl	86038 <memchr>
   8479e:	2800      	cmp	r0, #0
   847a0:	f000 838e 	beq.w	84ec0 <_vfiprintf_r+0xd50>
   847a4:	1bc3      	subs	r3, r0, r7
   847a6:	9303      	str	r3, [sp, #12]
   847a8:	2300      	movs	r3, #0
   847aa:	9404      	str	r4, [sp, #16]
   847ac:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   847b0:	9301      	str	r3, [sp, #4]
   847b2:	e603      	b.n	843bc <_vfiprintf_r+0x24c>
   847b4:	9406      	str	r4, [sp, #24]
   847b6:	2900      	cmp	r1, #0
   847b8:	f040 839d 	bne.w	84ef6 <_vfiprintf_r+0xd86>
   847bc:	f016 0920 	ands.w	r9, r6, #32
   847c0:	d134      	bne.n	8482c <_vfiprintf_r+0x6bc>
   847c2:	f016 0310 	ands.w	r3, r6, #16
   847c6:	d103      	bne.n	847d0 <_vfiprintf_r+0x660>
   847c8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   847cc:	f040 831f 	bne.w	84e0e <_vfiprintf_r+0xc9e>
   847d0:	9a04      	ldr	r2, [sp, #16]
   847d2:	2500      	movs	r5, #0
   847d4:	4613      	mov	r3, r2
   847d6:	6814      	ldr	r4, [r2, #0]
   847d8:	9a01      	ldr	r2, [sp, #4]
   847da:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   847de:	2a00      	cmp	r2, #0
   847e0:	f103 0304 	add.w	r3, r3, #4
   847e4:	f2c0 8327 	blt.w	84e36 <_vfiprintf_r+0xcc6>
   847e8:	ea54 0205 	orrs.w	r2, r4, r5
   847ec:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   847f0:	9304      	str	r3, [sp, #16]
   847f2:	f47f af22 	bne.w	8463a <_vfiprintf_r+0x4ca>
   847f6:	9b01      	ldr	r3, [sp, #4]
   847f8:	2b00      	cmp	r3, #0
   847fa:	f43f addb 	beq.w	843b4 <_vfiprintf_r+0x244>
   847fe:	2400      	movs	r4, #0
   84800:	af2a      	add	r7, sp, #168	; 0xa8
   84802:	3430      	adds	r4, #48	; 0x30
   84804:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84808:	ebc7 030a 	rsb	r3, r7, sl
   8480c:	9303      	str	r3, [sp, #12]
   8480e:	e5d5      	b.n	843bc <_vfiprintf_r+0x24c>
   84810:	f046 0620 	orr.w	r6, r6, #32
   84814:	f898 3000 	ldrb.w	r3, [r8]
   84818:	e511      	b.n	8423e <_vfiprintf_r+0xce>
   8481a:	9406      	str	r4, [sp, #24]
   8481c:	2900      	cmp	r1, #0
   8481e:	f040 8375 	bne.w	84f0c <_vfiprintf_r+0xd9c>
   84822:	f046 0610 	orr.w	r6, r6, #16
   84826:	f016 0920 	ands.w	r9, r6, #32
   8482a:	d0ca      	beq.n	847c2 <_vfiprintf_r+0x652>
   8482c:	f04f 0200 	mov.w	r2, #0
   84830:	9b04      	ldr	r3, [sp, #16]
   84832:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84836:	3307      	adds	r3, #7
   84838:	f023 0307 	bic.w	r3, r3, #7
   8483c:	f103 0208 	add.w	r2, r3, #8
   84840:	e9d3 4500 	ldrd	r4, r5, [r3]
   84844:	9b01      	ldr	r3, [sp, #4]
   84846:	9204      	str	r2, [sp, #16]
   84848:	2b00      	cmp	r3, #0
   8484a:	f2c0 81f9 	blt.w	84c40 <_vfiprintf_r+0xad0>
   8484e:	ea54 0305 	orrs.w	r3, r4, r5
   84852:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84856:	f04f 0900 	mov.w	r9, #0
   8485a:	f47f aeee 	bne.w	8463a <_vfiprintf_r+0x4ca>
   8485e:	e7ca      	b.n	847f6 <_vfiprintf_r+0x686>
   84860:	9406      	str	r4, [sp, #24]
   84862:	2900      	cmp	r1, #0
   84864:	f040 8355 	bne.w	84f12 <_vfiprintf_r+0xda2>
   84868:	06b2      	lsls	r2, r6, #26
   8486a:	48b2      	ldr	r0, [pc, #712]	; (84b34 <_vfiprintf_r+0x9c4>)
   8486c:	d541      	bpl.n	848f2 <_vfiprintf_r+0x782>
   8486e:	9a04      	ldr	r2, [sp, #16]
   84870:	3207      	adds	r2, #7
   84872:	f022 0207 	bic.w	r2, r2, #7
   84876:	f102 0108 	add.w	r1, r2, #8
   8487a:	9104      	str	r1, [sp, #16]
   8487c:	e9d2 4500 	ldrd	r4, r5, [r2]
   84880:	f016 0901 	ands.w	r9, r6, #1
   84884:	f000 817e 	beq.w	84b84 <_vfiprintf_r+0xa14>
   84888:	ea54 0205 	orrs.w	r2, r4, r5
   8488c:	f040 822b 	bne.w	84ce6 <_vfiprintf_r+0xb76>
   84890:	f04f 0300 	mov.w	r3, #0
   84894:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84898:	9b01      	ldr	r3, [sp, #4]
   8489a:	2b00      	cmp	r3, #0
   8489c:	f2c0 82f3 	blt.w	84e86 <_vfiprintf_r+0xd16>
   848a0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   848a4:	e581      	b.n	843aa <_vfiprintf_r+0x23a>
   848a6:	9a04      	ldr	r2, [sp, #16]
   848a8:	f04f 0100 	mov.w	r1, #0
   848ac:	6813      	ldr	r3, [r2, #0]
   848ae:	2501      	movs	r5, #1
   848b0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   848b4:	4613      	mov	r3, r2
   848b6:	3304      	adds	r3, #4
   848b8:	9406      	str	r4, [sp, #24]
   848ba:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   848be:	9304      	str	r3, [sp, #16]
   848c0:	9503      	str	r5, [sp, #12]
   848c2:	af10      	add	r7, sp, #64	; 0x40
   848c4:	2300      	movs	r3, #0
   848c6:	9301      	str	r3, [sp, #4]
   848c8:	e582      	b.n	843d0 <_vfiprintf_r+0x260>
   848ca:	f898 3000 	ldrb.w	r3, [r8]
   848ce:	2800      	cmp	r0, #0
   848d0:	f47f acb5 	bne.w	8423e <_vfiprintf_r+0xce>
   848d4:	2101      	movs	r1, #1
   848d6:	2020      	movs	r0, #32
   848d8:	e4b1      	b.n	8423e <_vfiprintf_r+0xce>
   848da:	f046 0601 	orr.w	r6, r6, #1
   848de:	f898 3000 	ldrb.w	r3, [r8]
   848e2:	e4ac      	b.n	8423e <_vfiprintf_r+0xce>
   848e4:	9406      	str	r4, [sp, #24]
   848e6:	2900      	cmp	r1, #0
   848e8:	f040 832a 	bne.w	84f40 <_vfiprintf_r+0xdd0>
   848ec:	06b2      	lsls	r2, r6, #26
   848ee:	4892      	ldr	r0, [pc, #584]	; (84b38 <_vfiprintf_r+0x9c8>)
   848f0:	d4bd      	bmi.n	8486e <_vfiprintf_r+0x6fe>
   848f2:	9904      	ldr	r1, [sp, #16]
   848f4:	06f7      	lsls	r7, r6, #27
   848f6:	460a      	mov	r2, r1
   848f8:	f100 819d 	bmi.w	84c36 <_vfiprintf_r+0xac6>
   848fc:	0675      	lsls	r5, r6, #25
   848fe:	f140 819a 	bpl.w	84c36 <_vfiprintf_r+0xac6>
   84902:	3204      	adds	r2, #4
   84904:	880c      	ldrh	r4, [r1, #0]
   84906:	9204      	str	r2, [sp, #16]
   84908:	2500      	movs	r5, #0
   8490a:	e7b9      	b.n	84880 <_vfiprintf_r+0x710>
   8490c:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   84910:	f898 3000 	ldrb.w	r3, [r8]
   84914:	e493      	b.n	8423e <_vfiprintf_r+0xce>
   84916:	f898 3000 	ldrb.w	r3, [r8]
   8491a:	2b6c      	cmp	r3, #108	; 0x6c
   8491c:	bf03      	ittte	eq
   8491e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   84922:	f046 0620 	orreq.w	r6, r6, #32
   84926:	f108 0801 	addeq.w	r8, r8, #1
   8492a:	f046 0610 	orrne.w	r6, r6, #16
   8492e:	e486      	b.n	8423e <_vfiprintf_r+0xce>
   84930:	2900      	cmp	r1, #0
   84932:	f040 8302 	bne.w	84f3a <_vfiprintf_r+0xdca>
   84936:	06b4      	lsls	r4, r6, #26
   84938:	f140 8220 	bpl.w	84d7c <_vfiprintf_r+0xc0c>
   8493c:	9a04      	ldr	r2, [sp, #16]
   8493e:	4613      	mov	r3, r2
   84940:	3304      	adds	r3, #4
   84942:	9304      	str	r3, [sp, #16]
   84944:	9b02      	ldr	r3, [sp, #8]
   84946:	6811      	ldr	r1, [r2, #0]
   84948:	17dd      	asrs	r5, r3, #31
   8494a:	461a      	mov	r2, r3
   8494c:	462b      	mov	r3, r5
   8494e:	e9c1 2300 	strd	r2, r3, [r1]
   84952:	e43e      	b.n	841d2 <_vfiprintf_r+0x62>
   84954:	9406      	str	r4, [sp, #24]
   84956:	2900      	cmp	r1, #0
   84958:	f43f ae51 	beq.w	845fe <_vfiprintf_r+0x48e>
   8495c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84960:	e64d      	b.n	845fe <_vfiprintf_r+0x48e>
   84962:	9406      	str	r4, [sp, #24]
   84964:	2900      	cmp	r1, #0
   84966:	f040 82e5 	bne.w	84f34 <_vfiprintf_r+0xdc4>
   8496a:	2b00      	cmp	r3, #0
   8496c:	f000 8094 	beq.w	84a98 <_vfiprintf_r+0x928>
   84970:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84974:	f04f 0300 	mov.w	r3, #0
   84978:	2501      	movs	r5, #1
   8497a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8497e:	9503      	str	r5, [sp, #12]
   84980:	af10      	add	r7, sp, #64	; 0x40
   84982:	e79f      	b.n	848c4 <_vfiprintf_r+0x754>
   84984:	aa0d      	add	r2, sp, #52	; 0x34
   84986:	9900      	ldr	r1, [sp, #0]
   84988:	4648      	mov	r0, r9
   8498a:	9309      	str	r3, [sp, #36]	; 0x24
   8498c:	f7ff fbb4 	bl	840f8 <__sprint_r.part.0>
   84990:	2800      	cmp	r0, #0
   84992:	f040 8088 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84996:	980e      	ldr	r0, [sp, #56]	; 0x38
   84998:	46d4      	mov	ip, sl
   8499a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8499c:	f100 0e01 	add.w	lr, r0, #1
   849a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   849a2:	e53a      	b.n	8441a <_vfiprintf_r+0x2aa>
   849a4:	aa0d      	add	r2, sp, #52	; 0x34
   849a6:	9900      	ldr	r1, [sp, #0]
   849a8:	9805      	ldr	r0, [sp, #20]
   849aa:	f7ff fba5 	bl	840f8 <__sprint_r.part.0>
   849ae:	2800      	cmp	r0, #0
   849b0:	d179      	bne.n	84aa6 <_vfiprintf_r+0x936>
   849b2:	46d3      	mov	fp, sl
   849b4:	980e      	ldr	r0, [sp, #56]	; 0x38
   849b6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   849ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   849bc:	f100 0e01 	add.w	lr, r0, #1
   849c0:	2b00      	cmp	r3, #0
   849c2:	f43f ad59 	beq.w	84478 <_vfiprintf_r+0x308>
   849c6:	3201      	adds	r2, #1
   849c8:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   849cc:	2301      	movs	r3, #1
   849ce:	f1be 0f07 	cmp.w	lr, #7
   849d2:	920f      	str	r2, [sp, #60]	; 0x3c
   849d4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   849d8:	e88b 000a 	stmia.w	fp, {r1, r3}
   849dc:	f340 80c0 	ble.w	84b60 <_vfiprintf_r+0x9f0>
   849e0:	2a00      	cmp	r2, #0
   849e2:	f040 814d 	bne.w	84c80 <_vfiprintf_r+0xb10>
   849e6:	9907      	ldr	r1, [sp, #28]
   849e8:	2900      	cmp	r1, #0
   849ea:	f040 80bf 	bne.w	84b6c <_vfiprintf_r+0x9fc>
   849ee:	469e      	mov	lr, r3
   849f0:	4610      	mov	r0, r2
   849f2:	46d3      	mov	fp, sl
   849f4:	9b08      	ldr	r3, [sp, #32]
   849f6:	2b80      	cmp	r3, #128	; 0x80
   849f8:	f43f ad59 	beq.w	844ae <_vfiprintf_r+0x33e>
   849fc:	9b01      	ldr	r3, [sp, #4]
   849fe:	9903      	ldr	r1, [sp, #12]
   84a00:	1a5c      	subs	r4, r3, r1
   84a02:	2c00      	cmp	r4, #0
   84a04:	f77f ad9c 	ble.w	84540 <_vfiprintf_r+0x3d0>
   84a08:	2c10      	cmp	r4, #16
   84a0a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 84b3c <_vfiprintf_r+0x9cc>
   84a0e:	dd25      	ble.n	84a5c <_vfiprintf_r+0x8ec>
   84a10:	46dc      	mov	ip, fp
   84a12:	2310      	movs	r3, #16
   84a14:	46c3      	mov	fp, r8
   84a16:	46a8      	mov	r8, r5
   84a18:	464d      	mov	r5, r9
   84a1a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84a1e:	e007      	b.n	84a30 <_vfiprintf_r+0x8c0>
   84a20:	f100 0e02 	add.w	lr, r0, #2
   84a24:	4608      	mov	r0, r1
   84a26:	f10c 0c08 	add.w	ip, ip, #8
   84a2a:	3c10      	subs	r4, #16
   84a2c:	2c10      	cmp	r4, #16
   84a2e:	dd11      	ble.n	84a54 <_vfiprintf_r+0x8e4>
   84a30:	1c41      	adds	r1, r0, #1
   84a32:	3210      	adds	r2, #16
   84a34:	2907      	cmp	r1, #7
   84a36:	920f      	str	r2, [sp, #60]	; 0x3c
   84a38:	f8cc 5000 	str.w	r5, [ip]
   84a3c:	f8cc 3004 	str.w	r3, [ip, #4]
   84a40:	910e      	str	r1, [sp, #56]	; 0x38
   84a42:	dded      	ble.n	84a20 <_vfiprintf_r+0x8b0>
   84a44:	b9d2      	cbnz	r2, 84a7c <_vfiprintf_r+0x90c>
   84a46:	3c10      	subs	r4, #16
   84a48:	2c10      	cmp	r4, #16
   84a4a:	f04f 0e01 	mov.w	lr, #1
   84a4e:	4610      	mov	r0, r2
   84a50:	46d4      	mov	ip, sl
   84a52:	dced      	bgt.n	84a30 <_vfiprintf_r+0x8c0>
   84a54:	46a9      	mov	r9, r5
   84a56:	4645      	mov	r5, r8
   84a58:	46d8      	mov	r8, fp
   84a5a:	46e3      	mov	fp, ip
   84a5c:	4422      	add	r2, r4
   84a5e:	f1be 0f07 	cmp.w	lr, #7
   84a62:	920f      	str	r2, [sp, #60]	; 0x3c
   84a64:	f8cb 9000 	str.w	r9, [fp]
   84a68:	f8cb 4004 	str.w	r4, [fp, #4]
   84a6c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84a70:	dc2e      	bgt.n	84ad0 <_vfiprintf_r+0x960>
   84a72:	f10b 0b08 	add.w	fp, fp, #8
   84a76:	f10e 0e01 	add.w	lr, lr, #1
   84a7a:	e561      	b.n	84540 <_vfiprintf_r+0x3d0>
   84a7c:	aa0d      	add	r2, sp, #52	; 0x34
   84a7e:	9900      	ldr	r1, [sp, #0]
   84a80:	4648      	mov	r0, r9
   84a82:	9301      	str	r3, [sp, #4]
   84a84:	f7ff fb38 	bl	840f8 <__sprint_r.part.0>
   84a88:	b968      	cbnz	r0, 84aa6 <_vfiprintf_r+0x936>
   84a8a:	980e      	ldr	r0, [sp, #56]	; 0x38
   84a8c:	46d4      	mov	ip, sl
   84a8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84a90:	f100 0e01 	add.w	lr, r0, #1
   84a94:	9b01      	ldr	r3, [sp, #4]
   84a96:	e7c8      	b.n	84a2a <_vfiprintf_r+0x8ba>
   84a98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84a9a:	b123      	cbz	r3, 84aa6 <_vfiprintf_r+0x936>
   84a9c:	9805      	ldr	r0, [sp, #20]
   84a9e:	aa0d      	add	r2, sp, #52	; 0x34
   84aa0:	9900      	ldr	r1, [sp, #0]
   84aa2:	f7ff fb29 	bl	840f8 <__sprint_r.part.0>
   84aa6:	9b00      	ldr	r3, [sp, #0]
   84aa8:	899b      	ldrh	r3, [r3, #12]
   84aaa:	065a      	lsls	r2, r3, #25
   84aac:	f100 817b 	bmi.w	84da6 <_vfiprintf_r+0xc36>
   84ab0:	9802      	ldr	r0, [sp, #8]
   84ab2:	b02b      	add	sp, #172	; 0xac
   84ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ab8:	aa0d      	add	r2, sp, #52	; 0x34
   84aba:	9900      	ldr	r1, [sp, #0]
   84abc:	4648      	mov	r0, r9
   84abe:	f7ff fb1b 	bl	840f8 <__sprint_r.part.0>
   84ac2:	2800      	cmp	r0, #0
   84ac4:	d1ef      	bne.n	84aa6 <_vfiprintf_r+0x936>
   84ac6:	990e      	ldr	r1, [sp, #56]	; 0x38
   84ac8:	46d3      	mov	fp, sl
   84aca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84acc:	1c48      	adds	r0, r1, #1
   84ace:	e55e      	b.n	8458e <_vfiprintf_r+0x41e>
   84ad0:	2a00      	cmp	r2, #0
   84ad2:	f040 80fa 	bne.w	84cca <_vfiprintf_r+0xb5a>
   84ad6:	46d3      	mov	fp, sl
   84ad8:	9a03      	ldr	r2, [sp, #12]
   84ada:	2301      	movs	r3, #1
   84adc:	921b      	str	r2, [sp, #108]	; 0x6c
   84ade:	920f      	str	r2, [sp, #60]	; 0x3c
   84ae0:	971a      	str	r7, [sp, #104]	; 0x68
   84ae2:	930e      	str	r3, [sp, #56]	; 0x38
   84ae4:	f10b 0b08 	add.w	fp, fp, #8
   84ae8:	0771      	lsls	r1, r6, #29
   84aea:	d504      	bpl.n	84af6 <_vfiprintf_r+0x986>
   84aec:	9b06      	ldr	r3, [sp, #24]
   84aee:	1b5c      	subs	r4, r3, r5
   84af0:	2c00      	cmp	r4, #0
   84af2:	f73f ad3d 	bgt.w	84570 <_vfiprintf_r+0x400>
   84af6:	9b02      	ldr	r3, [sp, #8]
   84af8:	9906      	ldr	r1, [sp, #24]
   84afa:	42a9      	cmp	r1, r5
   84afc:	bfac      	ite	ge
   84afe:	185b      	addge	r3, r3, r1
   84b00:	195b      	addlt	r3, r3, r5
   84b02:	9302      	str	r3, [sp, #8]
   84b04:	2a00      	cmp	r2, #0
   84b06:	f040 80ad 	bne.w	84c64 <_vfiprintf_r+0xaf4>
   84b0a:	2300      	movs	r3, #0
   84b0c:	930e      	str	r3, [sp, #56]	; 0x38
   84b0e:	46d3      	mov	fp, sl
   84b10:	f7ff bb5f 	b.w	841d2 <_vfiprintf_r+0x62>
   84b14:	aa0d      	add	r2, sp, #52	; 0x34
   84b16:	9900      	ldr	r1, [sp, #0]
   84b18:	4648      	mov	r0, r9
   84b1a:	9307      	str	r3, [sp, #28]
   84b1c:	f7ff faec 	bl	840f8 <__sprint_r.part.0>
   84b20:	2800      	cmp	r0, #0
   84b22:	d1c0      	bne.n	84aa6 <_vfiprintf_r+0x936>
   84b24:	980e      	ldr	r0, [sp, #56]	; 0x38
   84b26:	46d6      	mov	lr, sl
   84b28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84b2a:	f100 0c01 	add.w	ip, r0, #1
   84b2e:	9b07      	ldr	r3, [sp, #28]
   84b30:	e4d4      	b.n	844dc <_vfiprintf_r+0x36c>
   84b32:	bf00      	nop
   84b34:	00086e00 	.word	0x00086e00
   84b38:	00086e14 	.word	0x00086e14
   84b3c:	00086df0 	.word	0x00086df0
   84b40:	2a00      	cmp	r2, #0
   84b42:	f47f af2f 	bne.w	849a4 <_vfiprintf_r+0x834>
   84b46:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84b4a:	2b00      	cmp	r3, #0
   84b4c:	f000 80f3 	beq.w	84d36 <_vfiprintf_r+0xbc6>
   84b50:	2301      	movs	r3, #1
   84b52:	461a      	mov	r2, r3
   84b54:	469e      	mov	lr, r3
   84b56:	46d3      	mov	fp, sl
   84b58:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84b5c:	931b      	str	r3, [sp, #108]	; 0x6c
   84b5e:	911a      	str	r1, [sp, #104]	; 0x68
   84b60:	4670      	mov	r0, lr
   84b62:	f10b 0b08 	add.w	fp, fp, #8
   84b66:	f10e 0e01 	add.w	lr, lr, #1
   84b6a:	e485      	b.n	84478 <_vfiprintf_r+0x308>
   84b6c:	469e      	mov	lr, r3
   84b6e:	46d3      	mov	fp, sl
   84b70:	a90c      	add	r1, sp, #48	; 0x30
   84b72:	2202      	movs	r2, #2
   84b74:	911a      	str	r1, [sp, #104]	; 0x68
   84b76:	921b      	str	r2, [sp, #108]	; 0x6c
   84b78:	4670      	mov	r0, lr
   84b7a:	f10b 0b08 	add.w	fp, fp, #8
   84b7e:	f10e 0e01 	add.w	lr, lr, #1
   84b82:	e737      	b.n	849f4 <_vfiprintf_r+0x884>
   84b84:	9b01      	ldr	r3, [sp, #4]
   84b86:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84b8a:	2b00      	cmp	r3, #0
   84b8c:	f2c0 811b 	blt.w	84dc6 <_vfiprintf_r+0xc56>
   84b90:	ea54 0305 	orrs.w	r3, r4, r5
   84b94:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84b98:	f43f ac07 	beq.w	843aa <_vfiprintf_r+0x23a>
   84b9c:	4657      	mov	r7, sl
   84b9e:	0923      	lsrs	r3, r4, #4
   84ba0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   84ba4:	0929      	lsrs	r1, r5, #4
   84ba6:	f004 020f 	and.w	r2, r4, #15
   84baa:	460d      	mov	r5, r1
   84bac:	461c      	mov	r4, r3
   84bae:	5c83      	ldrb	r3, [r0, r2]
   84bb0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84bb4:	ea54 0305 	orrs.w	r3, r4, r5
   84bb8:	d1f1      	bne.n	84b9e <_vfiprintf_r+0xa2e>
   84bba:	ebc7 030a 	rsb	r3, r7, sl
   84bbe:	9303      	str	r3, [sp, #12]
   84bc0:	f7ff bbfc 	b.w	843bc <_vfiprintf_r+0x24c>
   84bc4:	aa0d      	add	r2, sp, #52	; 0x34
   84bc6:	9900      	ldr	r1, [sp, #0]
   84bc8:	9805      	ldr	r0, [sp, #20]
   84bca:	f7ff fa95 	bl	840f8 <__sprint_r.part.0>
   84bce:	2800      	cmp	r0, #0
   84bd0:	f47f af69 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84bd4:	46d3      	mov	fp, sl
   84bd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84bd8:	e786      	b.n	84ae8 <_vfiprintf_r+0x978>
   84bda:	f016 0210 	ands.w	r2, r6, #16
   84bde:	f000 80b5 	beq.w	84d4c <_vfiprintf_r+0xbdc>
   84be2:	9904      	ldr	r1, [sp, #16]
   84be4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84be8:	460a      	mov	r2, r1
   84bea:	680c      	ldr	r4, [r1, #0]
   84bec:	9901      	ldr	r1, [sp, #4]
   84bee:	3204      	adds	r2, #4
   84bf0:	2900      	cmp	r1, #0
   84bf2:	f04f 0500 	mov.w	r5, #0
   84bf6:	f2c0 8152 	blt.w	84e9e <_vfiprintf_r+0xd2e>
   84bfa:	ea54 0105 	orrs.w	r1, r4, r5
   84bfe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84c02:	9204      	str	r2, [sp, #16]
   84c04:	f43f ad5d 	beq.w	846c2 <_vfiprintf_r+0x552>
   84c08:	4699      	mov	r9, r3
   84c0a:	e562      	b.n	846d2 <_vfiprintf_r+0x562>
   84c0c:	9a04      	ldr	r2, [sp, #16]
   84c0e:	06f7      	lsls	r7, r6, #27
   84c10:	4613      	mov	r3, r2
   84c12:	d409      	bmi.n	84c28 <_vfiprintf_r+0xab8>
   84c14:	0675      	lsls	r5, r6, #25
   84c16:	d507      	bpl.n	84c28 <_vfiprintf_r+0xab8>
   84c18:	f9b2 4000 	ldrsh.w	r4, [r2]
   84c1c:	3304      	adds	r3, #4
   84c1e:	17e5      	asrs	r5, r4, #31
   84c20:	9304      	str	r3, [sp, #16]
   84c22:	4622      	mov	r2, r4
   84c24:	462b      	mov	r3, r5
   84c26:	e4f7      	b.n	84618 <_vfiprintf_r+0x4a8>
   84c28:	681c      	ldr	r4, [r3, #0]
   84c2a:	3304      	adds	r3, #4
   84c2c:	17e5      	asrs	r5, r4, #31
   84c2e:	9304      	str	r3, [sp, #16]
   84c30:	4622      	mov	r2, r4
   84c32:	462b      	mov	r3, r5
   84c34:	e4f0      	b.n	84618 <_vfiprintf_r+0x4a8>
   84c36:	6814      	ldr	r4, [r2, #0]
   84c38:	3204      	adds	r2, #4
   84c3a:	9204      	str	r2, [sp, #16]
   84c3c:	2500      	movs	r5, #0
   84c3e:	e61f      	b.n	84880 <_vfiprintf_r+0x710>
   84c40:	f04f 0900 	mov.w	r9, #0
   84c44:	ea54 0305 	orrs.w	r3, r4, r5
   84c48:	f47f acf7 	bne.w	8463a <_vfiprintf_r+0x4ca>
   84c4c:	e5d8      	b.n	84800 <_vfiprintf_r+0x690>
   84c4e:	aa0d      	add	r2, sp, #52	; 0x34
   84c50:	9900      	ldr	r1, [sp, #0]
   84c52:	9805      	ldr	r0, [sp, #20]
   84c54:	f7ff fa50 	bl	840f8 <__sprint_r.part.0>
   84c58:	2800      	cmp	r0, #0
   84c5a:	f47f af24 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84c5e:	46d3      	mov	fp, sl
   84c60:	f7ff bb51 	b.w	84306 <_vfiprintf_r+0x196>
   84c64:	aa0d      	add	r2, sp, #52	; 0x34
   84c66:	9900      	ldr	r1, [sp, #0]
   84c68:	9805      	ldr	r0, [sp, #20]
   84c6a:	f7ff fa45 	bl	840f8 <__sprint_r.part.0>
   84c6e:	2800      	cmp	r0, #0
   84c70:	f43f af4b 	beq.w	84b0a <_vfiprintf_r+0x99a>
   84c74:	e717      	b.n	84aa6 <_vfiprintf_r+0x936>
   84c76:	2400      	movs	r4, #0
   84c78:	2500      	movs	r5, #0
   84c7a:	f04f 0900 	mov.w	r9, #0
   84c7e:	e78d      	b.n	84b9c <_vfiprintf_r+0xa2c>
   84c80:	aa0d      	add	r2, sp, #52	; 0x34
   84c82:	9900      	ldr	r1, [sp, #0]
   84c84:	9805      	ldr	r0, [sp, #20]
   84c86:	f7ff fa37 	bl	840f8 <__sprint_r.part.0>
   84c8a:	2800      	cmp	r0, #0
   84c8c:	f47f af0b 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84c90:	980e      	ldr	r0, [sp, #56]	; 0x38
   84c92:	46d3      	mov	fp, sl
   84c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84c96:	f100 0e01 	add.w	lr, r0, #1
   84c9a:	f7ff bbed 	b.w	84478 <_vfiprintf_r+0x308>
   84c9e:	aa0d      	add	r2, sp, #52	; 0x34
   84ca0:	9900      	ldr	r1, [sp, #0]
   84ca2:	9805      	ldr	r0, [sp, #20]
   84ca4:	f7ff fa28 	bl	840f8 <__sprint_r.part.0>
   84ca8:	2800      	cmp	r0, #0
   84caa:	f47f aefc 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84cae:	980e      	ldr	r0, [sp, #56]	; 0x38
   84cb0:	46d3      	mov	fp, sl
   84cb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84cb4:	f100 0e01 	add.w	lr, r0, #1
   84cb8:	e69c      	b.n	849f4 <_vfiprintf_r+0x884>
   84cba:	2a00      	cmp	r2, #0
   84cbc:	f040 80c8 	bne.w	84e50 <_vfiprintf_r+0xce0>
   84cc0:	f04f 0e01 	mov.w	lr, #1
   84cc4:	4610      	mov	r0, r2
   84cc6:	46d3      	mov	fp, sl
   84cc8:	e698      	b.n	849fc <_vfiprintf_r+0x88c>
   84cca:	aa0d      	add	r2, sp, #52	; 0x34
   84ccc:	9900      	ldr	r1, [sp, #0]
   84cce:	9805      	ldr	r0, [sp, #20]
   84cd0:	f7ff fa12 	bl	840f8 <__sprint_r.part.0>
   84cd4:	2800      	cmp	r0, #0
   84cd6:	f47f aee6 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84cda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84cdc:	46d3      	mov	fp, sl
   84cde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84ce0:	f103 0e01 	add.w	lr, r3, #1
   84ce4:	e42c      	b.n	84540 <_vfiprintf_r+0x3d0>
   84ce6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   84cea:	f04f 0300 	mov.w	r3, #0
   84cee:	2230      	movs	r2, #48	; 0x30
   84cf0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84cf4:	9a01      	ldr	r2, [sp, #4]
   84cf6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84cfa:	2a00      	cmp	r2, #0
   84cfc:	f046 0302 	orr.w	r3, r6, #2
   84d00:	f2c0 80bb 	blt.w	84e7a <_vfiprintf_r+0xd0a>
   84d04:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84d08:	f046 0602 	orr.w	r6, r6, #2
   84d0c:	f04f 0900 	mov.w	r9, #0
   84d10:	e744      	b.n	84b9c <_vfiprintf_r+0xa2c>
   84d12:	f04f 0900 	mov.w	r9, #0
   84d16:	488c      	ldr	r0, [pc, #560]	; (84f48 <_vfiprintf_r+0xdd8>)
   84d18:	e740      	b.n	84b9c <_vfiprintf_r+0xa2c>
   84d1a:	9b01      	ldr	r3, [sp, #4]
   84d1c:	4264      	negs	r4, r4
   84d1e:	f04f 092d 	mov.w	r9, #45	; 0x2d
   84d22:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   84d26:	2b00      	cmp	r3, #0
   84d28:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84d2c:	f6ff ac85 	blt.w	8463a <_vfiprintf_r+0x4ca>
   84d30:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84d34:	e481      	b.n	8463a <_vfiprintf_r+0x4ca>
   84d36:	9b07      	ldr	r3, [sp, #28]
   84d38:	2b00      	cmp	r3, #0
   84d3a:	d063      	beq.n	84e04 <_vfiprintf_r+0xc94>
   84d3c:	ab0c      	add	r3, sp, #48	; 0x30
   84d3e:	2202      	movs	r2, #2
   84d40:	931a      	str	r3, [sp, #104]	; 0x68
   84d42:	921b      	str	r2, [sp, #108]	; 0x6c
   84d44:	f04f 0e01 	mov.w	lr, #1
   84d48:	46d3      	mov	fp, sl
   84d4a:	e715      	b.n	84b78 <_vfiprintf_r+0xa08>
   84d4c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84d50:	d03b      	beq.n	84dca <_vfiprintf_r+0xc5a>
   84d52:	9904      	ldr	r1, [sp, #16]
   84d54:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84d58:	460b      	mov	r3, r1
   84d5a:	880c      	ldrh	r4, [r1, #0]
   84d5c:	9901      	ldr	r1, [sp, #4]
   84d5e:	3304      	adds	r3, #4
   84d60:	2900      	cmp	r1, #0
   84d62:	f04f 0500 	mov.w	r5, #0
   84d66:	f2c0 808c 	blt.w	84e82 <_vfiprintf_r+0xd12>
   84d6a:	ea54 0105 	orrs.w	r1, r4, r5
   84d6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84d72:	9304      	str	r3, [sp, #16]
   84d74:	f43f aca5 	beq.w	846c2 <_vfiprintf_r+0x552>
   84d78:	4691      	mov	r9, r2
   84d7a:	e4aa      	b.n	846d2 <_vfiprintf_r+0x562>
   84d7c:	06f0      	lsls	r0, r6, #27
   84d7e:	d40a      	bmi.n	84d96 <_vfiprintf_r+0xc26>
   84d80:	0671      	lsls	r1, r6, #25
   84d82:	d508      	bpl.n	84d96 <_vfiprintf_r+0xc26>
   84d84:	9a04      	ldr	r2, [sp, #16]
   84d86:	6813      	ldr	r3, [r2, #0]
   84d88:	3204      	adds	r2, #4
   84d8a:	9204      	str	r2, [sp, #16]
   84d8c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   84d90:	801a      	strh	r2, [r3, #0]
   84d92:	f7ff ba1e 	b.w	841d2 <_vfiprintf_r+0x62>
   84d96:	9a04      	ldr	r2, [sp, #16]
   84d98:	6813      	ldr	r3, [r2, #0]
   84d9a:	3204      	adds	r2, #4
   84d9c:	9204      	str	r2, [sp, #16]
   84d9e:	9a02      	ldr	r2, [sp, #8]
   84da0:	601a      	str	r2, [r3, #0]
   84da2:	f7ff ba16 	b.w	841d2 <_vfiprintf_r+0x62>
   84da6:	f04f 30ff 	mov.w	r0, #4294967295
   84daa:	f7ff bac9 	b.w	84340 <_vfiprintf_r+0x1d0>
   84dae:	4616      	mov	r6, r2
   84db0:	4865      	ldr	r0, [pc, #404]	; (84f48 <_vfiprintf_r+0xdd8>)
   84db2:	ea54 0205 	orrs.w	r2, r4, r5
   84db6:	9304      	str	r3, [sp, #16]
   84db8:	f04f 0900 	mov.w	r9, #0
   84dbc:	f47f aeee 	bne.w	84b9c <_vfiprintf_r+0xa2c>
   84dc0:	2400      	movs	r4, #0
   84dc2:	2500      	movs	r5, #0
   84dc4:	e6ea      	b.n	84b9c <_vfiprintf_r+0xa2c>
   84dc6:	9b04      	ldr	r3, [sp, #16]
   84dc8:	e7f3      	b.n	84db2 <_vfiprintf_r+0xc42>
   84dca:	9a04      	ldr	r2, [sp, #16]
   84dcc:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84dd0:	4613      	mov	r3, r2
   84dd2:	6814      	ldr	r4, [r2, #0]
   84dd4:	9a01      	ldr	r2, [sp, #4]
   84dd6:	3304      	adds	r3, #4
   84dd8:	2a00      	cmp	r2, #0
   84dda:	f04f 0500 	mov.w	r5, #0
   84dde:	db50      	blt.n	84e82 <_vfiprintf_r+0xd12>
   84de0:	ea54 0205 	orrs.w	r2, r4, r5
   84de4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84de8:	9304      	str	r3, [sp, #16]
   84dea:	f47f ac72 	bne.w	846d2 <_vfiprintf_r+0x562>
   84dee:	e468      	b.n	846c2 <_vfiprintf_r+0x552>
   84df0:	aa0d      	add	r2, sp, #52	; 0x34
   84df2:	9900      	ldr	r1, [sp, #0]
   84df4:	9805      	ldr	r0, [sp, #20]
   84df6:	f7ff f97f 	bl	840f8 <__sprint_r.part.0>
   84dfa:	2800      	cmp	r0, #0
   84dfc:	f47f ae53 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84e02:	e678      	b.n	84af6 <_vfiprintf_r+0x986>
   84e04:	4610      	mov	r0, r2
   84e06:	f04f 0e01 	mov.w	lr, #1
   84e0a:	46d3      	mov	fp, sl
   84e0c:	e5f6      	b.n	849fc <_vfiprintf_r+0x88c>
   84e0e:	9904      	ldr	r1, [sp, #16]
   84e10:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84e14:	460a      	mov	r2, r1
   84e16:	880c      	ldrh	r4, [r1, #0]
   84e18:	9901      	ldr	r1, [sp, #4]
   84e1a:	3204      	adds	r2, #4
   84e1c:	2900      	cmp	r1, #0
   84e1e:	f04f 0500 	mov.w	r5, #0
   84e22:	db55      	blt.n	84ed0 <_vfiprintf_r+0xd60>
   84e24:	ea54 0105 	orrs.w	r1, r4, r5
   84e28:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84e2c:	9204      	str	r2, [sp, #16]
   84e2e:	4699      	mov	r9, r3
   84e30:	f47f ac03 	bne.w	8463a <_vfiprintf_r+0x4ca>
   84e34:	e4df      	b.n	847f6 <_vfiprintf_r+0x686>
   84e36:	9304      	str	r3, [sp, #16]
   84e38:	e704      	b.n	84c44 <_vfiprintf_r+0xad4>
   84e3a:	4638      	mov	r0, r7
   84e3c:	9404      	str	r4, [sp, #16]
   84e3e:	f7ff f92d 	bl	8409c <strlen>
   84e42:	2300      	movs	r3, #0
   84e44:	9003      	str	r0, [sp, #12]
   84e46:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84e4a:	9301      	str	r3, [sp, #4]
   84e4c:	f7ff bab6 	b.w	843bc <_vfiprintf_r+0x24c>
   84e50:	aa0d      	add	r2, sp, #52	; 0x34
   84e52:	9900      	ldr	r1, [sp, #0]
   84e54:	9805      	ldr	r0, [sp, #20]
   84e56:	f7ff f94f 	bl	840f8 <__sprint_r.part.0>
   84e5a:	2800      	cmp	r0, #0
   84e5c:	f47f ae23 	bne.w	84aa6 <_vfiprintf_r+0x936>
   84e60:	980e      	ldr	r0, [sp, #56]	; 0x38
   84e62:	46d3      	mov	fp, sl
   84e64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84e66:	f100 0e01 	add.w	lr, r0, #1
   84e6a:	e5c7      	b.n	849fc <_vfiprintf_r+0x88c>
   84e6c:	980e      	ldr	r0, [sp, #56]	; 0x38
   84e6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84e70:	3001      	adds	r0, #1
   84e72:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 84f50 <_vfiprintf_r+0xde0>
   84e76:	f7ff baec 	b.w	84452 <_vfiprintf_r+0x2e2>
   84e7a:	461e      	mov	r6, r3
   84e7c:	f04f 0900 	mov.w	r9, #0
   84e80:	e68c      	b.n	84b9c <_vfiprintf_r+0xa2c>
   84e82:	9304      	str	r3, [sp, #16]
   84e84:	e423      	b.n	846ce <_vfiprintf_r+0x55e>
   84e86:	f04f 0900 	mov.w	r9, #0
   84e8a:	e799      	b.n	84dc0 <_vfiprintf_r+0xc50>
   84e8c:	2b06      	cmp	r3, #6
   84e8e:	bf28      	it	cs
   84e90:	2306      	movcs	r3, #6
   84e92:	9303      	str	r3, [sp, #12]
   84e94:	9404      	str	r4, [sp, #16]
   84e96:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   84e9a:	4f2c      	ldr	r7, [pc, #176]	; (84f4c <_vfiprintf_r+0xddc>)
   84e9c:	e512      	b.n	848c4 <_vfiprintf_r+0x754>
   84e9e:	9204      	str	r2, [sp, #16]
   84ea0:	e415      	b.n	846ce <_vfiprintf_r+0x55e>
   84ea2:	980e      	ldr	r0, [sp, #56]	; 0x38
   84ea4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 84f50 <_vfiprintf_r+0xde0>
   84ea8:	3001      	adds	r0, #1
   84eaa:	f7ff bb88 	b.w	845be <_vfiprintf_r+0x44e>
   84eae:	46f4      	mov	ip, lr
   84eb0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 84f54 <_vfiprintf_r+0xde4>
   84eb4:	f7ff bb2d 	b.w	84512 <_vfiprintf_r+0x3a2>
   84eb8:	2200      	movs	r2, #0
   84eba:	9201      	str	r2, [sp, #4]
   84ebc:	f7ff b9c1 	b.w	84242 <_vfiprintf_r+0xd2>
   84ec0:	9b01      	ldr	r3, [sp, #4]
   84ec2:	9404      	str	r4, [sp, #16]
   84ec4:	9303      	str	r3, [sp, #12]
   84ec6:	9001      	str	r0, [sp, #4]
   84ec8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84ecc:	f7ff ba76 	b.w	843bc <_vfiprintf_r+0x24c>
   84ed0:	9204      	str	r2, [sp, #16]
   84ed2:	4699      	mov	r9, r3
   84ed4:	e6b6      	b.n	84c44 <_vfiprintf_r+0xad4>
   84ed6:	9a04      	ldr	r2, [sp, #16]
   84ed8:	6813      	ldr	r3, [r2, #0]
   84eda:	3204      	adds	r2, #4
   84edc:	2b00      	cmp	r3, #0
   84ede:	9301      	str	r3, [sp, #4]
   84ee0:	9204      	str	r2, [sp, #16]
   84ee2:	f898 3001 	ldrb.w	r3, [r8, #1]
   84ee6:	46a8      	mov	r8, r5
   84ee8:	f6bf a9a9 	bge.w	8423e <_vfiprintf_r+0xce>
   84eec:	f04f 32ff 	mov.w	r2, #4294967295
   84ef0:	9201      	str	r2, [sp, #4]
   84ef2:	f7ff b9a4 	b.w	8423e <_vfiprintf_r+0xce>
   84ef6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84efa:	e45f      	b.n	847bc <_vfiprintf_r+0x64c>
   84efc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f00:	f7ff bbc4 	b.w	8468c <_vfiprintf_r+0x51c>
   84f04:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f08:	f7ff bb77 	b.w	845fa <_vfiprintf_r+0x48a>
   84f0c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f10:	e487      	b.n	84822 <_vfiprintf_r+0x6b2>
   84f12:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f16:	e4a7      	b.n	84868 <_vfiprintf_r+0x6f8>
   84f18:	4699      	mov	r9, r3
   84f1a:	07f3      	lsls	r3, r6, #31
   84f1c:	d505      	bpl.n	84f2a <_vfiprintf_r+0xdba>
   84f1e:	af2a      	add	r7, sp, #168	; 0xa8
   84f20:	2330      	movs	r3, #48	; 0x30
   84f22:	f807 3d41 	strb.w	r3, [r7, #-65]!
   84f26:	f7ff bba2 	b.w	8466e <_vfiprintf_r+0x4fe>
   84f2a:	9b01      	ldr	r3, [sp, #4]
   84f2c:	4657      	mov	r7, sl
   84f2e:	9303      	str	r3, [sp, #12]
   84f30:	f7ff ba44 	b.w	843bc <_vfiprintf_r+0x24c>
   84f34:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f38:	e517      	b.n	8496a <_vfiprintf_r+0x7fa>
   84f3a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f3e:	e4fa      	b.n	84936 <_vfiprintf_r+0x7c6>
   84f40:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f44:	e4d2      	b.n	848ec <_vfiprintf_r+0x77c>
   84f46:	bf00      	nop
   84f48:	00086e14 	.word	0x00086e14
   84f4c:	00086e28 	.word	0x00086e28
   84f50:	00086e30 	.word	0x00086e30
   84f54:	00086df0 	.word	0x00086df0

00084f58 <__sbprintf>:
   84f58:	b5f0      	push	{r4, r5, r6, r7, lr}
   84f5a:	460c      	mov	r4, r1
   84f5c:	8989      	ldrh	r1, [r1, #12]
   84f5e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   84f62:	6e65      	ldr	r5, [r4, #100]	; 0x64
   84f64:	f021 0102 	bic.w	r1, r1, #2
   84f68:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84f6a:	f8ad 100c 	strh.w	r1, [sp, #12]
   84f6e:	69e1      	ldr	r1, [r4, #28]
   84f70:	89e7      	ldrh	r7, [r4, #14]
   84f72:	9519      	str	r5, [sp, #100]	; 0x64
   84f74:	2500      	movs	r5, #0
   84f76:	9107      	str	r1, [sp, #28]
   84f78:	9609      	str	r6, [sp, #36]	; 0x24
   84f7a:	9506      	str	r5, [sp, #24]
   84f7c:	ae1a      	add	r6, sp, #104	; 0x68
   84f7e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84f82:	4669      	mov	r1, sp
   84f84:	9600      	str	r6, [sp, #0]
   84f86:	9604      	str	r6, [sp, #16]
   84f88:	9502      	str	r5, [sp, #8]
   84f8a:	9505      	str	r5, [sp, #20]
   84f8c:	f8ad 700e 	strh.w	r7, [sp, #14]
   84f90:	4606      	mov	r6, r0
   84f92:	f7ff f8ed 	bl	84170 <_vfiprintf_r>
   84f96:	1e05      	subs	r5, r0, #0
   84f98:	db07      	blt.n	84faa <__sbprintf+0x52>
   84f9a:	4630      	mov	r0, r6
   84f9c:	4669      	mov	r1, sp
   84f9e:	f000 f929 	bl	851f4 <_fflush_r>
   84fa2:	2800      	cmp	r0, #0
   84fa4:	bf18      	it	ne
   84fa6:	f04f 35ff 	movne.w	r5, #4294967295
   84faa:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84fae:	065b      	lsls	r3, r3, #25
   84fb0:	d503      	bpl.n	84fba <__sbprintf+0x62>
   84fb2:	89a3      	ldrh	r3, [r4, #12]
   84fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84fb8:	81a3      	strh	r3, [r4, #12]
   84fba:	4628      	mov	r0, r5
   84fbc:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   84fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84fc2:	bf00      	nop

00084fc4 <__swsetup_r>:
   84fc4:	b538      	push	{r3, r4, r5, lr}
   84fc6:	4b30      	ldr	r3, [pc, #192]	; (85088 <__swsetup_r+0xc4>)
   84fc8:	4605      	mov	r5, r0
   84fca:	6818      	ldr	r0, [r3, #0]
   84fcc:	460c      	mov	r4, r1
   84fce:	b110      	cbz	r0, 84fd6 <__swsetup_r+0x12>
   84fd0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84fd2:	2b00      	cmp	r3, #0
   84fd4:	d038      	beq.n	85048 <__swsetup_r+0x84>
   84fd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84fda:	b293      	uxth	r3, r2
   84fdc:	0718      	lsls	r0, r3, #28
   84fde:	d50c      	bpl.n	84ffa <__swsetup_r+0x36>
   84fe0:	6920      	ldr	r0, [r4, #16]
   84fe2:	b1a8      	cbz	r0, 85010 <__swsetup_r+0x4c>
   84fe4:	f013 0201 	ands.w	r2, r3, #1
   84fe8:	d01e      	beq.n	85028 <__swsetup_r+0x64>
   84fea:	6963      	ldr	r3, [r4, #20]
   84fec:	2200      	movs	r2, #0
   84fee:	425b      	negs	r3, r3
   84ff0:	61a3      	str	r3, [r4, #24]
   84ff2:	60a2      	str	r2, [r4, #8]
   84ff4:	b1f0      	cbz	r0, 85034 <__swsetup_r+0x70>
   84ff6:	2000      	movs	r0, #0
   84ff8:	bd38      	pop	{r3, r4, r5, pc}
   84ffa:	06d9      	lsls	r1, r3, #27
   84ffc:	d53b      	bpl.n	85076 <__swsetup_r+0xb2>
   84ffe:	0758      	lsls	r0, r3, #29
   85000:	d425      	bmi.n	8504e <__swsetup_r+0x8a>
   85002:	6920      	ldr	r0, [r4, #16]
   85004:	f042 0308 	orr.w	r3, r2, #8
   85008:	81a3      	strh	r3, [r4, #12]
   8500a:	b29b      	uxth	r3, r3
   8500c:	2800      	cmp	r0, #0
   8500e:	d1e9      	bne.n	84fe4 <__swsetup_r+0x20>
   85010:	f403 7220 	and.w	r2, r3, #640	; 0x280
   85014:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85018:	d0e4      	beq.n	84fe4 <__swsetup_r+0x20>
   8501a:	4628      	mov	r0, r5
   8501c:	4621      	mov	r1, r4
   8501e:	f000 fd13 	bl	85a48 <__smakebuf_r>
   85022:	89a3      	ldrh	r3, [r4, #12]
   85024:	6920      	ldr	r0, [r4, #16]
   85026:	e7dd      	b.n	84fe4 <__swsetup_r+0x20>
   85028:	0799      	lsls	r1, r3, #30
   8502a:	bf58      	it	pl
   8502c:	6962      	ldrpl	r2, [r4, #20]
   8502e:	60a2      	str	r2, [r4, #8]
   85030:	2800      	cmp	r0, #0
   85032:	d1e0      	bne.n	84ff6 <__swsetup_r+0x32>
   85034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85038:	061a      	lsls	r2, r3, #24
   8503a:	d5dd      	bpl.n	84ff8 <__swsetup_r+0x34>
   8503c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85040:	81a3      	strh	r3, [r4, #12]
   85042:	f04f 30ff 	mov.w	r0, #4294967295
   85046:	bd38      	pop	{r3, r4, r5, pc}
   85048:	f000 f968 	bl	8531c <__sinit>
   8504c:	e7c3      	b.n	84fd6 <__swsetup_r+0x12>
   8504e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85050:	b151      	cbz	r1, 85068 <__swsetup_r+0xa4>
   85052:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85056:	4299      	cmp	r1, r3
   85058:	d004      	beq.n	85064 <__swsetup_r+0xa0>
   8505a:	4628      	mov	r0, r5
   8505c:	f000 fa26 	bl	854ac <_free_r>
   85060:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85064:	2300      	movs	r3, #0
   85066:	6323      	str	r3, [r4, #48]	; 0x30
   85068:	6920      	ldr	r0, [r4, #16]
   8506a:	2300      	movs	r3, #0
   8506c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85070:	e884 0009 	stmia.w	r4, {r0, r3}
   85074:	e7c6      	b.n	85004 <__swsetup_r+0x40>
   85076:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8507a:	2309      	movs	r3, #9
   8507c:	602b      	str	r3, [r5, #0]
   8507e:	f04f 30ff 	mov.w	r0, #4294967295
   85082:	81a2      	strh	r2, [r4, #12]
   85084:	bd38      	pop	{r3, r4, r5, pc}
   85086:	bf00      	nop
   85088:	20070830 	.word	0x20070830

0008508c <register_fini>:
   8508c:	4b02      	ldr	r3, [pc, #8]	; (85098 <register_fini+0xc>)
   8508e:	b113      	cbz	r3, 85096 <register_fini+0xa>
   85090:	4802      	ldr	r0, [pc, #8]	; (8509c <register_fini+0x10>)
   85092:	f000 b805 	b.w	850a0 <atexit>
   85096:	4770      	bx	lr
   85098:	00000000 	.word	0x00000000
   8509c:	00085331 	.word	0x00085331

000850a0 <atexit>:
   850a0:	2300      	movs	r3, #0
   850a2:	4601      	mov	r1, r0
   850a4:	461a      	mov	r2, r3
   850a6:	4618      	mov	r0, r3
   850a8:	f001 bbce 	b.w	86848 <__register_exitproc>

000850ac <__sflush_r>:
   850ac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   850b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   850b4:	b29a      	uxth	r2, r3
   850b6:	460d      	mov	r5, r1
   850b8:	0711      	lsls	r1, r2, #28
   850ba:	4680      	mov	r8, r0
   850bc:	d43c      	bmi.n	85138 <__sflush_r+0x8c>
   850be:	686a      	ldr	r2, [r5, #4]
   850c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   850c4:	2a00      	cmp	r2, #0
   850c6:	81ab      	strh	r3, [r5, #12]
   850c8:	dd73      	ble.n	851b2 <__sflush_r+0x106>
   850ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
   850cc:	2c00      	cmp	r4, #0
   850ce:	d04b      	beq.n	85168 <__sflush_r+0xbc>
   850d0:	b29b      	uxth	r3, r3
   850d2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   850d6:	2100      	movs	r1, #0
   850d8:	b292      	uxth	r2, r2
   850da:	f8d8 6000 	ldr.w	r6, [r8]
   850de:	f8c8 1000 	str.w	r1, [r8]
   850e2:	2a00      	cmp	r2, #0
   850e4:	d069      	beq.n	851ba <__sflush_r+0x10e>
   850e6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   850e8:	075f      	lsls	r7, r3, #29
   850ea:	d505      	bpl.n	850f8 <__sflush_r+0x4c>
   850ec:	6869      	ldr	r1, [r5, #4]
   850ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   850f0:	1a52      	subs	r2, r2, r1
   850f2:	b10b      	cbz	r3, 850f8 <__sflush_r+0x4c>
   850f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   850f6:	1ad2      	subs	r2, r2, r3
   850f8:	2300      	movs	r3, #0
   850fa:	69e9      	ldr	r1, [r5, #28]
   850fc:	4640      	mov	r0, r8
   850fe:	47a0      	blx	r4
   85100:	1c44      	adds	r4, r0, #1
   85102:	d03c      	beq.n	8517e <__sflush_r+0xd2>
   85104:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85108:	6929      	ldr	r1, [r5, #16]
   8510a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8510e:	2200      	movs	r2, #0
   85110:	81ab      	strh	r3, [r5, #12]
   85112:	04db      	lsls	r3, r3, #19
   85114:	e885 0006 	stmia.w	r5, {r1, r2}
   85118:	d449      	bmi.n	851ae <__sflush_r+0x102>
   8511a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8511c:	f8c8 6000 	str.w	r6, [r8]
   85120:	b311      	cbz	r1, 85168 <__sflush_r+0xbc>
   85122:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85126:	4299      	cmp	r1, r3
   85128:	d002      	beq.n	85130 <__sflush_r+0x84>
   8512a:	4640      	mov	r0, r8
   8512c:	f000 f9be 	bl	854ac <_free_r>
   85130:	2000      	movs	r0, #0
   85132:	6328      	str	r0, [r5, #48]	; 0x30
   85134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85138:	692e      	ldr	r6, [r5, #16]
   8513a:	b1ae      	cbz	r6, 85168 <__sflush_r+0xbc>
   8513c:	0790      	lsls	r0, r2, #30
   8513e:	682c      	ldr	r4, [r5, #0]
   85140:	bf0c      	ite	eq
   85142:	696b      	ldreq	r3, [r5, #20]
   85144:	2300      	movne	r3, #0
   85146:	602e      	str	r6, [r5, #0]
   85148:	1ba4      	subs	r4, r4, r6
   8514a:	60ab      	str	r3, [r5, #8]
   8514c:	e00a      	b.n	85164 <__sflush_r+0xb8>
   8514e:	4623      	mov	r3, r4
   85150:	4632      	mov	r2, r6
   85152:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85154:	69e9      	ldr	r1, [r5, #28]
   85156:	4640      	mov	r0, r8
   85158:	47b8      	blx	r7
   8515a:	2800      	cmp	r0, #0
   8515c:	eba4 0400 	sub.w	r4, r4, r0
   85160:	4406      	add	r6, r0
   85162:	dd04      	ble.n	8516e <__sflush_r+0xc2>
   85164:	2c00      	cmp	r4, #0
   85166:	dcf2      	bgt.n	8514e <__sflush_r+0xa2>
   85168:	2000      	movs	r0, #0
   8516a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8516e:	89ab      	ldrh	r3, [r5, #12]
   85170:	f04f 30ff 	mov.w	r0, #4294967295
   85174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85178:	81ab      	strh	r3, [r5, #12]
   8517a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8517e:	f8d8 2000 	ldr.w	r2, [r8]
   85182:	2a1d      	cmp	r2, #29
   85184:	d8f3      	bhi.n	8516e <__sflush_r+0xc2>
   85186:	4b1a      	ldr	r3, [pc, #104]	; (851f0 <__sflush_r+0x144>)
   85188:	40d3      	lsrs	r3, r2
   8518a:	f003 0301 	and.w	r3, r3, #1
   8518e:	f083 0401 	eor.w	r4, r3, #1
   85192:	2b00      	cmp	r3, #0
   85194:	d0eb      	beq.n	8516e <__sflush_r+0xc2>
   85196:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8519a:	6929      	ldr	r1, [r5, #16]
   8519c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   851a0:	6029      	str	r1, [r5, #0]
   851a2:	04d9      	lsls	r1, r3, #19
   851a4:	606c      	str	r4, [r5, #4]
   851a6:	81ab      	strh	r3, [r5, #12]
   851a8:	d5b7      	bpl.n	8511a <__sflush_r+0x6e>
   851aa:	2a00      	cmp	r2, #0
   851ac:	d1b5      	bne.n	8511a <__sflush_r+0x6e>
   851ae:	6528      	str	r0, [r5, #80]	; 0x50
   851b0:	e7b3      	b.n	8511a <__sflush_r+0x6e>
   851b2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   851b4:	2a00      	cmp	r2, #0
   851b6:	dc88      	bgt.n	850ca <__sflush_r+0x1e>
   851b8:	e7d6      	b.n	85168 <__sflush_r+0xbc>
   851ba:	2301      	movs	r3, #1
   851bc:	69e9      	ldr	r1, [r5, #28]
   851be:	4640      	mov	r0, r8
   851c0:	47a0      	blx	r4
   851c2:	1c43      	adds	r3, r0, #1
   851c4:	4602      	mov	r2, r0
   851c6:	d002      	beq.n	851ce <__sflush_r+0x122>
   851c8:	89ab      	ldrh	r3, [r5, #12]
   851ca:	6aac      	ldr	r4, [r5, #40]	; 0x28
   851cc:	e78c      	b.n	850e8 <__sflush_r+0x3c>
   851ce:	f8d8 3000 	ldr.w	r3, [r8]
   851d2:	2b00      	cmp	r3, #0
   851d4:	d0f8      	beq.n	851c8 <__sflush_r+0x11c>
   851d6:	2b1d      	cmp	r3, #29
   851d8:	d001      	beq.n	851de <__sflush_r+0x132>
   851da:	2b16      	cmp	r3, #22
   851dc:	d102      	bne.n	851e4 <__sflush_r+0x138>
   851de:	f8c8 6000 	str.w	r6, [r8]
   851e2:	e7c1      	b.n	85168 <__sflush_r+0xbc>
   851e4:	89ab      	ldrh	r3, [r5, #12]
   851e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   851ea:	81ab      	strh	r3, [r5, #12]
   851ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   851f0:	20400001 	.word	0x20400001

000851f4 <_fflush_r>:
   851f4:	b510      	push	{r4, lr}
   851f6:	4604      	mov	r4, r0
   851f8:	b082      	sub	sp, #8
   851fa:	b108      	cbz	r0, 85200 <_fflush_r+0xc>
   851fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   851fe:	b153      	cbz	r3, 85216 <_fflush_r+0x22>
   85200:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   85204:	b908      	cbnz	r0, 8520a <_fflush_r+0x16>
   85206:	b002      	add	sp, #8
   85208:	bd10      	pop	{r4, pc}
   8520a:	4620      	mov	r0, r4
   8520c:	b002      	add	sp, #8
   8520e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85212:	f7ff bf4b 	b.w	850ac <__sflush_r>
   85216:	9101      	str	r1, [sp, #4]
   85218:	f000 f880 	bl	8531c <__sinit>
   8521c:	9901      	ldr	r1, [sp, #4]
   8521e:	e7ef      	b.n	85200 <_fflush_r+0xc>

00085220 <_cleanup_r>:
   85220:	4901      	ldr	r1, [pc, #4]	; (85228 <_cleanup_r+0x8>)
   85222:	f000 bbaf 	b.w	85984 <_fwalk_reent>
   85226:	bf00      	nop
   85228:	00086911 	.word	0x00086911

0008522c <__sinit.part.1>:
   8522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85230:	4607      	mov	r7, r0
   85232:	4835      	ldr	r0, [pc, #212]	; (85308 <__sinit.part.1+0xdc>)
   85234:	687d      	ldr	r5, [r7, #4]
   85236:	2400      	movs	r4, #0
   85238:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8523c:	2304      	movs	r3, #4
   8523e:	2103      	movs	r1, #3
   85240:	63f8      	str	r0, [r7, #60]	; 0x3c
   85242:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85246:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8524a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8524e:	b083      	sub	sp, #12
   85250:	602c      	str	r4, [r5, #0]
   85252:	606c      	str	r4, [r5, #4]
   85254:	60ac      	str	r4, [r5, #8]
   85256:	666c      	str	r4, [r5, #100]	; 0x64
   85258:	81ec      	strh	r4, [r5, #14]
   8525a:	612c      	str	r4, [r5, #16]
   8525c:	616c      	str	r4, [r5, #20]
   8525e:	61ac      	str	r4, [r5, #24]
   85260:	81ab      	strh	r3, [r5, #12]
   85262:	4621      	mov	r1, r4
   85264:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85268:	2208      	movs	r2, #8
   8526a:	f7fe fe19 	bl	83ea0 <memset>
   8526e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8530c <__sinit.part.1+0xe0>
   85272:	68be      	ldr	r6, [r7, #8]
   85274:	f8df a098 	ldr.w	sl, [pc, #152]	; 85310 <__sinit.part.1+0xe4>
   85278:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85314 <__sinit.part.1+0xe8>
   8527c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85318 <__sinit.part.1+0xec>
   85280:	2301      	movs	r3, #1
   85282:	2209      	movs	r2, #9
   85284:	f8c5 b020 	str.w	fp, [r5, #32]
   85288:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   8528c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85290:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85294:	61ed      	str	r5, [r5, #28]
   85296:	4621      	mov	r1, r4
   85298:	81f3      	strh	r3, [r6, #14]
   8529a:	81b2      	strh	r2, [r6, #12]
   8529c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   852a0:	6034      	str	r4, [r6, #0]
   852a2:	6074      	str	r4, [r6, #4]
   852a4:	60b4      	str	r4, [r6, #8]
   852a6:	6674      	str	r4, [r6, #100]	; 0x64
   852a8:	6134      	str	r4, [r6, #16]
   852aa:	6174      	str	r4, [r6, #20]
   852ac:	61b4      	str	r4, [r6, #24]
   852ae:	2208      	movs	r2, #8
   852b0:	9301      	str	r3, [sp, #4]
   852b2:	f7fe fdf5 	bl	83ea0 <memset>
   852b6:	68fd      	ldr	r5, [r7, #12]
   852b8:	2012      	movs	r0, #18
   852ba:	2202      	movs	r2, #2
   852bc:	61f6      	str	r6, [r6, #28]
   852be:	f8c6 b020 	str.w	fp, [r6, #32]
   852c2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   852c6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   852ca:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   852ce:	4621      	mov	r1, r4
   852d0:	81a8      	strh	r0, [r5, #12]
   852d2:	81ea      	strh	r2, [r5, #14]
   852d4:	602c      	str	r4, [r5, #0]
   852d6:	606c      	str	r4, [r5, #4]
   852d8:	60ac      	str	r4, [r5, #8]
   852da:	666c      	str	r4, [r5, #100]	; 0x64
   852dc:	612c      	str	r4, [r5, #16]
   852de:	616c      	str	r4, [r5, #20]
   852e0:	61ac      	str	r4, [r5, #24]
   852e2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   852e6:	2208      	movs	r2, #8
   852e8:	f7fe fdda 	bl	83ea0 <memset>
   852ec:	9b01      	ldr	r3, [sp, #4]
   852ee:	61ed      	str	r5, [r5, #28]
   852f0:	f8c5 b020 	str.w	fp, [r5, #32]
   852f4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   852f8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   852fc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85300:	63bb      	str	r3, [r7, #56]	; 0x38
   85302:	b003      	add	sp, #12
   85304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85308:	00085221 	.word	0x00085221
   8530c:	00086679 	.word	0x00086679
   85310:	0008669d 	.word	0x0008669d
   85314:	000866d9 	.word	0x000866d9
   85318:	000866f9 	.word	0x000866f9

0008531c <__sinit>:
   8531c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8531e:	b103      	cbz	r3, 85322 <__sinit+0x6>
   85320:	4770      	bx	lr
   85322:	f7ff bf83 	b.w	8522c <__sinit.part.1>
   85326:	bf00      	nop

00085328 <__sfp_lock_acquire>:
   85328:	4770      	bx	lr
   8532a:	bf00      	nop

0008532c <__sfp_lock_release>:
   8532c:	4770      	bx	lr
   8532e:	bf00      	nop

00085330 <__libc_fini_array>:
   85330:	b538      	push	{r3, r4, r5, lr}
   85332:	4d07      	ldr	r5, [pc, #28]	; (85350 <__libc_fini_array+0x20>)
   85334:	4c07      	ldr	r4, [pc, #28]	; (85354 <__libc_fini_array+0x24>)
   85336:	1b2c      	subs	r4, r5, r4
   85338:	10a4      	asrs	r4, r4, #2
   8533a:	d005      	beq.n	85348 <__libc_fini_array+0x18>
   8533c:	3c01      	subs	r4, #1
   8533e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85342:	4798      	blx	r3
   85344:	2c00      	cmp	r4, #0
   85346:	d1f9      	bne.n	8533c <__libc_fini_array+0xc>
   85348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8534c:	f001 bd82 	b.w	86e54 <_fini>
   85350:	00086e64 	.word	0x00086e64
   85354:	00086e60 	.word	0x00086e60

00085358 <__fputwc>:
   85358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8535c:	b082      	sub	sp, #8
   8535e:	4606      	mov	r6, r0
   85360:	460f      	mov	r7, r1
   85362:	4614      	mov	r4, r2
   85364:	f000 fb3a 	bl	859dc <__locale_mb_cur_max>
   85368:	2801      	cmp	r0, #1
   8536a:	d032      	beq.n	853d2 <__fputwc+0x7a>
   8536c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85370:	463a      	mov	r2, r7
   85372:	a901      	add	r1, sp, #4
   85374:	4630      	mov	r0, r6
   85376:	f001 fa19 	bl	867ac <_wcrtomb_r>
   8537a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8537e:	4680      	mov	r8, r0
   85380:	d020      	beq.n	853c4 <__fputwc+0x6c>
   85382:	b370      	cbz	r0, 853e2 <__fputwc+0x8a>
   85384:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85388:	2500      	movs	r5, #0
   8538a:	e008      	b.n	8539e <__fputwc+0x46>
   8538c:	6823      	ldr	r3, [r4, #0]
   8538e:	1c5a      	adds	r2, r3, #1
   85390:	6022      	str	r2, [r4, #0]
   85392:	7019      	strb	r1, [r3, #0]
   85394:	3501      	adds	r5, #1
   85396:	4545      	cmp	r5, r8
   85398:	d223      	bcs.n	853e2 <__fputwc+0x8a>
   8539a:	ab01      	add	r3, sp, #4
   8539c:	5d59      	ldrb	r1, [r3, r5]
   8539e:	68a3      	ldr	r3, [r4, #8]
   853a0:	3b01      	subs	r3, #1
   853a2:	2b00      	cmp	r3, #0
   853a4:	60a3      	str	r3, [r4, #8]
   853a6:	daf1      	bge.n	8538c <__fputwc+0x34>
   853a8:	69a2      	ldr	r2, [r4, #24]
   853aa:	4293      	cmp	r3, r2
   853ac:	db01      	blt.n	853b2 <__fputwc+0x5a>
   853ae:	290a      	cmp	r1, #10
   853b0:	d1ec      	bne.n	8538c <__fputwc+0x34>
   853b2:	4622      	mov	r2, r4
   853b4:	4630      	mov	r0, r6
   853b6:	f001 f9a3 	bl	86700 <__swbuf_r>
   853ba:	1c43      	adds	r3, r0, #1
   853bc:	d1ea      	bne.n	85394 <__fputwc+0x3c>
   853be:	b002      	add	sp, #8
   853c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853c4:	89a3      	ldrh	r3, [r4, #12]
   853c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   853ca:	81a3      	strh	r3, [r4, #12]
   853cc:	b002      	add	sp, #8
   853ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853d2:	1e7b      	subs	r3, r7, #1
   853d4:	2bfe      	cmp	r3, #254	; 0xfe
   853d6:	d8c9      	bhi.n	8536c <__fputwc+0x14>
   853d8:	b2f9      	uxtb	r1, r7
   853da:	4680      	mov	r8, r0
   853dc:	f88d 1004 	strb.w	r1, [sp, #4]
   853e0:	e7d2      	b.n	85388 <__fputwc+0x30>
   853e2:	4638      	mov	r0, r7
   853e4:	b002      	add	sp, #8
   853e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   853ea:	bf00      	nop

000853ec <_fputwc_r>:
   853ec:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   853f0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   853f4:	d10a      	bne.n	8540c <_fputwc_r+0x20>
   853f6:	b410      	push	{r4}
   853f8:	6e54      	ldr	r4, [r2, #100]	; 0x64
   853fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   853fe:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   85402:	6654      	str	r4, [r2, #100]	; 0x64
   85404:	8193      	strh	r3, [r2, #12]
   85406:	bc10      	pop	{r4}
   85408:	f7ff bfa6 	b.w	85358 <__fputwc>
   8540c:	f7ff bfa4 	b.w	85358 <__fputwc>

00085410 <_malloc_trim_r>:
   85410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85412:	460c      	mov	r4, r1
   85414:	4f22      	ldr	r7, [pc, #136]	; (854a0 <_malloc_trim_r+0x90>)
   85416:	4606      	mov	r6, r0
   85418:	f000 ff2e 	bl	86278 <__malloc_lock>
   8541c:	68bb      	ldr	r3, [r7, #8]
   8541e:	685d      	ldr	r5, [r3, #4]
   85420:	f025 0503 	bic.w	r5, r5, #3
   85424:	1b29      	subs	r1, r5, r4
   85426:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8542a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8542e:	f021 010f 	bic.w	r1, r1, #15
   85432:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85436:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8543a:	db07      	blt.n	8544c <_malloc_trim_r+0x3c>
   8543c:	2100      	movs	r1, #0
   8543e:	4630      	mov	r0, r6
   85440:	f001 f908 	bl	86654 <_sbrk_r>
   85444:	68bb      	ldr	r3, [r7, #8]
   85446:	442b      	add	r3, r5
   85448:	4298      	cmp	r0, r3
   8544a:	d004      	beq.n	85456 <_malloc_trim_r+0x46>
   8544c:	4630      	mov	r0, r6
   8544e:	f000 ff15 	bl	8627c <__malloc_unlock>
   85452:	2000      	movs	r0, #0
   85454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85456:	4261      	negs	r1, r4
   85458:	4630      	mov	r0, r6
   8545a:	f001 f8fb 	bl	86654 <_sbrk_r>
   8545e:	3001      	adds	r0, #1
   85460:	d00d      	beq.n	8547e <_malloc_trim_r+0x6e>
   85462:	4b10      	ldr	r3, [pc, #64]	; (854a4 <_malloc_trim_r+0x94>)
   85464:	68ba      	ldr	r2, [r7, #8]
   85466:	6819      	ldr	r1, [r3, #0]
   85468:	1b2d      	subs	r5, r5, r4
   8546a:	f045 0501 	orr.w	r5, r5, #1
   8546e:	4630      	mov	r0, r6
   85470:	1b09      	subs	r1, r1, r4
   85472:	6055      	str	r5, [r2, #4]
   85474:	6019      	str	r1, [r3, #0]
   85476:	f000 ff01 	bl	8627c <__malloc_unlock>
   8547a:	2001      	movs	r0, #1
   8547c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8547e:	2100      	movs	r1, #0
   85480:	4630      	mov	r0, r6
   85482:	f001 f8e7 	bl	86654 <_sbrk_r>
   85486:	68ba      	ldr	r2, [r7, #8]
   85488:	1a83      	subs	r3, r0, r2
   8548a:	2b0f      	cmp	r3, #15
   8548c:	ddde      	ble.n	8544c <_malloc_trim_r+0x3c>
   8548e:	4c06      	ldr	r4, [pc, #24]	; (854a8 <_malloc_trim_r+0x98>)
   85490:	4904      	ldr	r1, [pc, #16]	; (854a4 <_malloc_trim_r+0x94>)
   85492:	6824      	ldr	r4, [r4, #0]
   85494:	f043 0301 	orr.w	r3, r3, #1
   85498:	1b00      	subs	r0, r0, r4
   8549a:	6053      	str	r3, [r2, #4]
   8549c:	6008      	str	r0, [r1, #0]
   8549e:	e7d5      	b.n	8544c <_malloc_trim_r+0x3c>
   854a0:	20070858 	.word	0x20070858
   854a4:	20070d98 	.word	0x20070d98
   854a8:	20070c64 	.word	0x20070c64

000854ac <_free_r>:
   854ac:	2900      	cmp	r1, #0
   854ae:	d045      	beq.n	8553c <_free_r+0x90>
   854b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   854b4:	460d      	mov	r5, r1
   854b6:	4680      	mov	r8, r0
   854b8:	f000 fede 	bl	86278 <__malloc_lock>
   854bc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   854c0:	496a      	ldr	r1, [pc, #424]	; (8566c <_free_r+0x1c0>)
   854c2:	f1a5 0408 	sub.w	r4, r5, #8
   854c6:	f027 0301 	bic.w	r3, r7, #1
   854ca:	18e2      	adds	r2, r4, r3
   854cc:	688e      	ldr	r6, [r1, #8]
   854ce:	6850      	ldr	r0, [r2, #4]
   854d0:	42b2      	cmp	r2, r6
   854d2:	f020 0003 	bic.w	r0, r0, #3
   854d6:	d062      	beq.n	8559e <_free_r+0xf2>
   854d8:	07fe      	lsls	r6, r7, #31
   854da:	6050      	str	r0, [r2, #4]
   854dc:	d40b      	bmi.n	854f6 <_free_r+0x4a>
   854de:	f855 7c08 	ldr.w	r7, [r5, #-8]
   854e2:	f101 0e08 	add.w	lr, r1, #8
   854e6:	1be4      	subs	r4, r4, r7
   854e8:	68a5      	ldr	r5, [r4, #8]
   854ea:	443b      	add	r3, r7
   854ec:	4575      	cmp	r5, lr
   854ee:	d06f      	beq.n	855d0 <_free_r+0x124>
   854f0:	68e7      	ldr	r7, [r4, #12]
   854f2:	60ef      	str	r7, [r5, #12]
   854f4:	60bd      	str	r5, [r7, #8]
   854f6:	1815      	adds	r5, r2, r0
   854f8:	686d      	ldr	r5, [r5, #4]
   854fa:	07ed      	lsls	r5, r5, #31
   854fc:	d542      	bpl.n	85584 <_free_r+0xd8>
   854fe:	f043 0201 	orr.w	r2, r3, #1
   85502:	6062      	str	r2, [r4, #4]
   85504:	50e3      	str	r3, [r4, r3]
   85506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8550a:	d218      	bcs.n	8553e <_free_r+0x92>
   8550c:	08db      	lsrs	r3, r3, #3
   8550e:	6848      	ldr	r0, [r1, #4]
   85510:	109d      	asrs	r5, r3, #2
   85512:	2201      	movs	r2, #1
   85514:	3301      	adds	r3, #1
   85516:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8551a:	fa02 f505 	lsl.w	r5, r2, r5
   8551e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   85522:	4328      	orrs	r0, r5
   85524:	3a08      	subs	r2, #8
   85526:	60e2      	str	r2, [r4, #12]
   85528:	60a7      	str	r7, [r4, #8]
   8552a:	6048      	str	r0, [r1, #4]
   8552c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85530:	60fc      	str	r4, [r7, #12]
   85532:	4640      	mov	r0, r8
   85534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85538:	f000 bea0 	b.w	8627c <__malloc_unlock>
   8553c:	4770      	bx	lr
   8553e:	0a5a      	lsrs	r2, r3, #9
   85540:	2a04      	cmp	r2, #4
   85542:	d853      	bhi.n	855ec <_free_r+0x140>
   85544:	099a      	lsrs	r2, r3, #6
   85546:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8554a:	007f      	lsls	r7, r7, #1
   8554c:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85550:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   85554:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   85558:	3808      	subs	r0, #8
   8555a:	4290      	cmp	r0, r2
   8555c:	4943      	ldr	r1, [pc, #268]	; (8566c <_free_r+0x1c0>)
   8555e:	d04d      	beq.n	855fc <_free_r+0x150>
   85560:	6851      	ldr	r1, [r2, #4]
   85562:	f021 0103 	bic.w	r1, r1, #3
   85566:	428b      	cmp	r3, r1
   85568:	d202      	bcs.n	85570 <_free_r+0xc4>
   8556a:	6892      	ldr	r2, [r2, #8]
   8556c:	4290      	cmp	r0, r2
   8556e:	d1f7      	bne.n	85560 <_free_r+0xb4>
   85570:	68d0      	ldr	r0, [r2, #12]
   85572:	60e0      	str	r0, [r4, #12]
   85574:	60a2      	str	r2, [r4, #8]
   85576:	6084      	str	r4, [r0, #8]
   85578:	60d4      	str	r4, [r2, #12]
   8557a:	4640      	mov	r0, r8
   8557c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85580:	f000 be7c 	b.w	8627c <__malloc_unlock>
   85584:	6895      	ldr	r5, [r2, #8]
   85586:	4f3a      	ldr	r7, [pc, #232]	; (85670 <_free_r+0x1c4>)
   85588:	4403      	add	r3, r0
   8558a:	42bd      	cmp	r5, r7
   8558c:	d03f      	beq.n	8560e <_free_r+0x162>
   8558e:	68d0      	ldr	r0, [r2, #12]
   85590:	f043 0201 	orr.w	r2, r3, #1
   85594:	60e8      	str	r0, [r5, #12]
   85596:	6085      	str	r5, [r0, #8]
   85598:	6062      	str	r2, [r4, #4]
   8559a:	50e3      	str	r3, [r4, r3]
   8559c:	e7b3      	b.n	85506 <_free_r+0x5a>
   8559e:	07ff      	lsls	r7, r7, #31
   855a0:	4403      	add	r3, r0
   855a2:	d407      	bmi.n	855b4 <_free_r+0x108>
   855a4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   855a8:	1b64      	subs	r4, r4, r5
   855aa:	68e2      	ldr	r2, [r4, #12]
   855ac:	68a0      	ldr	r0, [r4, #8]
   855ae:	442b      	add	r3, r5
   855b0:	60c2      	str	r2, [r0, #12]
   855b2:	6090      	str	r0, [r2, #8]
   855b4:	4a2f      	ldr	r2, [pc, #188]	; (85674 <_free_r+0x1c8>)
   855b6:	f043 0001 	orr.w	r0, r3, #1
   855ba:	6812      	ldr	r2, [r2, #0]
   855bc:	6060      	str	r0, [r4, #4]
   855be:	4293      	cmp	r3, r2
   855c0:	608c      	str	r4, [r1, #8]
   855c2:	d3b6      	bcc.n	85532 <_free_r+0x86>
   855c4:	4b2c      	ldr	r3, [pc, #176]	; (85678 <_free_r+0x1cc>)
   855c6:	4640      	mov	r0, r8
   855c8:	6819      	ldr	r1, [r3, #0]
   855ca:	f7ff ff21 	bl	85410 <_malloc_trim_r>
   855ce:	e7b0      	b.n	85532 <_free_r+0x86>
   855d0:	1811      	adds	r1, r2, r0
   855d2:	6849      	ldr	r1, [r1, #4]
   855d4:	07c9      	lsls	r1, r1, #31
   855d6:	d444      	bmi.n	85662 <_free_r+0x1b6>
   855d8:	6891      	ldr	r1, [r2, #8]
   855da:	4403      	add	r3, r0
   855dc:	68d2      	ldr	r2, [r2, #12]
   855de:	f043 0001 	orr.w	r0, r3, #1
   855e2:	60ca      	str	r2, [r1, #12]
   855e4:	6091      	str	r1, [r2, #8]
   855e6:	6060      	str	r0, [r4, #4]
   855e8:	50e3      	str	r3, [r4, r3]
   855ea:	e7a2      	b.n	85532 <_free_r+0x86>
   855ec:	2a14      	cmp	r2, #20
   855ee:	d817      	bhi.n	85620 <_free_r+0x174>
   855f0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   855f4:	007f      	lsls	r7, r7, #1
   855f6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   855fa:	e7a9      	b.n	85550 <_free_r+0xa4>
   855fc:	10aa      	asrs	r2, r5, #2
   855fe:	684b      	ldr	r3, [r1, #4]
   85600:	2501      	movs	r5, #1
   85602:	fa05 f202 	lsl.w	r2, r5, r2
   85606:	4313      	orrs	r3, r2
   85608:	604b      	str	r3, [r1, #4]
   8560a:	4602      	mov	r2, r0
   8560c:	e7b1      	b.n	85572 <_free_r+0xc6>
   8560e:	f043 0201 	orr.w	r2, r3, #1
   85612:	614c      	str	r4, [r1, #20]
   85614:	610c      	str	r4, [r1, #16]
   85616:	60e5      	str	r5, [r4, #12]
   85618:	60a5      	str	r5, [r4, #8]
   8561a:	6062      	str	r2, [r4, #4]
   8561c:	50e3      	str	r3, [r4, r3]
   8561e:	e788      	b.n	85532 <_free_r+0x86>
   85620:	2a54      	cmp	r2, #84	; 0x54
   85622:	d806      	bhi.n	85632 <_free_r+0x186>
   85624:	0b1a      	lsrs	r2, r3, #12
   85626:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8562a:	007f      	lsls	r7, r7, #1
   8562c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85630:	e78e      	b.n	85550 <_free_r+0xa4>
   85632:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85636:	d806      	bhi.n	85646 <_free_r+0x19a>
   85638:	0bda      	lsrs	r2, r3, #15
   8563a:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8563e:	007f      	lsls	r7, r7, #1
   85640:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85644:	e784      	b.n	85550 <_free_r+0xa4>
   85646:	f240 5054 	movw	r0, #1364	; 0x554
   8564a:	4282      	cmp	r2, r0
   8564c:	d806      	bhi.n	8565c <_free_r+0x1b0>
   8564e:	0c9a      	lsrs	r2, r3, #18
   85650:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85654:	007f      	lsls	r7, r7, #1
   85656:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8565a:	e779      	b.n	85550 <_free_r+0xa4>
   8565c:	27fe      	movs	r7, #254	; 0xfe
   8565e:	257e      	movs	r5, #126	; 0x7e
   85660:	e776      	b.n	85550 <_free_r+0xa4>
   85662:	f043 0201 	orr.w	r2, r3, #1
   85666:	6062      	str	r2, [r4, #4]
   85668:	50e3      	str	r3, [r4, r3]
   8566a:	e762      	b.n	85532 <_free_r+0x86>
   8566c:	20070858 	.word	0x20070858
   85670:	20070860 	.word	0x20070860
   85674:	20070c60 	.word	0x20070c60
   85678:	20070d94 	.word	0x20070d94

0008567c <__sfvwrite_r>:
   8567c:	6893      	ldr	r3, [r2, #8]
   8567e:	2b00      	cmp	r3, #0
   85680:	f000 80ab 	beq.w	857da <__sfvwrite_r+0x15e>
   85684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85688:	898b      	ldrh	r3, [r1, #12]
   8568a:	b085      	sub	sp, #20
   8568c:	460c      	mov	r4, r1
   8568e:	0719      	lsls	r1, r3, #28
   85690:	9002      	str	r0, [sp, #8]
   85692:	4616      	mov	r6, r2
   85694:	d528      	bpl.n	856e8 <__sfvwrite_r+0x6c>
   85696:	6922      	ldr	r2, [r4, #16]
   85698:	b332      	cbz	r2, 856e8 <__sfvwrite_r+0x6c>
   8569a:	f003 0802 	and.w	r8, r3, #2
   8569e:	fa1f f088 	uxth.w	r0, r8
   856a2:	6835      	ldr	r5, [r6, #0]
   856a4:	b378      	cbz	r0, 85706 <__sfvwrite_r+0x8a>
   856a6:	f04f 0900 	mov.w	r9, #0
   856aa:	46c8      	mov	r8, r9
   856ac:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 85980 <__sfvwrite_r+0x304>
   856b0:	f1b8 0f00 	cmp.w	r8, #0
   856b4:	f000 808b 	beq.w	857ce <__sfvwrite_r+0x152>
   856b8:	45d0      	cmp	r8, sl
   856ba:	4643      	mov	r3, r8
   856bc:	464a      	mov	r2, r9
   856be:	bf28      	it	cs
   856c0:	4653      	movcs	r3, sl
   856c2:	69e1      	ldr	r1, [r4, #28]
   856c4:	9802      	ldr	r0, [sp, #8]
   856c6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   856c8:	47b8      	blx	r7
   856ca:	2800      	cmp	r0, #0
   856cc:	f340 80a5 	ble.w	8581a <__sfvwrite_r+0x19e>
   856d0:	68b3      	ldr	r3, [r6, #8]
   856d2:	4481      	add	r9, r0
   856d4:	1a1b      	subs	r3, r3, r0
   856d6:	ebc0 0808 	rsb	r8, r0, r8
   856da:	60b3      	str	r3, [r6, #8]
   856dc:	2b00      	cmp	r3, #0
   856de:	d1e7      	bne.n	856b0 <__sfvwrite_r+0x34>
   856e0:	2000      	movs	r0, #0
   856e2:	b005      	add	sp, #20
   856e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   856e8:	4621      	mov	r1, r4
   856ea:	9802      	ldr	r0, [sp, #8]
   856ec:	f7ff fc6a 	bl	84fc4 <__swsetup_r>
   856f0:	2800      	cmp	r0, #0
   856f2:	f040 813c 	bne.w	8596e <__sfvwrite_r+0x2f2>
   856f6:	89a3      	ldrh	r3, [r4, #12]
   856f8:	6835      	ldr	r5, [r6, #0]
   856fa:	f003 0802 	and.w	r8, r3, #2
   856fe:	fa1f f088 	uxth.w	r0, r8
   85702:	2800      	cmp	r0, #0
   85704:	d1cf      	bne.n	856a6 <__sfvwrite_r+0x2a>
   85706:	f013 0901 	ands.w	r9, r3, #1
   8570a:	f040 8090 	bne.w	8582e <__sfvwrite_r+0x1b2>
   8570e:	464f      	mov	r7, r9
   85710:	9601      	str	r6, [sp, #4]
   85712:	2f00      	cmp	r7, #0
   85714:	d056      	beq.n	857c4 <__sfvwrite_r+0x148>
   85716:	059a      	lsls	r2, r3, #22
   85718:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8571c:	d55f      	bpl.n	857de <__sfvwrite_r+0x162>
   8571e:	4547      	cmp	r7, r8
   85720:	46c2      	mov	sl, r8
   85722:	f0c0 80bf 	bcc.w	858a4 <__sfvwrite_r+0x228>
   85726:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8572a:	f000 80bd 	beq.w	858a8 <__sfvwrite_r+0x22c>
   8572e:	6962      	ldr	r2, [r4, #20]
   85730:	6820      	ldr	r0, [r4, #0]
   85732:	6921      	ldr	r1, [r4, #16]
   85734:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85738:	ebc1 0a00 	rsb	sl, r1, r0
   8573c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85740:	f10a 0001 	add.w	r0, sl, #1
   85744:	ea4f 0868 	mov.w	r8, r8, asr #1
   85748:	4438      	add	r0, r7
   8574a:	4540      	cmp	r0, r8
   8574c:	4642      	mov	r2, r8
   8574e:	bf84      	itt	hi
   85750:	4680      	movhi	r8, r0
   85752:	4642      	movhi	r2, r8
   85754:	055b      	lsls	r3, r3, #21
   85756:	f140 80f2 	bpl.w	8593e <__sfvwrite_r+0x2c2>
   8575a:	4611      	mov	r1, r2
   8575c:	9802      	ldr	r0, [sp, #8]
   8575e:	f000 f9bf 	bl	85ae0 <_malloc_r>
   85762:	4683      	mov	fp, r0
   85764:	2800      	cmp	r0, #0
   85766:	f000 8105 	beq.w	85974 <__sfvwrite_r+0x2f8>
   8576a:	4652      	mov	r2, sl
   8576c:	6921      	ldr	r1, [r4, #16]
   8576e:	f000 fca9 	bl	860c4 <memcpy>
   85772:	89a3      	ldrh	r3, [r4, #12]
   85774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8577c:	81a3      	strh	r3, [r4, #12]
   8577e:	ebca 0308 	rsb	r3, sl, r8
   85782:	eb0b 000a 	add.w	r0, fp, sl
   85786:	f8c4 8014 	str.w	r8, [r4, #20]
   8578a:	46ba      	mov	sl, r7
   8578c:	46b8      	mov	r8, r7
   8578e:	f8c4 b010 	str.w	fp, [r4, #16]
   85792:	6020      	str	r0, [r4, #0]
   85794:	60a3      	str	r3, [r4, #8]
   85796:	4652      	mov	r2, sl
   85798:	4649      	mov	r1, r9
   8579a:	f000 fd09 	bl	861b0 <memmove>
   8579e:	68a0      	ldr	r0, [r4, #8]
   857a0:	6823      	ldr	r3, [r4, #0]
   857a2:	ebc8 0000 	rsb	r0, r8, r0
   857a6:	60a0      	str	r0, [r4, #8]
   857a8:	4638      	mov	r0, r7
   857aa:	4453      	add	r3, sl
   857ac:	6023      	str	r3, [r4, #0]
   857ae:	9a01      	ldr	r2, [sp, #4]
   857b0:	4481      	add	r9, r0
   857b2:	6893      	ldr	r3, [r2, #8]
   857b4:	1a3f      	subs	r7, r7, r0
   857b6:	1a1b      	subs	r3, r3, r0
   857b8:	6093      	str	r3, [r2, #8]
   857ba:	2b00      	cmp	r3, #0
   857bc:	d090      	beq.n	856e0 <__sfvwrite_r+0x64>
   857be:	89a3      	ldrh	r3, [r4, #12]
   857c0:	2f00      	cmp	r7, #0
   857c2:	d1a8      	bne.n	85716 <__sfvwrite_r+0x9a>
   857c4:	f8d5 9000 	ldr.w	r9, [r5]
   857c8:	686f      	ldr	r7, [r5, #4]
   857ca:	3508      	adds	r5, #8
   857cc:	e7a1      	b.n	85712 <__sfvwrite_r+0x96>
   857ce:	f8d5 9000 	ldr.w	r9, [r5]
   857d2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   857d6:	3508      	adds	r5, #8
   857d8:	e76a      	b.n	856b0 <__sfvwrite_r+0x34>
   857da:	2000      	movs	r0, #0
   857dc:	4770      	bx	lr
   857de:	6820      	ldr	r0, [r4, #0]
   857e0:	6923      	ldr	r3, [r4, #16]
   857e2:	4298      	cmp	r0, r3
   857e4:	d803      	bhi.n	857ee <__sfvwrite_r+0x172>
   857e6:	6962      	ldr	r2, [r4, #20]
   857e8:	4297      	cmp	r7, r2
   857ea:	f080 8083 	bcs.w	858f4 <__sfvwrite_r+0x278>
   857ee:	45b8      	cmp	r8, r7
   857f0:	bf28      	it	cs
   857f2:	46b8      	movcs	r8, r7
   857f4:	4649      	mov	r1, r9
   857f6:	4642      	mov	r2, r8
   857f8:	f000 fcda 	bl	861b0 <memmove>
   857fc:	68a3      	ldr	r3, [r4, #8]
   857fe:	6822      	ldr	r2, [r4, #0]
   85800:	ebc8 0303 	rsb	r3, r8, r3
   85804:	4442      	add	r2, r8
   85806:	60a3      	str	r3, [r4, #8]
   85808:	6022      	str	r2, [r4, #0]
   8580a:	2b00      	cmp	r3, #0
   8580c:	d148      	bne.n	858a0 <__sfvwrite_r+0x224>
   8580e:	4621      	mov	r1, r4
   85810:	9802      	ldr	r0, [sp, #8]
   85812:	f7ff fcef 	bl	851f4 <_fflush_r>
   85816:	2800      	cmp	r0, #0
   85818:	d042      	beq.n	858a0 <__sfvwrite_r+0x224>
   8581a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8581e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85822:	f04f 30ff 	mov.w	r0, #4294967295
   85826:	81a3      	strh	r3, [r4, #12]
   85828:	b005      	add	sp, #20
   8582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8582e:	4680      	mov	r8, r0
   85830:	4682      	mov	sl, r0
   85832:	4681      	mov	r9, r0
   85834:	9001      	str	r0, [sp, #4]
   85836:	f1b9 0f00 	cmp.w	r9, #0
   8583a:	d029      	beq.n	85890 <__sfvwrite_r+0x214>
   8583c:	9b01      	ldr	r3, [sp, #4]
   8583e:	2b00      	cmp	r3, #0
   85840:	d04b      	beq.n	858da <__sfvwrite_r+0x25e>
   85842:	45c8      	cmp	r8, r9
   85844:	46c3      	mov	fp, r8
   85846:	bf28      	it	cs
   85848:	46cb      	movcs	fp, r9
   8584a:	6820      	ldr	r0, [r4, #0]
   8584c:	6923      	ldr	r3, [r4, #16]
   8584e:	465f      	mov	r7, fp
   85850:	4298      	cmp	r0, r3
   85852:	6962      	ldr	r2, [r4, #20]
   85854:	d903      	bls.n	8585e <__sfvwrite_r+0x1e2>
   85856:	68a3      	ldr	r3, [r4, #8]
   85858:	4413      	add	r3, r2
   8585a:	459b      	cmp	fp, r3
   8585c:	dc5c      	bgt.n	85918 <__sfvwrite_r+0x29c>
   8585e:	4593      	cmp	fp, r2
   85860:	db24      	blt.n	858ac <__sfvwrite_r+0x230>
   85862:	4613      	mov	r3, r2
   85864:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85866:	4652      	mov	r2, sl
   85868:	69e1      	ldr	r1, [r4, #28]
   8586a:	9802      	ldr	r0, [sp, #8]
   8586c:	47b8      	blx	r7
   8586e:	1e07      	subs	r7, r0, #0
   85870:	ddd3      	ble.n	8581a <__sfvwrite_r+0x19e>
   85872:	ebb8 0807 	subs.w	r8, r8, r7
   85876:	d027      	beq.n	858c8 <__sfvwrite_r+0x24c>
   85878:	68b3      	ldr	r3, [r6, #8]
   8587a:	44ba      	add	sl, r7
   8587c:	1bdb      	subs	r3, r3, r7
   8587e:	ebc7 0909 	rsb	r9, r7, r9
   85882:	60b3      	str	r3, [r6, #8]
   85884:	2b00      	cmp	r3, #0
   85886:	f43f af2b 	beq.w	856e0 <__sfvwrite_r+0x64>
   8588a:	f1b9 0f00 	cmp.w	r9, #0
   8588e:	d1d5      	bne.n	8583c <__sfvwrite_r+0x1c0>
   85890:	2300      	movs	r3, #0
   85892:	f8d5 a000 	ldr.w	sl, [r5]
   85896:	f8d5 9004 	ldr.w	r9, [r5, #4]
   8589a:	9301      	str	r3, [sp, #4]
   8589c:	3508      	adds	r5, #8
   8589e:	e7ca      	b.n	85836 <__sfvwrite_r+0x1ba>
   858a0:	4640      	mov	r0, r8
   858a2:	e784      	b.n	857ae <__sfvwrite_r+0x132>
   858a4:	46b8      	mov	r8, r7
   858a6:	46ba      	mov	sl, r7
   858a8:	6820      	ldr	r0, [r4, #0]
   858aa:	e774      	b.n	85796 <__sfvwrite_r+0x11a>
   858ac:	465a      	mov	r2, fp
   858ae:	4651      	mov	r1, sl
   858b0:	f000 fc7e 	bl	861b0 <memmove>
   858b4:	68a2      	ldr	r2, [r4, #8]
   858b6:	6823      	ldr	r3, [r4, #0]
   858b8:	ebcb 0202 	rsb	r2, fp, r2
   858bc:	445b      	add	r3, fp
   858be:	ebb8 0807 	subs.w	r8, r8, r7
   858c2:	60a2      	str	r2, [r4, #8]
   858c4:	6023      	str	r3, [r4, #0]
   858c6:	d1d7      	bne.n	85878 <__sfvwrite_r+0x1fc>
   858c8:	4621      	mov	r1, r4
   858ca:	9802      	ldr	r0, [sp, #8]
   858cc:	f7ff fc92 	bl	851f4 <_fflush_r>
   858d0:	2800      	cmp	r0, #0
   858d2:	d1a2      	bne.n	8581a <__sfvwrite_r+0x19e>
   858d4:	f8cd 8004 	str.w	r8, [sp, #4]
   858d8:	e7ce      	b.n	85878 <__sfvwrite_r+0x1fc>
   858da:	464a      	mov	r2, r9
   858dc:	210a      	movs	r1, #10
   858de:	4650      	mov	r0, sl
   858e0:	f000 fbaa 	bl	86038 <memchr>
   858e4:	2800      	cmp	r0, #0
   858e6:	d03d      	beq.n	85964 <__sfvwrite_r+0x2e8>
   858e8:	3001      	adds	r0, #1
   858ea:	2301      	movs	r3, #1
   858ec:	ebca 0800 	rsb	r8, sl, r0
   858f0:	9301      	str	r3, [sp, #4]
   858f2:	e7a6      	b.n	85842 <__sfvwrite_r+0x1c6>
   858f4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   858f8:	42bb      	cmp	r3, r7
   858fa:	bf28      	it	cs
   858fc:	463b      	movcs	r3, r7
   858fe:	fb93 f3f2 	sdiv	r3, r3, r2
   85902:	69e1      	ldr	r1, [r4, #28]
   85904:	fb02 f303 	mul.w	r3, r2, r3
   85908:	9802      	ldr	r0, [sp, #8]
   8590a:	464a      	mov	r2, r9
   8590c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8590e:	47b0      	blx	r6
   85910:	2800      	cmp	r0, #0
   85912:	f73f af4c 	bgt.w	857ae <__sfvwrite_r+0x132>
   85916:	e780      	b.n	8581a <__sfvwrite_r+0x19e>
   85918:	461a      	mov	r2, r3
   8591a:	4651      	mov	r1, sl
   8591c:	9303      	str	r3, [sp, #12]
   8591e:	f000 fc47 	bl	861b0 <memmove>
   85922:	6822      	ldr	r2, [r4, #0]
   85924:	9b03      	ldr	r3, [sp, #12]
   85926:	4621      	mov	r1, r4
   85928:	441a      	add	r2, r3
   8592a:	6022      	str	r2, [r4, #0]
   8592c:	9802      	ldr	r0, [sp, #8]
   8592e:	f7ff fc61 	bl	851f4 <_fflush_r>
   85932:	9b03      	ldr	r3, [sp, #12]
   85934:	2800      	cmp	r0, #0
   85936:	f47f af70 	bne.w	8581a <__sfvwrite_r+0x19e>
   8593a:	461f      	mov	r7, r3
   8593c:	e799      	b.n	85872 <__sfvwrite_r+0x1f6>
   8593e:	9802      	ldr	r0, [sp, #8]
   85940:	f000 fc9e 	bl	86280 <_realloc_r>
   85944:	4683      	mov	fp, r0
   85946:	2800      	cmp	r0, #0
   85948:	f47f af19 	bne.w	8577e <__sfvwrite_r+0x102>
   8594c:	9d02      	ldr	r5, [sp, #8]
   8594e:	6921      	ldr	r1, [r4, #16]
   85950:	4628      	mov	r0, r5
   85952:	f7ff fdab 	bl	854ac <_free_r>
   85956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8595a:	220c      	movs	r2, #12
   8595c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85960:	602a      	str	r2, [r5, #0]
   85962:	e75c      	b.n	8581e <__sfvwrite_r+0x1a2>
   85964:	2301      	movs	r3, #1
   85966:	f109 0801 	add.w	r8, r9, #1
   8596a:	9301      	str	r3, [sp, #4]
   8596c:	e769      	b.n	85842 <__sfvwrite_r+0x1c6>
   8596e:	f04f 30ff 	mov.w	r0, #4294967295
   85972:	e6b6      	b.n	856e2 <__sfvwrite_r+0x66>
   85974:	9a02      	ldr	r2, [sp, #8]
   85976:	230c      	movs	r3, #12
   85978:	6013      	str	r3, [r2, #0]
   8597a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8597e:	e74e      	b.n	8581e <__sfvwrite_r+0x1a2>
   85980:	7ffffc00 	.word	0x7ffffc00

00085984 <_fwalk_reent>:
   85984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85988:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8598c:	d01e      	beq.n	859cc <_fwalk_reent+0x48>
   8598e:	4688      	mov	r8, r1
   85990:	4607      	mov	r7, r0
   85992:	f04f 0900 	mov.w	r9, #0
   85996:	6875      	ldr	r5, [r6, #4]
   85998:	68b4      	ldr	r4, [r6, #8]
   8599a:	3d01      	subs	r5, #1
   8599c:	d410      	bmi.n	859c0 <_fwalk_reent+0x3c>
   8599e:	89a3      	ldrh	r3, [r4, #12]
   859a0:	3d01      	subs	r5, #1
   859a2:	2b01      	cmp	r3, #1
   859a4:	d908      	bls.n	859b8 <_fwalk_reent+0x34>
   859a6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   859aa:	3301      	adds	r3, #1
   859ac:	d004      	beq.n	859b8 <_fwalk_reent+0x34>
   859ae:	4621      	mov	r1, r4
   859b0:	4638      	mov	r0, r7
   859b2:	47c0      	blx	r8
   859b4:	ea49 0900 	orr.w	r9, r9, r0
   859b8:	1c6b      	adds	r3, r5, #1
   859ba:	f104 0468 	add.w	r4, r4, #104	; 0x68
   859be:	d1ee      	bne.n	8599e <_fwalk_reent+0x1a>
   859c0:	6836      	ldr	r6, [r6, #0]
   859c2:	2e00      	cmp	r6, #0
   859c4:	d1e7      	bne.n	85996 <_fwalk_reent+0x12>
   859c6:	4648      	mov	r0, r9
   859c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   859cc:	46b1      	mov	r9, r6
   859ce:	4648      	mov	r0, r9
   859d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000859d4 <__locale_charset>:
   859d4:	4800      	ldr	r0, [pc, #0]	; (859d8 <__locale_charset+0x4>)
   859d6:	4770      	bx	lr
   859d8:	20070834 	.word	0x20070834

000859dc <__locale_mb_cur_max>:
   859dc:	4b01      	ldr	r3, [pc, #4]	; (859e4 <__locale_mb_cur_max+0x8>)
   859de:	6818      	ldr	r0, [r3, #0]
   859e0:	4770      	bx	lr
   859e2:	bf00      	nop
   859e4:	20070854 	.word	0x20070854

000859e8 <__swhatbuf_r>:
   859e8:	b570      	push	{r4, r5, r6, lr}
   859ea:	460e      	mov	r6, r1
   859ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   859f0:	b090      	sub	sp, #64	; 0x40
   859f2:	2900      	cmp	r1, #0
   859f4:	4614      	mov	r4, r2
   859f6:	461d      	mov	r5, r3
   859f8:	db14      	blt.n	85a24 <__swhatbuf_r+0x3c>
   859fa:	aa01      	add	r2, sp, #4
   859fc:	f000 ffca 	bl	86994 <_fstat_r>
   85a00:	2800      	cmp	r0, #0
   85a02:	db0f      	blt.n	85a24 <__swhatbuf_r+0x3c>
   85a04:	9a02      	ldr	r2, [sp, #8]
   85a06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85a0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   85a0e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   85a12:	fab2 f282 	clz	r2, r2
   85a16:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85a1a:	0952      	lsrs	r2, r2, #5
   85a1c:	602a      	str	r2, [r5, #0]
   85a1e:	6023      	str	r3, [r4, #0]
   85a20:	b010      	add	sp, #64	; 0x40
   85a22:	bd70      	pop	{r4, r5, r6, pc}
   85a24:	89b2      	ldrh	r2, [r6, #12]
   85a26:	2000      	movs	r0, #0
   85a28:	f002 0280 	and.w	r2, r2, #128	; 0x80
   85a2c:	b292      	uxth	r2, r2
   85a2e:	6028      	str	r0, [r5, #0]
   85a30:	b11a      	cbz	r2, 85a3a <__swhatbuf_r+0x52>
   85a32:	2340      	movs	r3, #64	; 0x40
   85a34:	6023      	str	r3, [r4, #0]
   85a36:	b010      	add	sp, #64	; 0x40
   85a38:	bd70      	pop	{r4, r5, r6, pc}
   85a3a:	4610      	mov	r0, r2
   85a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85a40:	6023      	str	r3, [r4, #0]
   85a42:	b010      	add	sp, #64	; 0x40
   85a44:	bd70      	pop	{r4, r5, r6, pc}
   85a46:	bf00      	nop

00085a48 <__smakebuf_r>:
   85a48:	898a      	ldrh	r2, [r1, #12]
   85a4a:	460b      	mov	r3, r1
   85a4c:	0792      	lsls	r2, r2, #30
   85a4e:	d506      	bpl.n	85a5e <__smakebuf_r+0x16>
   85a50:	f101 0243 	add.w	r2, r1, #67	; 0x43
   85a54:	2101      	movs	r1, #1
   85a56:	601a      	str	r2, [r3, #0]
   85a58:	611a      	str	r2, [r3, #16]
   85a5a:	6159      	str	r1, [r3, #20]
   85a5c:	4770      	bx	lr
   85a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85a60:	b083      	sub	sp, #12
   85a62:	ab01      	add	r3, sp, #4
   85a64:	466a      	mov	r2, sp
   85a66:	460c      	mov	r4, r1
   85a68:	4605      	mov	r5, r0
   85a6a:	f7ff ffbd 	bl	859e8 <__swhatbuf_r>
   85a6e:	9900      	ldr	r1, [sp, #0]
   85a70:	4606      	mov	r6, r0
   85a72:	4628      	mov	r0, r5
   85a74:	f000 f834 	bl	85ae0 <_malloc_r>
   85a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85a7c:	b1d0      	cbz	r0, 85ab4 <__smakebuf_r+0x6c>
   85a7e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   85a82:	4f12      	ldr	r7, [pc, #72]	; (85acc <__smakebuf_r+0x84>)
   85a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85a88:	63ef      	str	r7, [r5, #60]	; 0x3c
   85a8a:	81a3      	strh	r3, [r4, #12]
   85a8c:	6020      	str	r0, [r4, #0]
   85a8e:	6120      	str	r0, [r4, #16]
   85a90:	6161      	str	r1, [r4, #20]
   85a92:	b91a      	cbnz	r2, 85a9c <__smakebuf_r+0x54>
   85a94:	4333      	orrs	r3, r6
   85a96:	81a3      	strh	r3, [r4, #12]
   85a98:	b003      	add	sp, #12
   85a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85a9c:	4628      	mov	r0, r5
   85a9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85aa2:	f000 ff8b 	bl	869bc <_isatty_r>
   85aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85aaa:	2800      	cmp	r0, #0
   85aac:	d0f2      	beq.n	85a94 <__smakebuf_r+0x4c>
   85aae:	f043 0301 	orr.w	r3, r3, #1
   85ab2:	e7ef      	b.n	85a94 <__smakebuf_r+0x4c>
   85ab4:	059a      	lsls	r2, r3, #22
   85ab6:	d4ef      	bmi.n	85a98 <__smakebuf_r+0x50>
   85ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85abc:	f043 0302 	orr.w	r3, r3, #2
   85ac0:	2101      	movs	r1, #1
   85ac2:	81a3      	strh	r3, [r4, #12]
   85ac4:	6022      	str	r2, [r4, #0]
   85ac6:	6122      	str	r2, [r4, #16]
   85ac8:	6161      	str	r1, [r4, #20]
   85aca:	e7e5      	b.n	85a98 <__smakebuf_r+0x50>
   85acc:	00085221 	.word	0x00085221

00085ad0 <malloc>:
   85ad0:	4b02      	ldr	r3, [pc, #8]	; (85adc <malloc+0xc>)
   85ad2:	4601      	mov	r1, r0
   85ad4:	6818      	ldr	r0, [r3, #0]
   85ad6:	f000 b803 	b.w	85ae0 <_malloc_r>
   85ada:	bf00      	nop
   85adc:	20070830 	.word	0x20070830

00085ae0 <_malloc_r>:
   85ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ae4:	f101 050b 	add.w	r5, r1, #11
   85ae8:	2d16      	cmp	r5, #22
   85aea:	b083      	sub	sp, #12
   85aec:	4606      	mov	r6, r0
   85aee:	f240 80a0 	bls.w	85c32 <_malloc_r+0x152>
   85af2:	f035 0507 	bics.w	r5, r5, #7
   85af6:	f100 80c0 	bmi.w	85c7a <_malloc_r+0x19a>
   85afa:	42a9      	cmp	r1, r5
   85afc:	f200 80bd 	bhi.w	85c7a <_malloc_r+0x19a>
   85b00:	f000 fbba 	bl	86278 <__malloc_lock>
   85b04:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   85b08:	f0c0 8290 	bcc.w	8602c <_malloc_r+0x54c>
   85b0c:	0a6b      	lsrs	r3, r5, #9
   85b0e:	f000 80bb 	beq.w	85c88 <_malloc_r+0x1a8>
   85b12:	2b04      	cmp	r3, #4
   85b14:	f200 8177 	bhi.w	85e06 <_malloc_r+0x326>
   85b18:	09a8      	lsrs	r0, r5, #6
   85b1a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   85b1e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85b22:	3038      	adds	r0, #56	; 0x38
   85b24:	4fbe      	ldr	r7, [pc, #760]	; (85e20 <_malloc_r+0x340>)
   85b26:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   85b2a:	684c      	ldr	r4, [r1, #4]
   85b2c:	3908      	subs	r1, #8
   85b2e:	42a1      	cmp	r1, r4
   85b30:	d107      	bne.n	85b42 <_malloc_r+0x62>
   85b32:	e0ae      	b.n	85c92 <_malloc_r+0x1b2>
   85b34:	2a00      	cmp	r2, #0
   85b36:	f280 80ae 	bge.w	85c96 <_malloc_r+0x1b6>
   85b3a:	68e4      	ldr	r4, [r4, #12]
   85b3c:	42a1      	cmp	r1, r4
   85b3e:	f000 80a8 	beq.w	85c92 <_malloc_r+0x1b2>
   85b42:	6863      	ldr	r3, [r4, #4]
   85b44:	f023 0303 	bic.w	r3, r3, #3
   85b48:	1b5a      	subs	r2, r3, r5
   85b4a:	2a0f      	cmp	r2, #15
   85b4c:	ddf2      	ble.n	85b34 <_malloc_r+0x54>
   85b4e:	49b4      	ldr	r1, [pc, #720]	; (85e20 <_malloc_r+0x340>)
   85b50:	693c      	ldr	r4, [r7, #16]
   85b52:	f101 0e08 	add.w	lr, r1, #8
   85b56:	4574      	cmp	r4, lr
   85b58:	f000 81a8 	beq.w	85eac <_malloc_r+0x3cc>
   85b5c:	6863      	ldr	r3, [r4, #4]
   85b5e:	f023 0303 	bic.w	r3, r3, #3
   85b62:	1b5a      	subs	r2, r3, r5
   85b64:	2a0f      	cmp	r2, #15
   85b66:	f300 818e 	bgt.w	85e86 <_malloc_r+0x3a6>
   85b6a:	2a00      	cmp	r2, #0
   85b6c:	f8c1 e014 	str.w	lr, [r1, #20]
   85b70:	f8c1 e010 	str.w	lr, [r1, #16]
   85b74:	f280 8093 	bge.w	85c9e <_malloc_r+0x1be>
   85b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85b7c:	f080 815c 	bcs.w	85e38 <_malloc_r+0x358>
   85b80:	08db      	lsrs	r3, r3, #3
   85b82:	684a      	ldr	r2, [r1, #4]
   85b84:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85b88:	f04f 0c01 	mov.w	ip, #1
   85b8c:	3301      	adds	r3, #1
   85b8e:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   85b92:	fa0c f909 	lsl.w	r9, ip, r9
   85b96:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   85b9a:	ea49 0202 	orr.w	r2, r9, r2
   85b9e:	f1ac 0c08 	sub.w	ip, ip, #8
   85ba2:	f8c4 c00c 	str.w	ip, [r4, #12]
   85ba6:	f8c4 8008 	str.w	r8, [r4, #8]
   85baa:	604a      	str	r2, [r1, #4]
   85bac:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85bb0:	f8c8 400c 	str.w	r4, [r8, #12]
   85bb4:	1083      	asrs	r3, r0, #2
   85bb6:	2401      	movs	r4, #1
   85bb8:	409c      	lsls	r4, r3
   85bba:	4294      	cmp	r4, r2
   85bbc:	d87c      	bhi.n	85cb8 <_malloc_r+0x1d8>
   85bbe:	4214      	tst	r4, r2
   85bc0:	d106      	bne.n	85bd0 <_malloc_r+0xf0>
   85bc2:	f020 0003 	bic.w	r0, r0, #3
   85bc6:	0064      	lsls	r4, r4, #1
   85bc8:	4214      	tst	r4, r2
   85bca:	f100 0004 	add.w	r0, r0, #4
   85bce:	d0fa      	beq.n	85bc6 <_malloc_r+0xe6>
   85bd0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85bd4:	46cc      	mov	ip, r9
   85bd6:	4680      	mov	r8, r0
   85bd8:	f8dc 100c 	ldr.w	r1, [ip, #12]
   85bdc:	458c      	cmp	ip, r1
   85bde:	d107      	bne.n	85bf0 <_malloc_r+0x110>
   85be0:	e166      	b.n	85eb0 <_malloc_r+0x3d0>
   85be2:	2a00      	cmp	r2, #0
   85be4:	f280 8174 	bge.w	85ed0 <_malloc_r+0x3f0>
   85be8:	68c9      	ldr	r1, [r1, #12]
   85bea:	458c      	cmp	ip, r1
   85bec:	f000 8160 	beq.w	85eb0 <_malloc_r+0x3d0>
   85bf0:	684b      	ldr	r3, [r1, #4]
   85bf2:	f023 0303 	bic.w	r3, r3, #3
   85bf6:	1b5a      	subs	r2, r3, r5
   85bf8:	2a0f      	cmp	r2, #15
   85bfa:	ddf2      	ble.n	85be2 <_malloc_r+0x102>
   85bfc:	460c      	mov	r4, r1
   85bfe:	68cb      	ldr	r3, [r1, #12]
   85c00:	f854 cf08 	ldr.w	ip, [r4, #8]!
   85c04:	f045 0801 	orr.w	r8, r5, #1
   85c08:	f8c1 8004 	str.w	r8, [r1, #4]
   85c0c:	440d      	add	r5, r1
   85c0e:	f042 0101 	orr.w	r1, r2, #1
   85c12:	f8cc 300c 	str.w	r3, [ip, #12]
   85c16:	4630      	mov	r0, r6
   85c18:	f8c3 c008 	str.w	ip, [r3, #8]
   85c1c:	617d      	str	r5, [r7, #20]
   85c1e:	613d      	str	r5, [r7, #16]
   85c20:	f8c5 e00c 	str.w	lr, [r5, #12]
   85c24:	f8c5 e008 	str.w	lr, [r5, #8]
   85c28:	6069      	str	r1, [r5, #4]
   85c2a:	50aa      	str	r2, [r5, r2]
   85c2c:	f000 fb26 	bl	8627c <__malloc_unlock>
   85c30:	e01f      	b.n	85c72 <_malloc_r+0x192>
   85c32:	2910      	cmp	r1, #16
   85c34:	d821      	bhi.n	85c7a <_malloc_r+0x19a>
   85c36:	f000 fb1f 	bl	86278 <__malloc_lock>
   85c3a:	2510      	movs	r5, #16
   85c3c:	2306      	movs	r3, #6
   85c3e:	2002      	movs	r0, #2
   85c40:	4f77      	ldr	r7, [pc, #476]	; (85e20 <_malloc_r+0x340>)
   85c42:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   85c46:	685c      	ldr	r4, [r3, #4]
   85c48:	f1a3 0208 	sub.w	r2, r3, #8
   85c4c:	4294      	cmp	r4, r2
   85c4e:	f000 8138 	beq.w	85ec2 <_malloc_r+0x3e2>
   85c52:	6863      	ldr	r3, [r4, #4]
   85c54:	68e1      	ldr	r1, [r4, #12]
   85c56:	f023 0303 	bic.w	r3, r3, #3
   85c5a:	4423      	add	r3, r4
   85c5c:	685a      	ldr	r2, [r3, #4]
   85c5e:	68a5      	ldr	r5, [r4, #8]
   85c60:	f042 0201 	orr.w	r2, r2, #1
   85c64:	60e9      	str	r1, [r5, #12]
   85c66:	4630      	mov	r0, r6
   85c68:	608d      	str	r5, [r1, #8]
   85c6a:	605a      	str	r2, [r3, #4]
   85c6c:	f000 fb06 	bl	8627c <__malloc_unlock>
   85c70:	3408      	adds	r4, #8
   85c72:	4620      	mov	r0, r4
   85c74:	b003      	add	sp, #12
   85c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c7a:	2400      	movs	r4, #0
   85c7c:	4620      	mov	r0, r4
   85c7e:	230c      	movs	r3, #12
   85c80:	6033      	str	r3, [r6, #0]
   85c82:	b003      	add	sp, #12
   85c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85c88:	2180      	movs	r1, #128	; 0x80
   85c8a:	f04f 0e40 	mov.w	lr, #64	; 0x40
   85c8e:	203f      	movs	r0, #63	; 0x3f
   85c90:	e748      	b.n	85b24 <_malloc_r+0x44>
   85c92:	4670      	mov	r0, lr
   85c94:	e75b      	b.n	85b4e <_malloc_r+0x6e>
   85c96:	4423      	add	r3, r4
   85c98:	685a      	ldr	r2, [r3, #4]
   85c9a:	68e1      	ldr	r1, [r4, #12]
   85c9c:	e7df      	b.n	85c5e <_malloc_r+0x17e>
   85c9e:	4423      	add	r3, r4
   85ca0:	685a      	ldr	r2, [r3, #4]
   85ca2:	4630      	mov	r0, r6
   85ca4:	f042 0201 	orr.w	r2, r2, #1
   85ca8:	605a      	str	r2, [r3, #4]
   85caa:	3408      	adds	r4, #8
   85cac:	f000 fae6 	bl	8627c <__malloc_unlock>
   85cb0:	4620      	mov	r0, r4
   85cb2:	b003      	add	sp, #12
   85cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cb8:	68bc      	ldr	r4, [r7, #8]
   85cba:	6863      	ldr	r3, [r4, #4]
   85cbc:	f023 0803 	bic.w	r8, r3, #3
   85cc0:	45a8      	cmp	r8, r5
   85cc2:	d304      	bcc.n	85cce <_malloc_r+0x1ee>
   85cc4:	ebc5 0308 	rsb	r3, r5, r8
   85cc8:	2b0f      	cmp	r3, #15
   85cca:	f300 808c 	bgt.w	85de6 <_malloc_r+0x306>
   85cce:	4b55      	ldr	r3, [pc, #340]	; (85e24 <_malloc_r+0x344>)
   85cd0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 85e34 <_malloc_r+0x354>
   85cd4:	681a      	ldr	r2, [r3, #0]
   85cd6:	f8d9 3000 	ldr.w	r3, [r9]
   85cda:	442a      	add	r2, r5
   85cdc:	3301      	adds	r3, #1
   85cde:	eb04 0a08 	add.w	sl, r4, r8
   85ce2:	f000 8160 	beq.w	85fa6 <_malloc_r+0x4c6>
   85ce6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85cea:	320f      	adds	r2, #15
   85cec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85cf0:	f022 020f 	bic.w	r2, r2, #15
   85cf4:	4611      	mov	r1, r2
   85cf6:	4630      	mov	r0, r6
   85cf8:	9201      	str	r2, [sp, #4]
   85cfa:	f000 fcab 	bl	86654 <_sbrk_r>
   85cfe:	f1b0 3fff 	cmp.w	r0, #4294967295
   85d02:	4683      	mov	fp, r0
   85d04:	9a01      	ldr	r2, [sp, #4]
   85d06:	f000 8158 	beq.w	85fba <_malloc_r+0x4da>
   85d0a:	4582      	cmp	sl, r0
   85d0c:	f200 80fc 	bhi.w	85f08 <_malloc_r+0x428>
   85d10:	4b45      	ldr	r3, [pc, #276]	; (85e28 <_malloc_r+0x348>)
   85d12:	45da      	cmp	sl, fp
   85d14:	6819      	ldr	r1, [r3, #0]
   85d16:	4411      	add	r1, r2
   85d18:	6019      	str	r1, [r3, #0]
   85d1a:	f000 8153 	beq.w	85fc4 <_malloc_r+0x4e4>
   85d1e:	f8d9 0000 	ldr.w	r0, [r9]
   85d22:	f8df e110 	ldr.w	lr, [pc, #272]	; 85e34 <_malloc_r+0x354>
   85d26:	3001      	adds	r0, #1
   85d28:	bf1b      	ittet	ne
   85d2a:	ebca 0a0b 	rsbne	sl, sl, fp
   85d2e:	4451      	addne	r1, sl
   85d30:	f8ce b000 	streq.w	fp, [lr]
   85d34:	6019      	strne	r1, [r3, #0]
   85d36:	f01b 0107 	ands.w	r1, fp, #7
   85d3a:	f000 8117 	beq.w	85f6c <_malloc_r+0x48c>
   85d3e:	f1c1 0008 	rsb	r0, r1, #8
   85d42:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85d46:	4483      	add	fp, r0
   85d48:	3108      	adds	r1, #8
   85d4a:	445a      	add	r2, fp
   85d4c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85d50:	ebc2 0901 	rsb	r9, r2, r1
   85d54:	4649      	mov	r1, r9
   85d56:	4630      	mov	r0, r6
   85d58:	9301      	str	r3, [sp, #4]
   85d5a:	f000 fc7b 	bl	86654 <_sbrk_r>
   85d5e:	1c43      	adds	r3, r0, #1
   85d60:	9b01      	ldr	r3, [sp, #4]
   85d62:	f000 813f 	beq.w	85fe4 <_malloc_r+0x504>
   85d66:	ebcb 0200 	rsb	r2, fp, r0
   85d6a:	444a      	add	r2, r9
   85d6c:	f042 0201 	orr.w	r2, r2, #1
   85d70:	6819      	ldr	r1, [r3, #0]
   85d72:	42bc      	cmp	r4, r7
   85d74:	4449      	add	r1, r9
   85d76:	f8c7 b008 	str.w	fp, [r7, #8]
   85d7a:	6019      	str	r1, [r3, #0]
   85d7c:	f8cb 2004 	str.w	r2, [fp, #4]
   85d80:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 85e28 <_malloc_r+0x348>
   85d84:	d016      	beq.n	85db4 <_malloc_r+0x2d4>
   85d86:	f1b8 0f0f 	cmp.w	r8, #15
   85d8a:	f240 80fd 	bls.w	85f88 <_malloc_r+0x4a8>
   85d8e:	6862      	ldr	r2, [r4, #4]
   85d90:	f1a8 030c 	sub.w	r3, r8, #12
   85d94:	f023 0307 	bic.w	r3, r3, #7
   85d98:	f002 0201 	and.w	r2, r2, #1
   85d9c:	18e0      	adds	r0, r4, r3
   85d9e:	f04f 0e05 	mov.w	lr, #5
   85da2:	431a      	orrs	r2, r3
   85da4:	2b0f      	cmp	r3, #15
   85da6:	6062      	str	r2, [r4, #4]
   85da8:	f8c0 e004 	str.w	lr, [r0, #4]
   85dac:	f8c0 e008 	str.w	lr, [r0, #8]
   85db0:	f200 811c 	bhi.w	85fec <_malloc_r+0x50c>
   85db4:	4b1d      	ldr	r3, [pc, #116]	; (85e2c <_malloc_r+0x34c>)
   85db6:	68bc      	ldr	r4, [r7, #8]
   85db8:	681a      	ldr	r2, [r3, #0]
   85dba:	4291      	cmp	r1, r2
   85dbc:	bf88      	it	hi
   85dbe:	6019      	strhi	r1, [r3, #0]
   85dc0:	4b1b      	ldr	r3, [pc, #108]	; (85e30 <_malloc_r+0x350>)
   85dc2:	681a      	ldr	r2, [r3, #0]
   85dc4:	4291      	cmp	r1, r2
   85dc6:	6862      	ldr	r2, [r4, #4]
   85dc8:	bf88      	it	hi
   85dca:	6019      	strhi	r1, [r3, #0]
   85dcc:	f022 0203 	bic.w	r2, r2, #3
   85dd0:	4295      	cmp	r5, r2
   85dd2:	eba2 0305 	sub.w	r3, r2, r5
   85dd6:	d801      	bhi.n	85ddc <_malloc_r+0x2fc>
   85dd8:	2b0f      	cmp	r3, #15
   85dda:	dc04      	bgt.n	85de6 <_malloc_r+0x306>
   85ddc:	4630      	mov	r0, r6
   85dde:	f000 fa4d 	bl	8627c <__malloc_unlock>
   85de2:	2400      	movs	r4, #0
   85de4:	e745      	b.n	85c72 <_malloc_r+0x192>
   85de6:	f045 0201 	orr.w	r2, r5, #1
   85dea:	f043 0301 	orr.w	r3, r3, #1
   85dee:	4425      	add	r5, r4
   85df0:	6062      	str	r2, [r4, #4]
   85df2:	4630      	mov	r0, r6
   85df4:	60bd      	str	r5, [r7, #8]
   85df6:	3408      	adds	r4, #8
   85df8:	606b      	str	r3, [r5, #4]
   85dfa:	f000 fa3f 	bl	8627c <__malloc_unlock>
   85dfe:	4620      	mov	r0, r4
   85e00:	b003      	add	sp, #12
   85e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e06:	2b14      	cmp	r3, #20
   85e08:	d971      	bls.n	85eee <_malloc_r+0x40e>
   85e0a:	2b54      	cmp	r3, #84	; 0x54
   85e0c:	f200 80a4 	bhi.w	85f58 <_malloc_r+0x478>
   85e10:	0b28      	lsrs	r0, r5, #12
   85e12:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   85e16:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85e1a:	306e      	adds	r0, #110	; 0x6e
   85e1c:	e682      	b.n	85b24 <_malloc_r+0x44>
   85e1e:	bf00      	nop
   85e20:	20070858 	.word	0x20070858
   85e24:	20070d94 	.word	0x20070d94
   85e28:	20070d98 	.word	0x20070d98
   85e2c:	20070d90 	.word	0x20070d90
   85e30:	20070d8c 	.word	0x20070d8c
   85e34:	20070c64 	.word	0x20070c64
   85e38:	0a5a      	lsrs	r2, r3, #9
   85e3a:	2a04      	cmp	r2, #4
   85e3c:	d95e      	bls.n	85efc <_malloc_r+0x41c>
   85e3e:	2a14      	cmp	r2, #20
   85e40:	f200 80b3 	bhi.w	85faa <_malloc_r+0x4ca>
   85e44:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85e48:	0049      	lsls	r1, r1, #1
   85e4a:	325b      	adds	r2, #91	; 0x5b
   85e4c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   85e50:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   85e54:	f1ac 0c08 	sub.w	ip, ip, #8
   85e58:	458c      	cmp	ip, r1
   85e5a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 86034 <_malloc_r+0x554>
   85e5e:	f000 8088 	beq.w	85f72 <_malloc_r+0x492>
   85e62:	684a      	ldr	r2, [r1, #4]
   85e64:	f022 0203 	bic.w	r2, r2, #3
   85e68:	4293      	cmp	r3, r2
   85e6a:	d202      	bcs.n	85e72 <_malloc_r+0x392>
   85e6c:	6889      	ldr	r1, [r1, #8]
   85e6e:	458c      	cmp	ip, r1
   85e70:	d1f7      	bne.n	85e62 <_malloc_r+0x382>
   85e72:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   85e76:	687a      	ldr	r2, [r7, #4]
   85e78:	f8c4 c00c 	str.w	ip, [r4, #12]
   85e7c:	60a1      	str	r1, [r4, #8]
   85e7e:	f8cc 4008 	str.w	r4, [ip, #8]
   85e82:	60cc      	str	r4, [r1, #12]
   85e84:	e696      	b.n	85bb4 <_malloc_r+0xd4>
   85e86:	f045 0701 	orr.w	r7, r5, #1
   85e8a:	f042 0301 	orr.w	r3, r2, #1
   85e8e:	4425      	add	r5, r4
   85e90:	6067      	str	r7, [r4, #4]
   85e92:	4630      	mov	r0, r6
   85e94:	614d      	str	r5, [r1, #20]
   85e96:	610d      	str	r5, [r1, #16]
   85e98:	f8c5 e00c 	str.w	lr, [r5, #12]
   85e9c:	f8c5 e008 	str.w	lr, [r5, #8]
   85ea0:	606b      	str	r3, [r5, #4]
   85ea2:	50aa      	str	r2, [r5, r2]
   85ea4:	3408      	adds	r4, #8
   85ea6:	f000 f9e9 	bl	8627c <__malloc_unlock>
   85eaa:	e6e2      	b.n	85c72 <_malloc_r+0x192>
   85eac:	684a      	ldr	r2, [r1, #4]
   85eae:	e681      	b.n	85bb4 <_malloc_r+0xd4>
   85eb0:	f108 0801 	add.w	r8, r8, #1
   85eb4:	f018 0f03 	tst.w	r8, #3
   85eb8:	f10c 0c08 	add.w	ip, ip, #8
   85ebc:	f47f ae8c 	bne.w	85bd8 <_malloc_r+0xf8>
   85ec0:	e030      	b.n	85f24 <_malloc_r+0x444>
   85ec2:	68dc      	ldr	r4, [r3, #12]
   85ec4:	42a3      	cmp	r3, r4
   85ec6:	bf08      	it	eq
   85ec8:	3002      	addeq	r0, #2
   85eca:	f43f ae40 	beq.w	85b4e <_malloc_r+0x6e>
   85ece:	e6c0      	b.n	85c52 <_malloc_r+0x172>
   85ed0:	460c      	mov	r4, r1
   85ed2:	440b      	add	r3, r1
   85ed4:	685a      	ldr	r2, [r3, #4]
   85ed6:	68c9      	ldr	r1, [r1, #12]
   85ed8:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85edc:	f042 0201 	orr.w	r2, r2, #1
   85ee0:	605a      	str	r2, [r3, #4]
   85ee2:	4630      	mov	r0, r6
   85ee4:	60e9      	str	r1, [r5, #12]
   85ee6:	608d      	str	r5, [r1, #8]
   85ee8:	f000 f9c8 	bl	8627c <__malloc_unlock>
   85eec:	e6c1      	b.n	85c72 <_malloc_r+0x192>
   85eee:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85ef2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85ef6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85efa:	e613      	b.n	85b24 <_malloc_r+0x44>
   85efc:	099a      	lsrs	r2, r3, #6
   85efe:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85f02:	0049      	lsls	r1, r1, #1
   85f04:	3238      	adds	r2, #56	; 0x38
   85f06:	e7a1      	b.n	85e4c <_malloc_r+0x36c>
   85f08:	42bc      	cmp	r4, r7
   85f0a:	4b4a      	ldr	r3, [pc, #296]	; (86034 <_malloc_r+0x554>)
   85f0c:	f43f af00 	beq.w	85d10 <_malloc_r+0x230>
   85f10:	689c      	ldr	r4, [r3, #8]
   85f12:	6862      	ldr	r2, [r4, #4]
   85f14:	f022 0203 	bic.w	r2, r2, #3
   85f18:	e75a      	b.n	85dd0 <_malloc_r+0x2f0>
   85f1a:	f859 3908 	ldr.w	r3, [r9], #-8
   85f1e:	4599      	cmp	r9, r3
   85f20:	f040 8082 	bne.w	86028 <_malloc_r+0x548>
   85f24:	f010 0f03 	tst.w	r0, #3
   85f28:	f100 30ff 	add.w	r0, r0, #4294967295
   85f2c:	d1f5      	bne.n	85f1a <_malloc_r+0x43a>
   85f2e:	687b      	ldr	r3, [r7, #4]
   85f30:	ea23 0304 	bic.w	r3, r3, r4
   85f34:	607b      	str	r3, [r7, #4]
   85f36:	0064      	lsls	r4, r4, #1
   85f38:	429c      	cmp	r4, r3
   85f3a:	f63f aebd 	bhi.w	85cb8 <_malloc_r+0x1d8>
   85f3e:	2c00      	cmp	r4, #0
   85f40:	f43f aeba 	beq.w	85cb8 <_malloc_r+0x1d8>
   85f44:	421c      	tst	r4, r3
   85f46:	4640      	mov	r0, r8
   85f48:	f47f ae42 	bne.w	85bd0 <_malloc_r+0xf0>
   85f4c:	0064      	lsls	r4, r4, #1
   85f4e:	421c      	tst	r4, r3
   85f50:	f100 0004 	add.w	r0, r0, #4
   85f54:	d0fa      	beq.n	85f4c <_malloc_r+0x46c>
   85f56:	e63b      	b.n	85bd0 <_malloc_r+0xf0>
   85f58:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85f5c:	d818      	bhi.n	85f90 <_malloc_r+0x4b0>
   85f5e:	0be8      	lsrs	r0, r5, #15
   85f60:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85f64:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85f68:	3077      	adds	r0, #119	; 0x77
   85f6a:	e5db      	b.n	85b24 <_malloc_r+0x44>
   85f6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85f70:	e6eb      	b.n	85d4a <_malloc_r+0x26a>
   85f72:	2101      	movs	r1, #1
   85f74:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85f78:	1092      	asrs	r2, r2, #2
   85f7a:	fa01 f202 	lsl.w	r2, r1, r2
   85f7e:	431a      	orrs	r2, r3
   85f80:	f8c8 2004 	str.w	r2, [r8, #4]
   85f84:	4661      	mov	r1, ip
   85f86:	e777      	b.n	85e78 <_malloc_r+0x398>
   85f88:	2301      	movs	r3, #1
   85f8a:	f8cb 3004 	str.w	r3, [fp, #4]
   85f8e:	e725      	b.n	85ddc <_malloc_r+0x2fc>
   85f90:	f240 5254 	movw	r2, #1364	; 0x554
   85f94:	4293      	cmp	r3, r2
   85f96:	d820      	bhi.n	85fda <_malloc_r+0x4fa>
   85f98:	0ca8      	lsrs	r0, r5, #18
   85f9a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   85f9e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85fa2:	307c      	adds	r0, #124	; 0x7c
   85fa4:	e5be      	b.n	85b24 <_malloc_r+0x44>
   85fa6:	3210      	adds	r2, #16
   85fa8:	e6a4      	b.n	85cf4 <_malloc_r+0x214>
   85faa:	2a54      	cmp	r2, #84	; 0x54
   85fac:	d826      	bhi.n	85ffc <_malloc_r+0x51c>
   85fae:	0b1a      	lsrs	r2, r3, #12
   85fb0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85fb4:	0049      	lsls	r1, r1, #1
   85fb6:	326e      	adds	r2, #110	; 0x6e
   85fb8:	e748      	b.n	85e4c <_malloc_r+0x36c>
   85fba:	68bc      	ldr	r4, [r7, #8]
   85fbc:	6862      	ldr	r2, [r4, #4]
   85fbe:	f022 0203 	bic.w	r2, r2, #3
   85fc2:	e705      	b.n	85dd0 <_malloc_r+0x2f0>
   85fc4:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85fc8:	2800      	cmp	r0, #0
   85fca:	f47f aea8 	bne.w	85d1e <_malloc_r+0x23e>
   85fce:	4442      	add	r2, r8
   85fd0:	68bb      	ldr	r3, [r7, #8]
   85fd2:	f042 0201 	orr.w	r2, r2, #1
   85fd6:	605a      	str	r2, [r3, #4]
   85fd8:	e6ec      	b.n	85db4 <_malloc_r+0x2d4>
   85fda:	21fe      	movs	r1, #254	; 0xfe
   85fdc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85fe0:	207e      	movs	r0, #126	; 0x7e
   85fe2:	e59f      	b.n	85b24 <_malloc_r+0x44>
   85fe4:	2201      	movs	r2, #1
   85fe6:	f04f 0900 	mov.w	r9, #0
   85fea:	e6c1      	b.n	85d70 <_malloc_r+0x290>
   85fec:	f104 0108 	add.w	r1, r4, #8
   85ff0:	4630      	mov	r0, r6
   85ff2:	f7ff fa5b 	bl	854ac <_free_r>
   85ff6:	f8d9 1000 	ldr.w	r1, [r9]
   85ffa:	e6db      	b.n	85db4 <_malloc_r+0x2d4>
   85ffc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86000:	d805      	bhi.n	8600e <_malloc_r+0x52e>
   86002:	0bda      	lsrs	r2, r3, #15
   86004:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86008:	0049      	lsls	r1, r1, #1
   8600a:	3277      	adds	r2, #119	; 0x77
   8600c:	e71e      	b.n	85e4c <_malloc_r+0x36c>
   8600e:	f240 5154 	movw	r1, #1364	; 0x554
   86012:	428a      	cmp	r2, r1
   86014:	d805      	bhi.n	86022 <_malloc_r+0x542>
   86016:	0c9a      	lsrs	r2, r3, #18
   86018:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8601c:	0049      	lsls	r1, r1, #1
   8601e:	327c      	adds	r2, #124	; 0x7c
   86020:	e714      	b.n	85e4c <_malloc_r+0x36c>
   86022:	21fe      	movs	r1, #254	; 0xfe
   86024:	227e      	movs	r2, #126	; 0x7e
   86026:	e711      	b.n	85e4c <_malloc_r+0x36c>
   86028:	687b      	ldr	r3, [r7, #4]
   8602a:	e784      	b.n	85f36 <_malloc_r+0x456>
   8602c:	08e8      	lsrs	r0, r5, #3
   8602e:	1c43      	adds	r3, r0, #1
   86030:	005b      	lsls	r3, r3, #1
   86032:	e605      	b.n	85c40 <_malloc_r+0x160>
   86034:	20070858 	.word	0x20070858

00086038 <memchr>:
   86038:	0783      	lsls	r3, r0, #30
   8603a:	b470      	push	{r4, r5, r6}
   8603c:	b2cd      	uxtb	r5, r1
   8603e:	d03d      	beq.n	860bc <memchr+0x84>
   86040:	1e53      	subs	r3, r2, #1
   86042:	b302      	cbz	r2, 86086 <memchr+0x4e>
   86044:	7802      	ldrb	r2, [r0, #0]
   86046:	42aa      	cmp	r2, r5
   86048:	d01e      	beq.n	86088 <memchr+0x50>
   8604a:	1c42      	adds	r2, r0, #1
   8604c:	e004      	b.n	86058 <memchr+0x20>
   8604e:	b1d3      	cbz	r3, 86086 <memchr+0x4e>
   86050:	7804      	ldrb	r4, [r0, #0]
   86052:	3b01      	subs	r3, #1
   86054:	42ac      	cmp	r4, r5
   86056:	d017      	beq.n	86088 <memchr+0x50>
   86058:	f012 0f03 	tst.w	r2, #3
   8605c:	4610      	mov	r0, r2
   8605e:	f102 0201 	add.w	r2, r2, #1
   86062:	d1f4      	bne.n	8604e <memchr+0x16>
   86064:	2b03      	cmp	r3, #3
   86066:	d811      	bhi.n	8608c <memchr+0x54>
   86068:	b353      	cbz	r3, 860c0 <memchr+0x88>
   8606a:	7802      	ldrb	r2, [r0, #0]
   8606c:	42aa      	cmp	r2, r5
   8606e:	d00b      	beq.n	86088 <memchr+0x50>
   86070:	4403      	add	r3, r0
   86072:	1c42      	adds	r2, r0, #1
   86074:	e002      	b.n	8607c <memchr+0x44>
   86076:	7801      	ldrb	r1, [r0, #0]
   86078:	42a9      	cmp	r1, r5
   8607a:	d005      	beq.n	86088 <memchr+0x50>
   8607c:	4293      	cmp	r3, r2
   8607e:	4610      	mov	r0, r2
   86080:	f102 0201 	add.w	r2, r2, #1
   86084:	d1f7      	bne.n	86076 <memchr+0x3e>
   86086:	2000      	movs	r0, #0
   86088:	bc70      	pop	{r4, r5, r6}
   8608a:	4770      	bx	lr
   8608c:	4604      	mov	r4, r0
   8608e:	020e      	lsls	r6, r1, #8
   86090:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   86094:	432e      	orrs	r6, r5
   86096:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   8609a:	6822      	ldr	r2, [r4, #0]
   8609c:	4620      	mov	r0, r4
   8609e:	4072      	eors	r2, r6
   860a0:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   860a4:	ea21 0202 	bic.w	r2, r1, r2
   860a8:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   860ac:	f104 0404 	add.w	r4, r4, #4
   860b0:	d1db      	bne.n	8606a <memchr+0x32>
   860b2:	3b04      	subs	r3, #4
   860b4:	2b03      	cmp	r3, #3
   860b6:	4620      	mov	r0, r4
   860b8:	d8ef      	bhi.n	8609a <memchr+0x62>
   860ba:	e7d5      	b.n	86068 <memchr+0x30>
   860bc:	4613      	mov	r3, r2
   860be:	e7d1      	b.n	86064 <memchr+0x2c>
   860c0:	4618      	mov	r0, r3
   860c2:	e7e1      	b.n	86088 <memchr+0x50>

000860c4 <memcpy>:
   860c4:	4684      	mov	ip, r0
   860c6:	ea41 0300 	orr.w	r3, r1, r0
   860ca:	f013 0303 	ands.w	r3, r3, #3
   860ce:	d149      	bne.n	86164 <memcpy+0xa0>
   860d0:	3a40      	subs	r2, #64	; 0x40
   860d2:	d323      	bcc.n	8611c <memcpy+0x58>
   860d4:	680b      	ldr	r3, [r1, #0]
   860d6:	6003      	str	r3, [r0, #0]
   860d8:	684b      	ldr	r3, [r1, #4]
   860da:	6043      	str	r3, [r0, #4]
   860dc:	688b      	ldr	r3, [r1, #8]
   860de:	6083      	str	r3, [r0, #8]
   860e0:	68cb      	ldr	r3, [r1, #12]
   860e2:	60c3      	str	r3, [r0, #12]
   860e4:	690b      	ldr	r3, [r1, #16]
   860e6:	6103      	str	r3, [r0, #16]
   860e8:	694b      	ldr	r3, [r1, #20]
   860ea:	6143      	str	r3, [r0, #20]
   860ec:	698b      	ldr	r3, [r1, #24]
   860ee:	6183      	str	r3, [r0, #24]
   860f0:	69cb      	ldr	r3, [r1, #28]
   860f2:	61c3      	str	r3, [r0, #28]
   860f4:	6a0b      	ldr	r3, [r1, #32]
   860f6:	6203      	str	r3, [r0, #32]
   860f8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   860fa:	6243      	str	r3, [r0, #36]	; 0x24
   860fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   860fe:	6283      	str	r3, [r0, #40]	; 0x28
   86100:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86102:	62c3      	str	r3, [r0, #44]	; 0x2c
   86104:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86106:	6303      	str	r3, [r0, #48]	; 0x30
   86108:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8610a:	6343      	str	r3, [r0, #52]	; 0x34
   8610c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8610e:	6383      	str	r3, [r0, #56]	; 0x38
   86110:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86112:	63c3      	str	r3, [r0, #60]	; 0x3c
   86114:	3040      	adds	r0, #64	; 0x40
   86116:	3140      	adds	r1, #64	; 0x40
   86118:	3a40      	subs	r2, #64	; 0x40
   8611a:	d2db      	bcs.n	860d4 <memcpy+0x10>
   8611c:	3230      	adds	r2, #48	; 0x30
   8611e:	d30b      	bcc.n	86138 <memcpy+0x74>
   86120:	680b      	ldr	r3, [r1, #0]
   86122:	6003      	str	r3, [r0, #0]
   86124:	684b      	ldr	r3, [r1, #4]
   86126:	6043      	str	r3, [r0, #4]
   86128:	688b      	ldr	r3, [r1, #8]
   8612a:	6083      	str	r3, [r0, #8]
   8612c:	68cb      	ldr	r3, [r1, #12]
   8612e:	60c3      	str	r3, [r0, #12]
   86130:	3010      	adds	r0, #16
   86132:	3110      	adds	r1, #16
   86134:	3a10      	subs	r2, #16
   86136:	d2f3      	bcs.n	86120 <memcpy+0x5c>
   86138:	320c      	adds	r2, #12
   8613a:	d305      	bcc.n	86148 <memcpy+0x84>
   8613c:	f851 3b04 	ldr.w	r3, [r1], #4
   86140:	f840 3b04 	str.w	r3, [r0], #4
   86144:	3a04      	subs	r2, #4
   86146:	d2f9      	bcs.n	8613c <memcpy+0x78>
   86148:	3204      	adds	r2, #4
   8614a:	d008      	beq.n	8615e <memcpy+0x9a>
   8614c:	07d2      	lsls	r2, r2, #31
   8614e:	bf1c      	itt	ne
   86150:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86154:	f800 3b01 	strbne.w	r3, [r0], #1
   86158:	d301      	bcc.n	8615e <memcpy+0x9a>
   8615a:	880b      	ldrh	r3, [r1, #0]
   8615c:	8003      	strh	r3, [r0, #0]
   8615e:	4660      	mov	r0, ip
   86160:	4770      	bx	lr
   86162:	bf00      	nop
   86164:	2a08      	cmp	r2, #8
   86166:	d313      	bcc.n	86190 <memcpy+0xcc>
   86168:	078b      	lsls	r3, r1, #30
   8616a:	d0b1      	beq.n	860d0 <memcpy+0xc>
   8616c:	f010 0303 	ands.w	r3, r0, #3
   86170:	d0ae      	beq.n	860d0 <memcpy+0xc>
   86172:	f1c3 0304 	rsb	r3, r3, #4
   86176:	1ad2      	subs	r2, r2, r3
   86178:	07db      	lsls	r3, r3, #31
   8617a:	bf1c      	itt	ne
   8617c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86180:	f800 3b01 	strbne.w	r3, [r0], #1
   86184:	d3a4      	bcc.n	860d0 <memcpy+0xc>
   86186:	f831 3b02 	ldrh.w	r3, [r1], #2
   8618a:	f820 3b02 	strh.w	r3, [r0], #2
   8618e:	e79f      	b.n	860d0 <memcpy+0xc>
   86190:	3a04      	subs	r2, #4
   86192:	d3d9      	bcc.n	86148 <memcpy+0x84>
   86194:	3a01      	subs	r2, #1
   86196:	f811 3b01 	ldrb.w	r3, [r1], #1
   8619a:	f800 3b01 	strb.w	r3, [r0], #1
   8619e:	d2f9      	bcs.n	86194 <memcpy+0xd0>
   861a0:	780b      	ldrb	r3, [r1, #0]
   861a2:	7003      	strb	r3, [r0, #0]
   861a4:	784b      	ldrb	r3, [r1, #1]
   861a6:	7043      	strb	r3, [r0, #1]
   861a8:	788b      	ldrb	r3, [r1, #2]
   861aa:	7083      	strb	r3, [r0, #2]
   861ac:	4660      	mov	r0, ip
   861ae:	4770      	bx	lr

000861b0 <memmove>:
   861b0:	4288      	cmp	r0, r1
   861b2:	b5f0      	push	{r4, r5, r6, r7, lr}
   861b4:	d90d      	bls.n	861d2 <memmove+0x22>
   861b6:	188b      	adds	r3, r1, r2
   861b8:	4298      	cmp	r0, r3
   861ba:	d20a      	bcs.n	861d2 <memmove+0x22>
   861bc:	1881      	adds	r1, r0, r2
   861be:	2a00      	cmp	r2, #0
   861c0:	d051      	beq.n	86266 <memmove+0xb6>
   861c2:	1a9a      	subs	r2, r3, r2
   861c4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   861c8:	4293      	cmp	r3, r2
   861ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
   861ce:	d1f9      	bne.n	861c4 <memmove+0x14>
   861d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   861d2:	2a0f      	cmp	r2, #15
   861d4:	d948      	bls.n	86268 <memmove+0xb8>
   861d6:	ea41 0300 	orr.w	r3, r1, r0
   861da:	079b      	lsls	r3, r3, #30
   861dc:	d146      	bne.n	8626c <memmove+0xbc>
   861de:	4615      	mov	r5, r2
   861e0:	f100 0410 	add.w	r4, r0, #16
   861e4:	f101 0310 	add.w	r3, r1, #16
   861e8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   861ec:	3d10      	subs	r5, #16
   861ee:	f844 6c10 	str.w	r6, [r4, #-16]
   861f2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   861f6:	2d0f      	cmp	r5, #15
   861f8:	f844 6c0c 	str.w	r6, [r4, #-12]
   861fc:	f853 6c08 	ldr.w	r6, [r3, #-8]
   86200:	f104 0410 	add.w	r4, r4, #16
   86204:	f844 6c18 	str.w	r6, [r4, #-24]
   86208:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8620c:	f103 0310 	add.w	r3, r3, #16
   86210:	f844 6c14 	str.w	r6, [r4, #-20]
   86214:	d8e8      	bhi.n	861e8 <memmove+0x38>
   86216:	f1a2 0310 	sub.w	r3, r2, #16
   8621a:	f023 030f 	bic.w	r3, r3, #15
   8621e:	f002 0e0f 	and.w	lr, r2, #15
   86222:	3310      	adds	r3, #16
   86224:	f1be 0f03 	cmp.w	lr, #3
   86228:	4419      	add	r1, r3
   8622a:	4403      	add	r3, r0
   8622c:	d921      	bls.n	86272 <memmove+0xc2>
   8622e:	460e      	mov	r6, r1
   86230:	4674      	mov	r4, lr
   86232:	1f1d      	subs	r5, r3, #4
   86234:	f856 7b04 	ldr.w	r7, [r6], #4
   86238:	3c04      	subs	r4, #4
   8623a:	2c03      	cmp	r4, #3
   8623c:	f845 7f04 	str.w	r7, [r5, #4]!
   86240:	d8f8      	bhi.n	86234 <memmove+0x84>
   86242:	f1ae 0404 	sub.w	r4, lr, #4
   86246:	f024 0403 	bic.w	r4, r4, #3
   8624a:	3404      	adds	r4, #4
   8624c:	4423      	add	r3, r4
   8624e:	4421      	add	r1, r4
   86250:	f002 0203 	and.w	r2, r2, #3
   86254:	b162      	cbz	r2, 86270 <memmove+0xc0>
   86256:	3b01      	subs	r3, #1
   86258:	440a      	add	r2, r1
   8625a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8625e:	428a      	cmp	r2, r1
   86260:	f803 4f01 	strb.w	r4, [r3, #1]!
   86264:	d1f9      	bne.n	8625a <memmove+0xaa>
   86266:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86268:	4603      	mov	r3, r0
   8626a:	e7f3      	b.n	86254 <memmove+0xa4>
   8626c:	4603      	mov	r3, r0
   8626e:	e7f2      	b.n	86256 <memmove+0xa6>
   86270:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86272:	4672      	mov	r2, lr
   86274:	e7ee      	b.n	86254 <memmove+0xa4>
   86276:	bf00      	nop

00086278 <__malloc_lock>:
   86278:	4770      	bx	lr
   8627a:	bf00      	nop

0008627c <__malloc_unlock>:
   8627c:	4770      	bx	lr
   8627e:	bf00      	nop

00086280 <_realloc_r>:
   86280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86284:	4617      	mov	r7, r2
   86286:	b083      	sub	sp, #12
   86288:	2900      	cmp	r1, #0
   8628a:	f000 808f 	beq.w	863ac <_realloc_r+0x12c>
   8628e:	460d      	mov	r5, r1
   86290:	4681      	mov	r9, r0
   86292:	f107 040b 	add.w	r4, r7, #11
   86296:	f7ff ffef 	bl	86278 <__malloc_lock>
   8629a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   8629e:	2c16      	cmp	r4, #22
   862a0:	f02e 0603 	bic.w	r6, lr, #3
   862a4:	f1a5 0808 	sub.w	r8, r5, #8
   862a8:	d83c      	bhi.n	86324 <_realloc_r+0xa4>
   862aa:	2210      	movs	r2, #16
   862ac:	4614      	mov	r4, r2
   862ae:	42a7      	cmp	r7, r4
   862b0:	d83d      	bhi.n	8632e <_realloc_r+0xae>
   862b2:	4296      	cmp	r6, r2
   862b4:	da42      	bge.n	8633c <_realloc_r+0xbc>
   862b6:	4bc6      	ldr	r3, [pc, #792]	; (865d0 <_realloc_r+0x350>)
   862b8:	eb08 0006 	add.w	r0, r8, r6
   862bc:	6899      	ldr	r1, [r3, #8]
   862be:	4288      	cmp	r0, r1
   862c0:	6841      	ldr	r1, [r0, #4]
   862c2:	f000 80d7 	beq.w	86474 <_realloc_r+0x1f4>
   862c6:	f021 0301 	bic.w	r3, r1, #1
   862ca:	4403      	add	r3, r0
   862cc:	685b      	ldr	r3, [r3, #4]
   862ce:	07db      	lsls	r3, r3, #31
   862d0:	d54c      	bpl.n	8636c <_realloc_r+0xec>
   862d2:	f01e 0f01 	tst.w	lr, #1
   862d6:	f000 809d 	beq.w	86414 <_realloc_r+0x194>
   862da:	4639      	mov	r1, r7
   862dc:	4648      	mov	r0, r9
   862de:	f7ff fbff 	bl	85ae0 <_malloc_r>
   862e2:	4607      	mov	r7, r0
   862e4:	2800      	cmp	r0, #0
   862e6:	d03a      	beq.n	8635e <_realloc_r+0xde>
   862e8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   862ec:	f1a0 0208 	sub.w	r2, r0, #8
   862f0:	f023 0301 	bic.w	r3, r3, #1
   862f4:	4443      	add	r3, r8
   862f6:	429a      	cmp	r2, r3
   862f8:	f000 813e 	beq.w	86578 <_realloc_r+0x2f8>
   862fc:	1f32      	subs	r2, r6, #4
   862fe:	2a24      	cmp	r2, #36	; 0x24
   86300:	f200 812b 	bhi.w	8655a <_realloc_r+0x2da>
   86304:	2a13      	cmp	r2, #19
   86306:	f200 80ff 	bhi.w	86508 <_realloc_r+0x288>
   8630a:	4603      	mov	r3, r0
   8630c:	462a      	mov	r2, r5
   8630e:	6811      	ldr	r1, [r2, #0]
   86310:	6019      	str	r1, [r3, #0]
   86312:	6851      	ldr	r1, [r2, #4]
   86314:	6059      	str	r1, [r3, #4]
   86316:	6892      	ldr	r2, [r2, #8]
   86318:	609a      	str	r2, [r3, #8]
   8631a:	4629      	mov	r1, r5
   8631c:	4648      	mov	r0, r9
   8631e:	f7ff f8c5 	bl	854ac <_free_r>
   86322:	e01c      	b.n	8635e <_realloc_r+0xde>
   86324:	f024 0407 	bic.w	r4, r4, #7
   86328:	2c00      	cmp	r4, #0
   8632a:	4622      	mov	r2, r4
   8632c:	dabf      	bge.n	862ae <_realloc_r+0x2e>
   8632e:	230c      	movs	r3, #12
   86330:	2000      	movs	r0, #0
   86332:	f8c9 3000 	str.w	r3, [r9]
   86336:	b003      	add	sp, #12
   86338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8633c:	462f      	mov	r7, r5
   8633e:	1b33      	subs	r3, r6, r4
   86340:	2b0f      	cmp	r3, #15
   86342:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86346:	d81d      	bhi.n	86384 <_realloc_r+0x104>
   86348:	f002 0201 	and.w	r2, r2, #1
   8634c:	4332      	orrs	r2, r6
   8634e:	eb08 0106 	add.w	r1, r8, r6
   86352:	f8c8 2004 	str.w	r2, [r8, #4]
   86356:	684b      	ldr	r3, [r1, #4]
   86358:	f043 0301 	orr.w	r3, r3, #1
   8635c:	604b      	str	r3, [r1, #4]
   8635e:	4648      	mov	r0, r9
   86360:	f7ff ff8c 	bl	8627c <__malloc_unlock>
   86364:	4638      	mov	r0, r7
   86366:	b003      	add	sp, #12
   86368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8636c:	f021 0103 	bic.w	r1, r1, #3
   86370:	4431      	add	r1, r6
   86372:	4291      	cmp	r1, r2
   86374:	db20      	blt.n	863b8 <_realloc_r+0x138>
   86376:	68c3      	ldr	r3, [r0, #12]
   86378:	6882      	ldr	r2, [r0, #8]
   8637a:	462f      	mov	r7, r5
   8637c:	60d3      	str	r3, [r2, #12]
   8637e:	460e      	mov	r6, r1
   86380:	609a      	str	r2, [r3, #8]
   86382:	e7dc      	b.n	8633e <_realloc_r+0xbe>
   86384:	f002 0201 	and.w	r2, r2, #1
   86388:	eb08 0104 	add.w	r1, r8, r4
   8638c:	4314      	orrs	r4, r2
   8638e:	f043 0201 	orr.w	r2, r3, #1
   86392:	f8c8 4004 	str.w	r4, [r8, #4]
   86396:	440b      	add	r3, r1
   86398:	604a      	str	r2, [r1, #4]
   8639a:	685a      	ldr	r2, [r3, #4]
   8639c:	3108      	adds	r1, #8
   8639e:	f042 0201 	orr.w	r2, r2, #1
   863a2:	605a      	str	r2, [r3, #4]
   863a4:	4648      	mov	r0, r9
   863a6:	f7ff f881 	bl	854ac <_free_r>
   863aa:	e7d8      	b.n	8635e <_realloc_r+0xde>
   863ac:	4611      	mov	r1, r2
   863ae:	b003      	add	sp, #12
   863b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863b4:	f7ff bb94 	b.w	85ae0 <_malloc_r>
   863b8:	f01e 0f01 	tst.w	lr, #1
   863bc:	d18d      	bne.n	862da <_realloc_r+0x5a>
   863be:	f855 3c08 	ldr.w	r3, [r5, #-8]
   863c2:	ebc3 0a08 	rsb	sl, r3, r8
   863c6:	f8da 3004 	ldr.w	r3, [sl, #4]
   863ca:	f023 0c03 	bic.w	ip, r3, #3
   863ce:	eb01 0e0c 	add.w	lr, r1, ip
   863d2:	4596      	cmp	lr, r2
   863d4:	db26      	blt.n	86424 <_realloc_r+0x1a4>
   863d6:	4657      	mov	r7, sl
   863d8:	68c3      	ldr	r3, [r0, #12]
   863da:	6881      	ldr	r1, [r0, #8]
   863dc:	1f32      	subs	r2, r6, #4
   863de:	60cb      	str	r3, [r1, #12]
   863e0:	6099      	str	r1, [r3, #8]
   863e2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   863e6:	f8da 300c 	ldr.w	r3, [sl, #12]
   863ea:	2a24      	cmp	r2, #36	; 0x24
   863ec:	60cb      	str	r3, [r1, #12]
   863ee:	6099      	str	r1, [r3, #8]
   863f0:	f200 80c9 	bhi.w	86586 <_realloc_r+0x306>
   863f4:	2a13      	cmp	r2, #19
   863f6:	f240 8092 	bls.w	8651e <_realloc_r+0x29e>
   863fa:	682b      	ldr	r3, [r5, #0]
   863fc:	2a1b      	cmp	r2, #27
   863fe:	f8ca 3008 	str.w	r3, [sl, #8]
   86402:	686b      	ldr	r3, [r5, #4]
   86404:	f8ca 300c 	str.w	r3, [sl, #12]
   86408:	f200 80cd 	bhi.w	865a6 <_realloc_r+0x326>
   8640c:	3508      	adds	r5, #8
   8640e:	f10a 0310 	add.w	r3, sl, #16
   86412:	e085      	b.n	86520 <_realloc_r+0x2a0>
   86414:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86418:	ebc3 0a08 	rsb	sl, r3, r8
   8641c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86420:	f023 0c03 	bic.w	ip, r3, #3
   86424:	eb06 030c 	add.w	r3, r6, ip
   86428:	4293      	cmp	r3, r2
   8642a:	f6ff af56 	blt.w	862da <_realloc_r+0x5a>
   8642e:	4657      	mov	r7, sl
   86430:	f8da 100c 	ldr.w	r1, [sl, #12]
   86434:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86438:	1f32      	subs	r2, r6, #4
   8643a:	2a24      	cmp	r2, #36	; 0x24
   8643c:	60c1      	str	r1, [r0, #12]
   8643e:	6088      	str	r0, [r1, #8]
   86440:	f200 80aa 	bhi.w	86598 <_realloc_r+0x318>
   86444:	2a13      	cmp	r2, #19
   86446:	f240 80a5 	bls.w	86594 <_realloc_r+0x314>
   8644a:	6829      	ldr	r1, [r5, #0]
   8644c:	2a1b      	cmp	r2, #27
   8644e:	f8ca 1008 	str.w	r1, [sl, #8]
   86452:	6869      	ldr	r1, [r5, #4]
   86454:	f8ca 100c 	str.w	r1, [sl, #12]
   86458:	f200 80bc 	bhi.w	865d4 <_realloc_r+0x354>
   8645c:	3508      	adds	r5, #8
   8645e:	f10a 0210 	add.w	r2, sl, #16
   86462:	6829      	ldr	r1, [r5, #0]
   86464:	461e      	mov	r6, r3
   86466:	6011      	str	r1, [r2, #0]
   86468:	6869      	ldr	r1, [r5, #4]
   8646a:	46d0      	mov	r8, sl
   8646c:	6051      	str	r1, [r2, #4]
   8646e:	68ab      	ldr	r3, [r5, #8]
   86470:	6093      	str	r3, [r2, #8]
   86472:	e764      	b.n	8633e <_realloc_r+0xbe>
   86474:	f021 0b03 	bic.w	fp, r1, #3
   86478:	f104 0010 	add.w	r0, r4, #16
   8647c:	44b3      	add	fp, r6
   8647e:	4583      	cmp	fp, r0
   86480:	da57      	bge.n	86532 <_realloc_r+0x2b2>
   86482:	f01e 0f01 	tst.w	lr, #1
   86486:	f47f af28 	bne.w	862da <_realloc_r+0x5a>
   8648a:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8648e:	ebc1 0a08 	rsb	sl, r1, r8
   86492:	f8da 1004 	ldr.w	r1, [sl, #4]
   86496:	f021 0c03 	bic.w	ip, r1, #3
   8649a:	44e3      	add	fp, ip
   8649c:	4558      	cmp	r0, fp
   8649e:	dcc1      	bgt.n	86424 <_realloc_r+0x1a4>
   864a0:	4657      	mov	r7, sl
   864a2:	f8da 100c 	ldr.w	r1, [sl, #12]
   864a6:	f857 0f08 	ldr.w	r0, [r7, #8]!
   864aa:	1f32      	subs	r2, r6, #4
   864ac:	2a24      	cmp	r2, #36	; 0x24
   864ae:	60c1      	str	r1, [r0, #12]
   864b0:	6088      	str	r0, [r1, #8]
   864b2:	f200 80b1 	bhi.w	86618 <_realloc_r+0x398>
   864b6:	2a13      	cmp	r2, #19
   864b8:	f240 80a2 	bls.w	86600 <_realloc_r+0x380>
   864bc:	6829      	ldr	r1, [r5, #0]
   864be:	2a1b      	cmp	r2, #27
   864c0:	f8ca 1008 	str.w	r1, [sl, #8]
   864c4:	6869      	ldr	r1, [r5, #4]
   864c6:	f8ca 100c 	str.w	r1, [sl, #12]
   864ca:	f200 80ac 	bhi.w	86626 <_realloc_r+0x3a6>
   864ce:	3508      	adds	r5, #8
   864d0:	f10a 0210 	add.w	r2, sl, #16
   864d4:	6829      	ldr	r1, [r5, #0]
   864d6:	6011      	str	r1, [r2, #0]
   864d8:	6869      	ldr	r1, [r5, #4]
   864da:	6051      	str	r1, [r2, #4]
   864dc:	68a9      	ldr	r1, [r5, #8]
   864de:	6091      	str	r1, [r2, #8]
   864e0:	ebc4 020b 	rsb	r2, r4, fp
   864e4:	eb0a 0104 	add.w	r1, sl, r4
   864e8:	f042 0201 	orr.w	r2, r2, #1
   864ec:	6099      	str	r1, [r3, #8]
   864ee:	604a      	str	r2, [r1, #4]
   864f0:	f8da 3004 	ldr.w	r3, [sl, #4]
   864f4:	4648      	mov	r0, r9
   864f6:	f003 0301 	and.w	r3, r3, #1
   864fa:	431c      	orrs	r4, r3
   864fc:	f8ca 4004 	str.w	r4, [sl, #4]
   86500:	f7ff febc 	bl	8627c <__malloc_unlock>
   86504:	4638      	mov	r0, r7
   86506:	e72e      	b.n	86366 <_realloc_r+0xe6>
   86508:	682b      	ldr	r3, [r5, #0]
   8650a:	2a1b      	cmp	r2, #27
   8650c:	6003      	str	r3, [r0, #0]
   8650e:	686b      	ldr	r3, [r5, #4]
   86510:	6043      	str	r3, [r0, #4]
   86512:	d826      	bhi.n	86562 <_realloc_r+0x2e2>
   86514:	f100 0308 	add.w	r3, r0, #8
   86518:	f105 0208 	add.w	r2, r5, #8
   8651c:	e6f7      	b.n	8630e <_realloc_r+0x8e>
   8651e:	463b      	mov	r3, r7
   86520:	682a      	ldr	r2, [r5, #0]
   86522:	4676      	mov	r6, lr
   86524:	601a      	str	r2, [r3, #0]
   86526:	686a      	ldr	r2, [r5, #4]
   86528:	46d0      	mov	r8, sl
   8652a:	605a      	str	r2, [r3, #4]
   8652c:	68aa      	ldr	r2, [r5, #8]
   8652e:	609a      	str	r2, [r3, #8]
   86530:	e705      	b.n	8633e <_realloc_r+0xbe>
   86532:	ebc4 0b0b 	rsb	fp, r4, fp
   86536:	eb08 0104 	add.w	r1, r8, r4
   8653a:	f04b 0201 	orr.w	r2, fp, #1
   8653e:	6099      	str	r1, [r3, #8]
   86540:	604a      	str	r2, [r1, #4]
   86542:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86546:	4648      	mov	r0, r9
   86548:	f003 0301 	and.w	r3, r3, #1
   8654c:	431c      	orrs	r4, r3
   8654e:	f845 4c04 	str.w	r4, [r5, #-4]
   86552:	f7ff fe93 	bl	8627c <__malloc_unlock>
   86556:	4628      	mov	r0, r5
   86558:	e705      	b.n	86366 <_realloc_r+0xe6>
   8655a:	4629      	mov	r1, r5
   8655c:	f7ff fe28 	bl	861b0 <memmove>
   86560:	e6db      	b.n	8631a <_realloc_r+0x9a>
   86562:	68ab      	ldr	r3, [r5, #8]
   86564:	2a24      	cmp	r2, #36	; 0x24
   86566:	6083      	str	r3, [r0, #8]
   86568:	68eb      	ldr	r3, [r5, #12]
   8656a:	60c3      	str	r3, [r0, #12]
   8656c:	d027      	beq.n	865be <_realloc_r+0x33e>
   8656e:	f100 0310 	add.w	r3, r0, #16
   86572:	f105 0210 	add.w	r2, r5, #16
   86576:	e6ca      	b.n	8630e <_realloc_r+0x8e>
   86578:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8657c:	462f      	mov	r7, r5
   8657e:	f023 0303 	bic.w	r3, r3, #3
   86582:	441e      	add	r6, r3
   86584:	e6db      	b.n	8633e <_realloc_r+0xbe>
   86586:	4629      	mov	r1, r5
   86588:	4638      	mov	r0, r7
   8658a:	4676      	mov	r6, lr
   8658c:	46d0      	mov	r8, sl
   8658e:	f7ff fe0f 	bl	861b0 <memmove>
   86592:	e6d4      	b.n	8633e <_realloc_r+0xbe>
   86594:	463a      	mov	r2, r7
   86596:	e764      	b.n	86462 <_realloc_r+0x1e2>
   86598:	4629      	mov	r1, r5
   8659a:	4638      	mov	r0, r7
   8659c:	461e      	mov	r6, r3
   8659e:	46d0      	mov	r8, sl
   865a0:	f7ff fe06 	bl	861b0 <memmove>
   865a4:	e6cb      	b.n	8633e <_realloc_r+0xbe>
   865a6:	68ab      	ldr	r3, [r5, #8]
   865a8:	2a24      	cmp	r2, #36	; 0x24
   865aa:	f8ca 3010 	str.w	r3, [sl, #16]
   865ae:	68eb      	ldr	r3, [r5, #12]
   865b0:	f8ca 3014 	str.w	r3, [sl, #20]
   865b4:	d01a      	beq.n	865ec <_realloc_r+0x36c>
   865b6:	3510      	adds	r5, #16
   865b8:	f10a 0318 	add.w	r3, sl, #24
   865bc:	e7b0      	b.n	86520 <_realloc_r+0x2a0>
   865be:	692a      	ldr	r2, [r5, #16]
   865c0:	f100 0318 	add.w	r3, r0, #24
   865c4:	6102      	str	r2, [r0, #16]
   865c6:	6969      	ldr	r1, [r5, #20]
   865c8:	f105 0218 	add.w	r2, r5, #24
   865cc:	6141      	str	r1, [r0, #20]
   865ce:	e69e      	b.n	8630e <_realloc_r+0x8e>
   865d0:	20070858 	.word	0x20070858
   865d4:	68a9      	ldr	r1, [r5, #8]
   865d6:	2a24      	cmp	r2, #36	; 0x24
   865d8:	f8ca 1010 	str.w	r1, [sl, #16]
   865dc:	68e9      	ldr	r1, [r5, #12]
   865de:	f8ca 1014 	str.w	r1, [sl, #20]
   865e2:	d00f      	beq.n	86604 <_realloc_r+0x384>
   865e4:	3510      	adds	r5, #16
   865e6:	f10a 0218 	add.w	r2, sl, #24
   865ea:	e73a      	b.n	86462 <_realloc_r+0x1e2>
   865ec:	692a      	ldr	r2, [r5, #16]
   865ee:	f10a 0320 	add.w	r3, sl, #32
   865f2:	f8ca 2018 	str.w	r2, [sl, #24]
   865f6:	696a      	ldr	r2, [r5, #20]
   865f8:	3518      	adds	r5, #24
   865fa:	f8ca 201c 	str.w	r2, [sl, #28]
   865fe:	e78f      	b.n	86520 <_realloc_r+0x2a0>
   86600:	463a      	mov	r2, r7
   86602:	e767      	b.n	864d4 <_realloc_r+0x254>
   86604:	6929      	ldr	r1, [r5, #16]
   86606:	f10a 0220 	add.w	r2, sl, #32
   8660a:	f8ca 1018 	str.w	r1, [sl, #24]
   8660e:	6969      	ldr	r1, [r5, #20]
   86610:	3518      	adds	r5, #24
   86612:	f8ca 101c 	str.w	r1, [sl, #28]
   86616:	e724      	b.n	86462 <_realloc_r+0x1e2>
   86618:	4629      	mov	r1, r5
   8661a:	4638      	mov	r0, r7
   8661c:	9301      	str	r3, [sp, #4]
   8661e:	f7ff fdc7 	bl	861b0 <memmove>
   86622:	9b01      	ldr	r3, [sp, #4]
   86624:	e75c      	b.n	864e0 <_realloc_r+0x260>
   86626:	68a9      	ldr	r1, [r5, #8]
   86628:	2a24      	cmp	r2, #36	; 0x24
   8662a:	f8ca 1010 	str.w	r1, [sl, #16]
   8662e:	68e9      	ldr	r1, [r5, #12]
   86630:	f8ca 1014 	str.w	r1, [sl, #20]
   86634:	d003      	beq.n	8663e <_realloc_r+0x3be>
   86636:	3510      	adds	r5, #16
   86638:	f10a 0218 	add.w	r2, sl, #24
   8663c:	e74a      	b.n	864d4 <_realloc_r+0x254>
   8663e:	6929      	ldr	r1, [r5, #16]
   86640:	f10a 0220 	add.w	r2, sl, #32
   86644:	f8ca 1018 	str.w	r1, [sl, #24]
   86648:	6969      	ldr	r1, [r5, #20]
   8664a:	3518      	adds	r5, #24
   8664c:	f8ca 101c 	str.w	r1, [sl, #28]
   86650:	e740      	b.n	864d4 <_realloc_r+0x254>
   86652:	bf00      	nop

00086654 <_sbrk_r>:
   86654:	b538      	push	{r3, r4, r5, lr}
   86656:	4c07      	ldr	r4, [pc, #28]	; (86674 <_sbrk_r+0x20>)
   86658:	2300      	movs	r3, #0
   8665a:	4605      	mov	r5, r0
   8665c:	4608      	mov	r0, r1
   8665e:	6023      	str	r3, [r4, #0]
   86660:	f7fd f9ba 	bl	839d8 <_sbrk>
   86664:	1c43      	adds	r3, r0, #1
   86666:	d000      	beq.n	8666a <_sbrk_r+0x16>
   86668:	bd38      	pop	{r3, r4, r5, pc}
   8666a:	6823      	ldr	r3, [r4, #0]
   8666c:	2b00      	cmp	r3, #0
   8666e:	d0fb      	beq.n	86668 <_sbrk_r+0x14>
   86670:	602b      	str	r3, [r5, #0]
   86672:	bd38      	pop	{r3, r4, r5, pc}
   86674:	20071258 	.word	0x20071258

00086678 <__sread>:
   86678:	b510      	push	{r4, lr}
   8667a:	460c      	mov	r4, r1
   8667c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86680:	f000 f9c4 	bl	86a0c <_read_r>
   86684:	2800      	cmp	r0, #0
   86686:	db03      	blt.n	86690 <__sread+0x18>
   86688:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8668a:	4403      	add	r3, r0
   8668c:	6523      	str	r3, [r4, #80]	; 0x50
   8668e:	bd10      	pop	{r4, pc}
   86690:	89a3      	ldrh	r3, [r4, #12]
   86692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86696:	81a3      	strh	r3, [r4, #12]
   86698:	bd10      	pop	{r4, pc}
   8669a:	bf00      	nop

0008669c <__swrite>:
   8669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   866a0:	460c      	mov	r4, r1
   866a2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   866a6:	461f      	mov	r7, r3
   866a8:	05cb      	lsls	r3, r1, #23
   866aa:	4616      	mov	r6, r2
   866ac:	4605      	mov	r5, r0
   866ae:	d507      	bpl.n	866c0 <__swrite+0x24>
   866b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   866b4:	2302      	movs	r3, #2
   866b6:	2200      	movs	r2, #0
   866b8:	f000 f992 	bl	869e0 <_lseek_r>
   866bc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   866c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   866c4:	81a1      	strh	r1, [r4, #12]
   866c6:	463b      	mov	r3, r7
   866c8:	4632      	mov	r2, r6
   866ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   866ce:	4628      	mov	r0, r5
   866d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   866d4:	f000 b8a2 	b.w	8681c <_write_r>

000866d8 <__sseek>:
   866d8:	b510      	push	{r4, lr}
   866da:	460c      	mov	r4, r1
   866dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   866e0:	f000 f97e 	bl	869e0 <_lseek_r>
   866e4:	89a3      	ldrh	r3, [r4, #12]
   866e6:	1c42      	adds	r2, r0, #1
   866e8:	bf0e      	itee	eq
   866ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   866ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   866f2:	6520      	strne	r0, [r4, #80]	; 0x50
   866f4:	81a3      	strh	r3, [r4, #12]
   866f6:	bd10      	pop	{r4, pc}

000866f8 <__sclose>:
   866f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   866fc:	f000 b8f6 	b.w	868ec <_close_r>

00086700 <__swbuf_r>:
   86700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86702:	460e      	mov	r6, r1
   86704:	4614      	mov	r4, r2
   86706:	4607      	mov	r7, r0
   86708:	b110      	cbz	r0, 86710 <__swbuf_r+0x10>
   8670a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8670c:	2b00      	cmp	r3, #0
   8670e:	d04a      	beq.n	867a6 <__swbuf_r+0xa6>
   86710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86714:	69a3      	ldr	r3, [r4, #24]
   86716:	b291      	uxth	r1, r2
   86718:	0708      	lsls	r0, r1, #28
   8671a:	60a3      	str	r3, [r4, #8]
   8671c:	d538      	bpl.n	86790 <__swbuf_r+0x90>
   8671e:	6923      	ldr	r3, [r4, #16]
   86720:	2b00      	cmp	r3, #0
   86722:	d035      	beq.n	86790 <__swbuf_r+0x90>
   86724:	0489      	lsls	r1, r1, #18
   86726:	b2f5      	uxtb	r5, r6
   86728:	d515      	bpl.n	86756 <__swbuf_r+0x56>
   8672a:	6822      	ldr	r2, [r4, #0]
   8672c:	6961      	ldr	r1, [r4, #20]
   8672e:	1ad3      	subs	r3, r2, r3
   86730:	428b      	cmp	r3, r1
   86732:	da1c      	bge.n	8676e <__swbuf_r+0x6e>
   86734:	3301      	adds	r3, #1
   86736:	68a1      	ldr	r1, [r4, #8]
   86738:	1c50      	adds	r0, r2, #1
   8673a:	3901      	subs	r1, #1
   8673c:	60a1      	str	r1, [r4, #8]
   8673e:	6020      	str	r0, [r4, #0]
   86740:	7016      	strb	r6, [r2, #0]
   86742:	6962      	ldr	r2, [r4, #20]
   86744:	429a      	cmp	r2, r3
   86746:	d01a      	beq.n	8677e <__swbuf_r+0x7e>
   86748:	89a3      	ldrh	r3, [r4, #12]
   8674a:	07db      	lsls	r3, r3, #31
   8674c:	d501      	bpl.n	86752 <__swbuf_r+0x52>
   8674e:	2d0a      	cmp	r5, #10
   86750:	d015      	beq.n	8677e <__swbuf_r+0x7e>
   86752:	4628      	mov	r0, r5
   86754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86756:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8675c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86760:	81a2      	strh	r2, [r4, #12]
   86762:	6822      	ldr	r2, [r4, #0]
   86764:	6661      	str	r1, [r4, #100]	; 0x64
   86766:	6961      	ldr	r1, [r4, #20]
   86768:	1ad3      	subs	r3, r2, r3
   8676a:	428b      	cmp	r3, r1
   8676c:	dbe2      	blt.n	86734 <__swbuf_r+0x34>
   8676e:	4621      	mov	r1, r4
   86770:	4638      	mov	r0, r7
   86772:	f7fe fd3f 	bl	851f4 <_fflush_r>
   86776:	b940      	cbnz	r0, 8678a <__swbuf_r+0x8a>
   86778:	6822      	ldr	r2, [r4, #0]
   8677a:	2301      	movs	r3, #1
   8677c:	e7db      	b.n	86736 <__swbuf_r+0x36>
   8677e:	4621      	mov	r1, r4
   86780:	4638      	mov	r0, r7
   86782:	f7fe fd37 	bl	851f4 <_fflush_r>
   86786:	2800      	cmp	r0, #0
   86788:	d0e3      	beq.n	86752 <__swbuf_r+0x52>
   8678a:	f04f 30ff 	mov.w	r0, #4294967295
   8678e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86790:	4621      	mov	r1, r4
   86792:	4638      	mov	r0, r7
   86794:	f7fe fc16 	bl	84fc4 <__swsetup_r>
   86798:	2800      	cmp	r0, #0
   8679a:	d1f6      	bne.n	8678a <__swbuf_r+0x8a>
   8679c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   867a0:	6923      	ldr	r3, [r4, #16]
   867a2:	b291      	uxth	r1, r2
   867a4:	e7be      	b.n	86724 <__swbuf_r+0x24>
   867a6:	f7fe fdb9 	bl	8531c <__sinit>
   867aa:	e7b1      	b.n	86710 <__swbuf_r+0x10>

000867ac <_wcrtomb_r>:
   867ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   867b0:	4605      	mov	r5, r0
   867b2:	b086      	sub	sp, #24
   867b4:	461e      	mov	r6, r3
   867b6:	460c      	mov	r4, r1
   867b8:	b1a1      	cbz	r1, 867e4 <_wcrtomb_r+0x38>
   867ba:	4b10      	ldr	r3, [pc, #64]	; (867fc <_wcrtomb_r+0x50>)
   867bc:	4617      	mov	r7, r2
   867be:	f8d3 8000 	ldr.w	r8, [r3]
   867c2:	f7ff f907 	bl	859d4 <__locale_charset>
   867c6:	9600      	str	r6, [sp, #0]
   867c8:	4603      	mov	r3, r0
   867ca:	463a      	mov	r2, r7
   867cc:	4621      	mov	r1, r4
   867ce:	4628      	mov	r0, r5
   867d0:	47c0      	blx	r8
   867d2:	1c43      	adds	r3, r0, #1
   867d4:	d103      	bne.n	867de <_wcrtomb_r+0x32>
   867d6:	2200      	movs	r2, #0
   867d8:	238a      	movs	r3, #138	; 0x8a
   867da:	6032      	str	r2, [r6, #0]
   867dc:	602b      	str	r3, [r5, #0]
   867de:	b006      	add	sp, #24
   867e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   867e4:	4b05      	ldr	r3, [pc, #20]	; (867fc <_wcrtomb_r+0x50>)
   867e6:	681f      	ldr	r7, [r3, #0]
   867e8:	f7ff f8f4 	bl	859d4 <__locale_charset>
   867ec:	9600      	str	r6, [sp, #0]
   867ee:	4603      	mov	r3, r0
   867f0:	4622      	mov	r2, r4
   867f2:	a903      	add	r1, sp, #12
   867f4:	4628      	mov	r0, r5
   867f6:	47b8      	blx	r7
   867f8:	e7eb      	b.n	867d2 <_wcrtomb_r+0x26>
   867fa:	bf00      	nop
   867fc:	20070c68 	.word	0x20070c68

00086800 <__ascii_wctomb>:
   86800:	b121      	cbz	r1, 8680c <__ascii_wctomb+0xc>
   86802:	2aff      	cmp	r2, #255	; 0xff
   86804:	d804      	bhi.n	86810 <__ascii_wctomb+0x10>
   86806:	700a      	strb	r2, [r1, #0]
   86808:	2001      	movs	r0, #1
   8680a:	4770      	bx	lr
   8680c:	4608      	mov	r0, r1
   8680e:	4770      	bx	lr
   86810:	238a      	movs	r3, #138	; 0x8a
   86812:	6003      	str	r3, [r0, #0]
   86814:	f04f 30ff 	mov.w	r0, #4294967295
   86818:	4770      	bx	lr
   8681a:	bf00      	nop

0008681c <_write_r>:
   8681c:	b570      	push	{r4, r5, r6, lr}
   8681e:	460d      	mov	r5, r1
   86820:	4c08      	ldr	r4, [pc, #32]	; (86844 <_write_r+0x28>)
   86822:	4611      	mov	r1, r2
   86824:	4606      	mov	r6, r0
   86826:	461a      	mov	r2, r3
   86828:	4628      	mov	r0, r5
   8682a:	2300      	movs	r3, #0
   8682c:	6023      	str	r3, [r4, #0]
   8682e:	f7fa ff17 	bl	81660 <_write>
   86832:	1c43      	adds	r3, r0, #1
   86834:	d000      	beq.n	86838 <_write_r+0x1c>
   86836:	bd70      	pop	{r4, r5, r6, pc}
   86838:	6823      	ldr	r3, [r4, #0]
   8683a:	2b00      	cmp	r3, #0
   8683c:	d0fb      	beq.n	86836 <_write_r+0x1a>
   8683e:	6033      	str	r3, [r6, #0]
   86840:	bd70      	pop	{r4, r5, r6, pc}
   86842:	bf00      	nop
   86844:	20071258 	.word	0x20071258

00086848 <__register_exitproc>:
   86848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8684c:	4c25      	ldr	r4, [pc, #148]	; (868e4 <__register_exitproc+0x9c>)
   8684e:	4606      	mov	r6, r0
   86850:	6825      	ldr	r5, [r4, #0]
   86852:	4688      	mov	r8, r1
   86854:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   86858:	4692      	mov	sl, r2
   8685a:	4699      	mov	r9, r3
   8685c:	b3c4      	cbz	r4, 868d0 <__register_exitproc+0x88>
   8685e:	6860      	ldr	r0, [r4, #4]
   86860:	281f      	cmp	r0, #31
   86862:	dc17      	bgt.n	86894 <__register_exitproc+0x4c>
   86864:	1c41      	adds	r1, r0, #1
   86866:	b176      	cbz	r6, 86886 <__register_exitproc+0x3e>
   86868:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   8686c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   86870:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86874:	2201      	movs	r2, #1
   86876:	4082      	lsls	r2, r0
   86878:	4315      	orrs	r5, r2
   8687a:	2e02      	cmp	r6, #2
   8687c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   86880:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86884:	d01e      	beq.n	868c4 <__register_exitproc+0x7c>
   86886:	1c83      	adds	r3, r0, #2
   86888:	6061      	str	r1, [r4, #4]
   8688a:	2000      	movs	r0, #0
   8688c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   86890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86894:	4b14      	ldr	r3, [pc, #80]	; (868e8 <__register_exitproc+0xa0>)
   86896:	b303      	cbz	r3, 868da <__register_exitproc+0x92>
   86898:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8689c:	f7ff f918 	bl	85ad0 <malloc>
   868a0:	4604      	mov	r4, r0
   868a2:	b1d0      	cbz	r0, 868da <__register_exitproc+0x92>
   868a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   868a8:	2700      	movs	r7, #0
   868aa:	e884 0088 	stmia.w	r4, {r3, r7}
   868ae:	4638      	mov	r0, r7
   868b0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   868b4:	2101      	movs	r1, #1
   868b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   868ba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   868be:	2e00      	cmp	r6, #0
   868c0:	d0e1      	beq.n	86886 <__register_exitproc+0x3e>
   868c2:	e7d1      	b.n	86868 <__register_exitproc+0x20>
   868c4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   868c8:	431a      	orrs	r2, r3
   868ca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   868ce:	e7da      	b.n	86886 <__register_exitproc+0x3e>
   868d0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   868d4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   868d8:	e7c1      	b.n	8685e <__register_exitproc+0x16>
   868da:	f04f 30ff 	mov.w	r0, #4294967295
   868de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   868e2:	bf00      	nop
   868e4:	00086dec 	.word	0x00086dec
   868e8:	00085ad1 	.word	0x00085ad1

000868ec <_close_r>:
   868ec:	b538      	push	{r3, r4, r5, lr}
   868ee:	4c07      	ldr	r4, [pc, #28]	; (8690c <_close_r+0x20>)
   868f0:	2300      	movs	r3, #0
   868f2:	4605      	mov	r5, r0
   868f4:	4608      	mov	r0, r1
   868f6:	6023      	str	r3, [r4, #0]
   868f8:	f7fd f88c 	bl	83a14 <_close>
   868fc:	1c43      	adds	r3, r0, #1
   868fe:	d000      	beq.n	86902 <_close_r+0x16>
   86900:	bd38      	pop	{r3, r4, r5, pc}
   86902:	6823      	ldr	r3, [r4, #0]
   86904:	2b00      	cmp	r3, #0
   86906:	d0fb      	beq.n	86900 <_close_r+0x14>
   86908:	602b      	str	r3, [r5, #0]
   8690a:	bd38      	pop	{r3, r4, r5, pc}
   8690c:	20071258 	.word	0x20071258

00086910 <_fclose_r>:
   86910:	2900      	cmp	r1, #0
   86912:	d03d      	beq.n	86990 <_fclose_r+0x80>
   86914:	b570      	push	{r4, r5, r6, lr}
   86916:	4605      	mov	r5, r0
   86918:	460c      	mov	r4, r1
   8691a:	b108      	cbz	r0, 86920 <_fclose_r+0x10>
   8691c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8691e:	b37b      	cbz	r3, 86980 <_fclose_r+0x70>
   86920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86924:	b90b      	cbnz	r3, 8692a <_fclose_r+0x1a>
   86926:	2000      	movs	r0, #0
   86928:	bd70      	pop	{r4, r5, r6, pc}
   8692a:	4621      	mov	r1, r4
   8692c:	4628      	mov	r0, r5
   8692e:	f7fe fbbd 	bl	850ac <__sflush_r>
   86932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86934:	4606      	mov	r6, r0
   86936:	b133      	cbz	r3, 86946 <_fclose_r+0x36>
   86938:	69e1      	ldr	r1, [r4, #28]
   8693a:	4628      	mov	r0, r5
   8693c:	4798      	blx	r3
   8693e:	2800      	cmp	r0, #0
   86940:	bfb8      	it	lt
   86942:	f04f 36ff 	movlt.w	r6, #4294967295
   86946:	89a3      	ldrh	r3, [r4, #12]
   86948:	061b      	lsls	r3, r3, #24
   8694a:	d41c      	bmi.n	86986 <_fclose_r+0x76>
   8694c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8694e:	b141      	cbz	r1, 86962 <_fclose_r+0x52>
   86950:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86954:	4299      	cmp	r1, r3
   86956:	d002      	beq.n	8695e <_fclose_r+0x4e>
   86958:	4628      	mov	r0, r5
   8695a:	f7fe fda7 	bl	854ac <_free_r>
   8695e:	2300      	movs	r3, #0
   86960:	6323      	str	r3, [r4, #48]	; 0x30
   86962:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86964:	b121      	cbz	r1, 86970 <_fclose_r+0x60>
   86966:	4628      	mov	r0, r5
   86968:	f7fe fda0 	bl	854ac <_free_r>
   8696c:	2300      	movs	r3, #0
   8696e:	6463      	str	r3, [r4, #68]	; 0x44
   86970:	f7fe fcda 	bl	85328 <__sfp_lock_acquire>
   86974:	2300      	movs	r3, #0
   86976:	81a3      	strh	r3, [r4, #12]
   86978:	f7fe fcd8 	bl	8532c <__sfp_lock_release>
   8697c:	4630      	mov	r0, r6
   8697e:	bd70      	pop	{r4, r5, r6, pc}
   86980:	f7fe fccc 	bl	8531c <__sinit>
   86984:	e7cc      	b.n	86920 <_fclose_r+0x10>
   86986:	6921      	ldr	r1, [r4, #16]
   86988:	4628      	mov	r0, r5
   8698a:	f7fe fd8f 	bl	854ac <_free_r>
   8698e:	e7dd      	b.n	8694c <_fclose_r+0x3c>
   86990:	2000      	movs	r0, #0
   86992:	4770      	bx	lr

00086994 <_fstat_r>:
   86994:	b538      	push	{r3, r4, r5, lr}
   86996:	460b      	mov	r3, r1
   86998:	4c07      	ldr	r4, [pc, #28]	; (869b8 <_fstat_r+0x24>)
   8699a:	4605      	mov	r5, r0
   8699c:	4611      	mov	r1, r2
   8699e:	4618      	mov	r0, r3
   869a0:	2300      	movs	r3, #0
   869a2:	6023      	str	r3, [r4, #0]
   869a4:	f7fd f842 	bl	83a2c <_fstat>
   869a8:	1c43      	adds	r3, r0, #1
   869aa:	d000      	beq.n	869ae <_fstat_r+0x1a>
   869ac:	bd38      	pop	{r3, r4, r5, pc}
   869ae:	6823      	ldr	r3, [r4, #0]
   869b0:	2b00      	cmp	r3, #0
   869b2:	d0fb      	beq.n	869ac <_fstat_r+0x18>
   869b4:	602b      	str	r3, [r5, #0]
   869b6:	bd38      	pop	{r3, r4, r5, pc}
   869b8:	20071258 	.word	0x20071258

000869bc <_isatty_r>:
   869bc:	b538      	push	{r3, r4, r5, lr}
   869be:	4c07      	ldr	r4, [pc, #28]	; (869dc <_isatty_r+0x20>)
   869c0:	2300      	movs	r3, #0
   869c2:	4605      	mov	r5, r0
   869c4:	4608      	mov	r0, r1
   869c6:	6023      	str	r3, [r4, #0]
   869c8:	f7fd f840 	bl	83a4c <_isatty>
   869cc:	1c43      	adds	r3, r0, #1
   869ce:	d000      	beq.n	869d2 <_isatty_r+0x16>
   869d0:	bd38      	pop	{r3, r4, r5, pc}
   869d2:	6823      	ldr	r3, [r4, #0]
   869d4:	2b00      	cmp	r3, #0
   869d6:	d0fb      	beq.n	869d0 <_isatty_r+0x14>
   869d8:	602b      	str	r3, [r5, #0]
   869da:	bd38      	pop	{r3, r4, r5, pc}
   869dc:	20071258 	.word	0x20071258

000869e0 <_lseek_r>:
   869e0:	b570      	push	{r4, r5, r6, lr}
   869e2:	460d      	mov	r5, r1
   869e4:	4c08      	ldr	r4, [pc, #32]	; (86a08 <_lseek_r+0x28>)
   869e6:	4611      	mov	r1, r2
   869e8:	4606      	mov	r6, r0
   869ea:	461a      	mov	r2, r3
   869ec:	4628      	mov	r0, r5
   869ee:	2300      	movs	r3, #0
   869f0:	6023      	str	r3, [r4, #0]
   869f2:	f7fd f835 	bl	83a60 <_lseek>
   869f6:	1c43      	adds	r3, r0, #1
   869f8:	d000      	beq.n	869fc <_lseek_r+0x1c>
   869fa:	bd70      	pop	{r4, r5, r6, pc}
   869fc:	6823      	ldr	r3, [r4, #0]
   869fe:	2b00      	cmp	r3, #0
   86a00:	d0fb      	beq.n	869fa <_lseek_r+0x1a>
   86a02:	6033      	str	r3, [r6, #0]
   86a04:	bd70      	pop	{r4, r5, r6, pc}
   86a06:	bf00      	nop
   86a08:	20071258 	.word	0x20071258

00086a0c <_read_r>:
   86a0c:	b570      	push	{r4, r5, r6, lr}
   86a0e:	460d      	mov	r5, r1
   86a10:	4c08      	ldr	r4, [pc, #32]	; (86a34 <_read_r+0x28>)
   86a12:	4611      	mov	r1, r2
   86a14:	4606      	mov	r6, r0
   86a16:	461a      	mov	r2, r3
   86a18:	4628      	mov	r0, r5
   86a1a:	2300      	movs	r3, #0
   86a1c:	6023      	str	r3, [r4, #0]
   86a1e:	f7fa fdf5 	bl	8160c <_read>
   86a22:	1c43      	adds	r3, r0, #1
   86a24:	d000      	beq.n	86a28 <_read_r+0x1c>
   86a26:	bd70      	pop	{r4, r5, r6, pc}
   86a28:	6823      	ldr	r3, [r4, #0]
   86a2a:	2b00      	cmp	r3, #0
   86a2c:	d0fb      	beq.n	86a26 <_read_r+0x1a>
   86a2e:	6033      	str	r3, [r6, #0]
   86a30:	bd70      	pop	{r4, r5, r6, pc}
   86a32:	bf00      	nop
   86a34:	20071258 	.word	0x20071258

00086a38 <__aeabi_uldivmod>:
   86a38:	b953      	cbnz	r3, 86a50 <__aeabi_uldivmod+0x18>
   86a3a:	b94a      	cbnz	r2, 86a50 <__aeabi_uldivmod+0x18>
   86a3c:	2900      	cmp	r1, #0
   86a3e:	bf08      	it	eq
   86a40:	2800      	cmpeq	r0, #0
   86a42:	bf1c      	itt	ne
   86a44:	f04f 31ff 	movne.w	r1, #4294967295
   86a48:	f04f 30ff 	movne.w	r0, #4294967295
   86a4c:	f000 b982 	b.w	86d54 <__aeabi_idiv0>
   86a50:	f1ad 0c08 	sub.w	ip, sp, #8
   86a54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86a58:	f000 f806 	bl	86a68 <__udivmoddi4>
   86a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
   86a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86a64:	b004      	add	sp, #16
   86a66:	4770      	bx	lr

00086a68 <__udivmoddi4>:
   86a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a6c:	468c      	mov	ip, r1
   86a6e:	460c      	mov	r4, r1
   86a70:	4605      	mov	r5, r0
   86a72:	9e09      	ldr	r6, [sp, #36]	; 0x24
   86a74:	2b00      	cmp	r3, #0
   86a76:	d14f      	bne.n	86b18 <__udivmoddi4+0xb0>
   86a78:	428a      	cmp	r2, r1
   86a7a:	4617      	mov	r7, r2
   86a7c:	d96b      	bls.n	86b56 <__udivmoddi4+0xee>
   86a7e:	fab2 fe82 	clz	lr, r2
   86a82:	f1be 0f00 	cmp.w	lr, #0
   86a86:	d00b      	beq.n	86aa0 <__udivmoddi4+0x38>
   86a88:	f1ce 0520 	rsb	r5, lr, #32
   86a8c:	fa20 f505 	lsr.w	r5, r0, r5
   86a90:	fa01 f30e 	lsl.w	r3, r1, lr
   86a94:	ea45 0c03 	orr.w	ip, r5, r3
   86a98:	fa02 f70e 	lsl.w	r7, r2, lr
   86a9c:	fa00 f50e 	lsl.w	r5, r0, lr
   86aa0:	0c39      	lsrs	r1, r7, #16
   86aa2:	fbbc f0f1 	udiv	r0, ip, r1
   86aa6:	b2ba      	uxth	r2, r7
   86aa8:	fb01 c310 	mls	r3, r1, r0, ip
   86aac:	fb00 f802 	mul.w	r8, r0, r2
   86ab0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86ab4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   86ab8:	45a0      	cmp	r8, r4
   86aba:	d909      	bls.n	86ad0 <__udivmoddi4+0x68>
   86abc:	19e4      	adds	r4, r4, r7
   86abe:	f100 33ff 	add.w	r3, r0, #4294967295
   86ac2:	f080 8128 	bcs.w	86d16 <__udivmoddi4+0x2ae>
   86ac6:	45a0      	cmp	r8, r4
   86ac8:	f240 8125 	bls.w	86d16 <__udivmoddi4+0x2ae>
   86acc:	3802      	subs	r0, #2
   86ace:	443c      	add	r4, r7
   86ad0:	ebc8 0404 	rsb	r4, r8, r4
   86ad4:	fbb4 f3f1 	udiv	r3, r4, r1
   86ad8:	fb01 4c13 	mls	ip, r1, r3, r4
   86adc:	fb03 f202 	mul.w	r2, r3, r2
   86ae0:	b2ac      	uxth	r4, r5
   86ae2:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   86ae6:	428a      	cmp	r2, r1
   86ae8:	d909      	bls.n	86afe <__udivmoddi4+0x96>
   86aea:	19c9      	adds	r1, r1, r7
   86aec:	f103 34ff 	add.w	r4, r3, #4294967295
   86af0:	f080 810f 	bcs.w	86d12 <__udivmoddi4+0x2aa>
   86af4:	428a      	cmp	r2, r1
   86af6:	f240 810c 	bls.w	86d12 <__udivmoddi4+0x2aa>
   86afa:	3b02      	subs	r3, #2
   86afc:	4439      	add	r1, r7
   86afe:	1a8a      	subs	r2, r1, r2
   86b00:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   86b04:	2100      	movs	r1, #0
   86b06:	2e00      	cmp	r6, #0
   86b08:	d063      	beq.n	86bd2 <__udivmoddi4+0x16a>
   86b0a:	fa22 f20e 	lsr.w	r2, r2, lr
   86b0e:	2300      	movs	r3, #0
   86b10:	e886 000c 	stmia.w	r6, {r2, r3}
   86b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b18:	428b      	cmp	r3, r1
   86b1a:	d907      	bls.n	86b2c <__udivmoddi4+0xc4>
   86b1c:	2e00      	cmp	r6, #0
   86b1e:	d056      	beq.n	86bce <__udivmoddi4+0x166>
   86b20:	2100      	movs	r1, #0
   86b22:	e886 0011 	stmia.w	r6, {r0, r4}
   86b26:	4608      	mov	r0, r1
   86b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b2c:	fab3 f183 	clz	r1, r3
   86b30:	2900      	cmp	r1, #0
   86b32:	f040 8093 	bne.w	86c5c <__udivmoddi4+0x1f4>
   86b36:	42a3      	cmp	r3, r4
   86b38:	d302      	bcc.n	86b40 <__udivmoddi4+0xd8>
   86b3a:	4282      	cmp	r2, r0
   86b3c:	f200 80fe 	bhi.w	86d3c <__udivmoddi4+0x2d4>
   86b40:	1a85      	subs	r5, r0, r2
   86b42:	eb64 0303 	sbc.w	r3, r4, r3
   86b46:	469c      	mov	ip, r3
   86b48:	2001      	movs	r0, #1
   86b4a:	2e00      	cmp	r6, #0
   86b4c:	d041      	beq.n	86bd2 <__udivmoddi4+0x16a>
   86b4e:	e886 1020 	stmia.w	r6, {r5, ip}
   86b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b56:	b912      	cbnz	r2, 86b5e <__udivmoddi4+0xf6>
   86b58:	2701      	movs	r7, #1
   86b5a:	fbb7 f7f2 	udiv	r7, r7, r2
   86b5e:	fab7 fe87 	clz	lr, r7
   86b62:	f1be 0f00 	cmp.w	lr, #0
   86b66:	d136      	bne.n	86bd6 <__udivmoddi4+0x16e>
   86b68:	1be4      	subs	r4, r4, r7
   86b6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86b6e:	fa1f f987 	uxth.w	r9, r7
   86b72:	2101      	movs	r1, #1
   86b74:	fbb4 f3f8 	udiv	r3, r4, r8
   86b78:	fb08 4413 	mls	r4, r8, r3, r4
   86b7c:	fb09 f203 	mul.w	r2, r9, r3
   86b80:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86b84:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   86b88:	42a2      	cmp	r2, r4
   86b8a:	d907      	bls.n	86b9c <__udivmoddi4+0x134>
   86b8c:	19e4      	adds	r4, r4, r7
   86b8e:	f103 30ff 	add.w	r0, r3, #4294967295
   86b92:	d202      	bcs.n	86b9a <__udivmoddi4+0x132>
   86b94:	42a2      	cmp	r2, r4
   86b96:	f200 80d3 	bhi.w	86d40 <__udivmoddi4+0x2d8>
   86b9a:	4603      	mov	r3, r0
   86b9c:	1aa4      	subs	r4, r4, r2
   86b9e:	fbb4 f0f8 	udiv	r0, r4, r8
   86ba2:	fb08 4810 	mls	r8, r8, r0, r4
   86ba6:	fb09 f900 	mul.w	r9, r9, r0
   86baa:	b2ac      	uxth	r4, r5
   86bac:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   86bb0:	4591      	cmp	r9, r2
   86bb2:	d907      	bls.n	86bc4 <__udivmoddi4+0x15c>
   86bb4:	19d2      	adds	r2, r2, r7
   86bb6:	f100 34ff 	add.w	r4, r0, #4294967295
   86bba:	d202      	bcs.n	86bc2 <__udivmoddi4+0x15a>
   86bbc:	4591      	cmp	r9, r2
   86bbe:	f200 80ba 	bhi.w	86d36 <__udivmoddi4+0x2ce>
   86bc2:	4620      	mov	r0, r4
   86bc4:	ebc9 0202 	rsb	r2, r9, r2
   86bc8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   86bcc:	e79b      	b.n	86b06 <__udivmoddi4+0x9e>
   86bce:	4631      	mov	r1, r6
   86bd0:	4630      	mov	r0, r6
   86bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86bd6:	fa07 f70e 	lsl.w	r7, r7, lr
   86bda:	f1ce 0c20 	rsb	ip, lr, #32
   86bde:	fa24 f30c 	lsr.w	r3, r4, ip
   86be2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86be6:	fbb3 faf8 	udiv	sl, r3, r8
   86bea:	fa1f f987 	uxth.w	r9, r7
   86bee:	fb08 351a 	mls	r5, r8, sl, r3
   86bf2:	fa20 fc0c 	lsr.w	ip, r0, ip
   86bf6:	fa04 f40e 	lsl.w	r4, r4, lr
   86bfa:	fb0a fb09 	mul.w	fp, sl, r9
   86bfe:	ea4c 0c04 	orr.w	ip, ip, r4
   86c02:	ea4f 421c 	mov.w	r2, ip, lsr #16
   86c06:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   86c0a:	459b      	cmp	fp, r3
   86c0c:	fa00 f50e 	lsl.w	r5, r0, lr
   86c10:	d90a      	bls.n	86c28 <__udivmoddi4+0x1c0>
   86c12:	19db      	adds	r3, r3, r7
   86c14:	f10a 32ff 	add.w	r2, sl, #4294967295
   86c18:	f080 808b 	bcs.w	86d32 <__udivmoddi4+0x2ca>
   86c1c:	459b      	cmp	fp, r3
   86c1e:	f240 8088 	bls.w	86d32 <__udivmoddi4+0x2ca>
   86c22:	f1aa 0a02 	sub.w	sl, sl, #2
   86c26:	443b      	add	r3, r7
   86c28:	ebcb 0303 	rsb	r3, fp, r3
   86c2c:	fbb3 f0f8 	udiv	r0, r3, r8
   86c30:	fb08 3310 	mls	r3, r8, r0, r3
   86c34:	fb00 f409 	mul.w	r4, r0, r9
   86c38:	fa1f fc8c 	uxth.w	ip, ip
   86c3c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   86c40:	429c      	cmp	r4, r3
   86c42:	d907      	bls.n	86c54 <__udivmoddi4+0x1ec>
   86c44:	19db      	adds	r3, r3, r7
   86c46:	f100 32ff 	add.w	r2, r0, #4294967295
   86c4a:	d26e      	bcs.n	86d2a <__udivmoddi4+0x2c2>
   86c4c:	429c      	cmp	r4, r3
   86c4e:	d96c      	bls.n	86d2a <__udivmoddi4+0x2c2>
   86c50:	3802      	subs	r0, #2
   86c52:	443b      	add	r3, r7
   86c54:	1b1c      	subs	r4, r3, r4
   86c56:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   86c5a:	e78b      	b.n	86b74 <__udivmoddi4+0x10c>
   86c5c:	f1c1 0e20 	rsb	lr, r1, #32
   86c60:	408b      	lsls	r3, r1
   86c62:	fa22 fc0e 	lsr.w	ip, r2, lr
   86c66:	ea4c 0c03 	orr.w	ip, ip, r3
   86c6a:	fa24 f70e 	lsr.w	r7, r4, lr
   86c6e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   86c72:	fbb7 faf9 	udiv	sl, r7, r9
   86c76:	fa1f f38c 	uxth.w	r3, ip
   86c7a:	fb09 771a 	mls	r7, r9, sl, r7
   86c7e:	fa20 f80e 	lsr.w	r8, r0, lr
   86c82:	408c      	lsls	r4, r1
   86c84:	fb0a f503 	mul.w	r5, sl, r3
   86c88:	ea48 0404 	orr.w	r4, r8, r4
   86c8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86c90:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   86c94:	42bd      	cmp	r5, r7
   86c96:	fa02 f201 	lsl.w	r2, r2, r1
   86c9a:	fa00 fb01 	lsl.w	fp, r0, r1
   86c9e:	d909      	bls.n	86cb4 <__udivmoddi4+0x24c>
   86ca0:	eb17 070c 	adds.w	r7, r7, ip
   86ca4:	f10a 30ff 	add.w	r0, sl, #4294967295
   86ca8:	d241      	bcs.n	86d2e <__udivmoddi4+0x2c6>
   86caa:	42bd      	cmp	r5, r7
   86cac:	d93f      	bls.n	86d2e <__udivmoddi4+0x2c6>
   86cae:	f1aa 0a02 	sub.w	sl, sl, #2
   86cb2:	4467      	add	r7, ip
   86cb4:	1b7f      	subs	r7, r7, r5
   86cb6:	fbb7 f5f9 	udiv	r5, r7, r9
   86cba:	fb09 7715 	mls	r7, r9, r5, r7
   86cbe:	fb05 f303 	mul.w	r3, r5, r3
   86cc2:	b2a4      	uxth	r4, r4
   86cc4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   86cc8:	42bb      	cmp	r3, r7
   86cca:	d908      	bls.n	86cde <__udivmoddi4+0x276>
   86ccc:	eb17 070c 	adds.w	r7, r7, ip
   86cd0:	f105 30ff 	add.w	r0, r5, #4294967295
   86cd4:	d227      	bcs.n	86d26 <__udivmoddi4+0x2be>
   86cd6:	42bb      	cmp	r3, r7
   86cd8:	d925      	bls.n	86d26 <__udivmoddi4+0x2be>
   86cda:	3d02      	subs	r5, #2
   86cdc:	4467      	add	r7, ip
   86cde:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   86ce2:	fba0 8902 	umull	r8, r9, r0, r2
   86ce6:	1aff      	subs	r7, r7, r3
   86ce8:	454f      	cmp	r7, r9
   86cea:	4645      	mov	r5, r8
   86cec:	464c      	mov	r4, r9
   86cee:	d314      	bcc.n	86d1a <__udivmoddi4+0x2b2>
   86cf0:	d029      	beq.n	86d46 <__udivmoddi4+0x2de>
   86cf2:	b366      	cbz	r6, 86d4e <__udivmoddi4+0x2e6>
   86cf4:	ebbb 0305 	subs.w	r3, fp, r5
   86cf8:	eb67 0704 	sbc.w	r7, r7, r4
   86cfc:	fa07 fe0e 	lsl.w	lr, r7, lr
   86d00:	40cb      	lsrs	r3, r1
   86d02:	40cf      	lsrs	r7, r1
   86d04:	ea4e 0303 	orr.w	r3, lr, r3
   86d08:	e886 0088 	stmia.w	r6, {r3, r7}
   86d0c:	2100      	movs	r1, #0
   86d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86d12:	4623      	mov	r3, r4
   86d14:	e6f3      	b.n	86afe <__udivmoddi4+0x96>
   86d16:	4618      	mov	r0, r3
   86d18:	e6da      	b.n	86ad0 <__udivmoddi4+0x68>
   86d1a:	ebb8 0502 	subs.w	r5, r8, r2
   86d1e:	eb69 040c 	sbc.w	r4, r9, ip
   86d22:	3801      	subs	r0, #1
   86d24:	e7e5      	b.n	86cf2 <__udivmoddi4+0x28a>
   86d26:	4605      	mov	r5, r0
   86d28:	e7d9      	b.n	86cde <__udivmoddi4+0x276>
   86d2a:	4610      	mov	r0, r2
   86d2c:	e792      	b.n	86c54 <__udivmoddi4+0x1ec>
   86d2e:	4682      	mov	sl, r0
   86d30:	e7c0      	b.n	86cb4 <__udivmoddi4+0x24c>
   86d32:	4692      	mov	sl, r2
   86d34:	e778      	b.n	86c28 <__udivmoddi4+0x1c0>
   86d36:	3802      	subs	r0, #2
   86d38:	443a      	add	r2, r7
   86d3a:	e743      	b.n	86bc4 <__udivmoddi4+0x15c>
   86d3c:	4608      	mov	r0, r1
   86d3e:	e704      	b.n	86b4a <__udivmoddi4+0xe2>
   86d40:	3b02      	subs	r3, #2
   86d42:	443c      	add	r4, r7
   86d44:	e72a      	b.n	86b9c <__udivmoddi4+0x134>
   86d46:	45c3      	cmp	fp, r8
   86d48:	d3e7      	bcc.n	86d1a <__udivmoddi4+0x2b2>
   86d4a:	463c      	mov	r4, r7
   86d4c:	e7d1      	b.n	86cf2 <__udivmoddi4+0x28a>
   86d4e:	4631      	mov	r1, r6
   86d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086d54 <__aeabi_idiv0>:
   86d54:	4770      	bx	lr
   86d56:	bf00      	nop

00086d58 <can_bit_time>:
   86d58:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   86d68:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   86d78:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   86d88:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86d98:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86da8:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86db8:	0718 0808 4304 0819 0808 4404               .....C.....D

00086dc4 <uart_serial_options>:
   86dc4:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86dd4:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86de4:	0000 0000 0043 0000                         ....C...

00086dec <_global_impure_ptr>:
   86dec:	0408 2007                                   ... 

00086df0 <zeroes.6993>:
   86df0:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   86e00:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   86e10:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   86e20:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

00086e30 <blanks.6992>:
   86e30:	2020 2020 2020 2020 2020 2020 2020 2020                     

00086e40 <_init>:
   86e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e42:	bf00      	nop
   86e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e46:	bc08      	pop	{r3}
   86e48:	469e      	mov	lr, r3
   86e4a:	4770      	bx	lr

00086e4c <__init_array_start>:
   86e4c:	0008508d 	.word	0x0008508d

00086e50 <__frame_dummy_init_array_entry>:
   86e50:	00080119                                ....

00086e54 <_fini>:
   86e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86e56:	bf00      	nop
   86e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86e5a:	bc08      	pop	{r3}
   86e5c:	469e      	mov	lr, r3
   86e5e:	4770      	bx	lr

00086e60 <__fini_array_start>:
   86e60:	000800f5 	.word	0x000800f5
